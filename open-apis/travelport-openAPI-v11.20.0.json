{
  "openapi": "3.0.0",
  "info": {
    "title": "TP Air Exchange Ancillaries",
    "description": "The Travelport JSON Air API collection supports rapid development of high-performing travel solutions. The Air APIs connect you to comprehensive air content and facilitate multi-channel development across web and mobile platforms. All requests are RESTful and support JSON.",
    "version": "11.20.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/TravelportAPI/TPAirExchangeAncillaries/11.20.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "https://api.pp.travelport.com/11"
    },
    {
      "url": "https://api.travelport.com/11"
    }
  ],
  "security": [
    {
      "OAuth2": []
    }
  ],
  "paths": {
    "/air/catalog/search/catalogproductofferings": {
      "get": {
        "tags": [
          "Search Air"
        ],
        "summary": "Return additional search results (pagination)",
        "description": "The optional pagination feature is supported for Search and Next Leg Search. Pagination allows you to control the number of offers returned in the initial response, which can affect response time. To request pagination, send offersPerPage in the initial Search request payload. All offers are cached on the server, but only the number sent in offersPerPage is returned in the initial response. For example, if offersPerPage is set to 5, only the first 5 offers are returned in the initial response. (An offer is a set of products that are each available at the same unique price point and same terms and conditions.) To retrieve the second and subsequent pages of search results, send the POST request above to the endpoint used for the initial Search or Next Leg Search request with the transaction identifier from that response.",
        "operationId": "GetPageAirSearch",
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "The Identifier of the Offerings from which a page is to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            },
            "example": "A0656EFF-FAF4-456F-B061-0161008D7C4E"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "2"
          },
          {
            "name": "view",
            "in": "query",
            "description": "The view.  Either detail or summary.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "detail"
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogProductOfferingsResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Search Air"
        ],
        "summary": "Initial flight search",
        "description": "The Search API is the first step in the travel booking workflow. Send a Search request to return offers for flights between the selected cities",
        "operationId": "CreateAirSearch",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogProductOfferingsQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogProductOfferingsResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/catalog/search/catalogproductofferings/buildnext": {
      "post": {
        "tags": [
          "Search Air"
        ],
        "summary": "Search for flights on next leg",
        "description": "Use the Next Leg Search API to return offers for the remaining leg/s of an itinerary after a leg-based Search. A leg-based Search response returns offers for only the outbound leg of your itinerary, and you must send Next Leg Search to return offers for the remaining leg or legs of the trip. If pagination was requested in the initial Search request it is applied to the Next Leg Search response as well.",
        "operationId": "BuildNextAirSearch",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogProductOfferingsQueryBuildNext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogProductOfferingsResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/catalog/search/catalogproductofferings/buildoptions": {
      "post": {
        "tags": [
          "Search Air"
        ],
        "summary": "Return all upsells on a specific flight",
        "description": "Use the Flight Specific Search API reference payload request to return additional upsells (you can set up to 99) for any product or products returned by a Search or Next Leg Search. The reference payload sends an identifier referencing a previous response. Supported for GDS only. Not supported for NDC.",
        "operationId": "BuildOptionsAirSearch",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogProductOfferingsQueryBuildOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogProductOfferingsResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/exchangesearch/catalogofferingsairchange": {
      "post": {
        "tags": [
          "Search Exchange"
        ],
        "summary": "Search for flights to exchange",
        "description": "The Exchange Search API is the second step in the GDS exchange workflow, after Eligibility. It supports searching for an alternate itinerary for a possible exchange on a currently ticketed GDS itinerary. The response details any differences in base fare, taxes, fees, and total price between the currently ticketed itinerary and the possible new itinerary.",
        "operationId": "CreateExchangeSearch",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQueryAirChange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsAirChangeResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/change/catalogofferingsairchange": {
      "post": {
        "tags": [
          "Search Exchange"
        ],
        "summary": "Search for NDC flights to exchange",
        "description": "The Exchange Search API is the second step in the NDC exchange workflow, after retrieving the Reservation that is to be changed.",
        "operationId": "CreateNDCExchangeSearch",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQueryAirChange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsAirChangeResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/pricequote/catalogofferingsairchange/productspecificsearch": {
      "post": {
        "tags": [
          "Search Exchange"
        ],
        "summary": "Search for flights to exchange using specific flight criteria (GDS)",
        "description": "The Product Specific Search function of the Exchange Search API is the second step in the GDS exchange workflow, after Eligibility. It supports searching for a specified itinerary and in addition can provide alternate options. The response details any differences in base fare, taxes, fees, and total price between the currently ticketed itinerary and the possible new itinerary.",
        "operationId": "ProductSpecificSearch",
        "parameters": [
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQueryProductSpecificSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsAirChangeResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/exchangesearch/catalogofferingsairchange/{identifier}": {
      "get": {
        "tags": [
          "Search Exchange"
        ],
        "summary": "Pagination. Get additional Pages",
        "operationId": "GetAirChangePage",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The Identifier of the CatalogOfferings from which a page is to be returned",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsAirChangeResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ancillaryshop/catalogofferingsancillaries": {
      "post": {
        "tags": [
          "Search Ancillaries"
        ],
        "summary": "Search for ancillaries",
        "description": "The Ancillary Shop request searches for ancillaries available for the Reservation. You must first create a new or post-commit workbench. After ancillary shop, send an ancillary price request (only for NDC), and then add the selected ancillary to the workbench.",
        "operationId": "CreateAncillarySearch",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQueryAncillaries"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsAncillaryListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/search/seat/catalogofferingsancillaries/seatavailabilities": {
      "post": {
        "tags": [
          "Search Seat Availabilities"
        ],
        "summary": "Request seat map",
        "description": "The Seat Map request returns seat availability for free and paid seats. You can request seat availability at any of the following points in the booking workflow; use the endpoint above for all requests. (a) After an AirPrice request and before a booking session-Send the payload below with identifiers from an AirPrice response. (b) In a workbench session for a new or existing booking-Send the payload below with identifiers from a Search response.",
        "operationId": "CreateSeatAvailability",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogOfferingsQuerySeatAvailability"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogOfferingsAncillaryListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/eligibility/ticketchangeeligibilities": {
      "get": {
        "tags": [
          "Search Exchange Eligibility"
        ],
        "summary": "Verify exchange eligibility",
        "description": "The Eligibility API is the first step in the GDS exchange workflow. Eligibility returns information about whether a ticket may have value in an exchange or refund scenario, and the range of potential exchange and refund fees. This information relates only to fees and not any fare or tax difference for the itinerary.",
        "operationId": "GetEligibility",
        "parameters": [
          {
            "name": "Locator",
            "in": "query",
            "description": "The identifier used to retrieve a Reservation from an internal or external source",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            },
            "example": "ABC123"
          },
          {
            "name": "authority",
            "in": "query",
            "description": "Name of the authoritative system that created this guid",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            },
            "example": "Travelport"
          },
          {
            "name": "Ticket",
            "in": "query",
            "description": "The identifier used to retrieve a Ticket from an internal or external source",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            },
            "example": "1259900123456"
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketChangeEligibilityListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/price/offers/buildfromcatalogproductofferings": {
      "post": {
        "tags": [
          "Price Air"
        ],
        "summary": "Price request with reference payload",
        "description": "The AirPrice API confirms pricing on air search results. While air pricing is generally an optional but recommended step, it is required for low cost carriers and some NDC carriers.",
        "operationId": "OfferBuildFromCatalogProductOfferings",
        "parameters": [
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogProductOfferings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/price/offers/buildfromproducts": {
      "post": {
        "tags": [
          "Price Air"
        ],
        "summary": "Price request with full payload",
        "description": "The AirPrice API confirms pricing on air search results. While air pricing is generally an optional but recommended step, it is required for low cost carriers and some NDC carriers.",
        "operationId": "OfferBuildFromProducts",
        "parameters": [
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/price/offers/buildfromcatalogofferings": {
      "post": {
        "tags": [
          "Price Air"
        ],
        "summary": "Price by reference to a low fare search response",
        "operationId": "OfferBuildFromCatalogOfferings",
        "parameters": [
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ancillaryprice/offers/buildancillaryoffersfromcatalogofferings": {
      "post": {
        "tags": [
          "Price Ancillaries"
        ],
        "summary": "Confirm ancillary pricing (NDC only)",
        "description": "The Ancillary Price request confirms pricing request searches for a selected ancillary. You must first create a new or post-commit workbench and send an Ancillary Shop request. After pricing, add the selected ancillary to the workbench.",
        "operationId": "BuildAncillaryOffersFromCatalogOfferings",
        "parameters": [
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildAncillaryOffersFromCatalogOfferings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/brandfullinfo/brands/buildcompleteinfofromoffer": {
      "post": {
        "tags": [
          "Brand"
        ],
        "summary": "Do not implement - Deprecated service",
        "description": "This function is being retired and will no longer be supported from 28th February 2024. The end point will be removed from the 11.15.0 version of this OpenAPI specification.",
        "operationId": "CreateBrand",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandQueryBuildCompleteInfoFromOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      }
    },
    "/air/farerule/farerules/fromreservationworkbench": {
      "get": {
        "tags": [
          "Fare Rules"
        ],
        "summary": "Return standalone fare rules with reference to a Reservation workbench",
        "description": "Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.",
        "operationId": "GetRulesFromReservationWorkbench",
        "parameters": [
          {
            "name": "reservationIdentifier",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "offerIDs",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "productIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "flightIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleCategories",
            "in": "query",
            "description": "Space separated list of fare rule categories required",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 32,
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleType",
            "in": "query",
            "description": "The type of fare rule structure required",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FareRuleListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/farerule/farerules/fromreservation": {
      "get": {
        "tags": [
          "Fare Rules"
        ],
        "summary": "Return standalone fare rules with reference to a Reservation",
        "description": "Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.",
        "operationId": "GetRulesFromReservation",
        "parameters": [
          {
            "name": "reservationIdentifier",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "offerIDs",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "productIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "flightIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleCategories",
            "in": "query",
            "description": "Space separated list of fare rule categories required",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 32,
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleType",
            "in": "query",
            "description": "The type of fare rule structure required",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FareRuleListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/farerule/farerules/fromoffer": {
      "get": {
        "tags": [
          "Fare Rules"
        ],
        "summary": "Return standalone fare rules with reference to an Offer",
        "description": "Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.",
        "operationId": "GetRulesFromOffer",
        "parameters": [
          {
            "name": "offerIdentifier",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "productIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "flightIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleCategories",
            "in": "query",
            "description": "Space separated list of fare rule categories required",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 32,
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleType",
            "in": "query",
            "description": "The type of fare rule structure required",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FareRuleListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/farerule/farerules/fromcatalogproductofferings": {
      "get": {
        "tags": [
          "Fare Rules"
        ],
        "summary": "Return standalone fare rules with reference to CatalogProductOfferings",
        "description": "Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.",
        "operationId": "GetRulesFromCatalogProductOfferings",
        "parameters": [
          {
            "name": "catalogProductOfferingsIdentifier",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "catalogProductOfferingID",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productBrandOfferingIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "productIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "flightIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleCategories",
            "in": "query",
            "description": "Space separated list of fare rule categories required",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 32,
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleType",
            "in": "query",
            "description": "The type of fare rule structure required",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FareRuleListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/farerule/farerules/fromcatalogofferings": {
      "get": {
        "tags": [
          "Fare Rules"
        ],
        "summary": "Return standalone fare rules with reference to CatalogOfferings",
        "description": "Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.",
        "operationId": "GetRulesFromCatalogOfferings",
        "parameters": [
          {
            "name": "catalogOfferingsIdentifier",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "catalogOfferingID",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "flightIDs",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleCategories",
            "in": "query",
            "description": "Penalties MinimumStay",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 32,
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleType",
            "in": "query",
            "description": "The type of fare rule structure required",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FareRuleListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/farerule/farerules/fromfaredisplay": {
      "get": {
        "tags": [
          "Fare Rules"
        ],
        "summary": "FareRuleResource - GetFromFareDisplay",
        "description": "Fare rules are the conditions and restrictions that apply to any booking based on its fare type. These determine the price of the fare. Generally, less expensive fares have more restrictions and more expensive fares have fewer restrictions. Fare rules can include blackout dates, advanced reservation requirements, minimum and maximum stay requirements, and cancellation and change penalties.",
        "operationId": "GetFromFareDisplay",
        "parameters": [
          {
            "name": "fareRuleIdentifier",
            "in": "query",
            "description": "The Identifier from the FareDisplayResponse",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fareID",
            "in": "query",
            "description": "The unique fare id from the FareDisplayResponse",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fareRuleType",
            "in": "query",
            "description": "fare rule type, structured or text",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "example": "Structured"
          },
          {
            "name": "fareRuleCategories",
            "in": "query",
            "description": "List of fare rule categories to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 32,
                "type": "string",
                "example": "Penalties, Minimum Stay"
              }
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FareRuleListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations/{Identifier}": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Retrieve a Reservation",
        "description": "Retrieve details about a held booking, or PNR. While a PNR refers to a held booking that has not been ticketed, the PNR code persists after ticketing to provide the booking records. Once a PNR has been ticketed, you can still use PNR Retrieve to return both booking and ticketing details. A Ticket Display request can also be used to retrieve any ticketed itinerary.",
        "operationId": "RetrieveReservation",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "authority",
            "in": "query",
            "description": "The authorising entity creating the identifier",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, ReservationDetail will be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBrandCompleteInfoInd",
            "in": "query",
            "description": "If true, Brand complete information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBaggageDetailInd",
            "in": "query",
            "description": "if true, full baggage information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "identifierType",
            "in": "query",
            "description": "The type of identifier key used to retrieve the reservation",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/IdentifierTypeENUM"
            },
            "example": "Locator"
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "When document is selected in IdentifierType, use documentType to identify the type of document",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/DocumentTypeEnum"
            },
            "example": "Ticket"
          },
          {
            "name": "viewShoppingCartProductsInd",
            "in": "query",
            "description": "If true, Unfinished Offers will be returned as ShoppingCartProducts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeFlightAmenitiesInd",
            "in": "query",
            "description": "If true, flight amenities will be included in the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "retrieveNonGDSSourceReservationInd",
            "in": "query",
            "description": "if true, reservation information will be retrieved directly from the source supplier",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Reservation"
        ],
        "summary": "Update a reservation",
        "operationId": "UpdateReservation",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReservationID"
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Commit workbench",
        "description": "After all required and any optional steps in a booking workbench session, send a POST request with the workbench identifier to commit the workbench. The resulting actions depend on whether payment is present in the workbench. If no Add Payment request has been sent, committing the workbench books the itinerary and generates a PNR. If an Add Payment request has not been sent, committing the workbench tickets the itinerary and generates ticket number/s.",
        "operationId": "CommitReservation",
        "parameters": [
          {
            "name": "autoDeleteDate",
            "in": "query",
            "description": "Acts as a retention segment to hold the reservation open past the last date of travel purge date. Sending a new autoDeleteDate at commit step will update the existing autoDeleteDate. Sending 000/00/00 will delete an existing autoDeleteDate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "Issuance",
            "in": "query",
            "description": "Indicates the type of issuance that should be performed at commit. (Ticket, BackOffice (MIR\\/TAIR))",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Ticket",
                "BackOffice",
                "All",
                "Invoice"
              ]
            }
          },
          {
            "name": "DocumentValue",
            "in": "query",
            "description": "Indicates of the value of the document should be refunded or retained following a CancelOffer action",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Retain",
                "Refund",
                "Forfeit",
                "Void"
              ]
            }
          },
          {
            "name": "payLaterInd",
            "in": "query",
            "description": "If true, the Reservation will be fulfilled at a later date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQueryCommitReservation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/modify/reservations/{Identifier}": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "NDC Commit exchange offer",
        "description": "After all required changes any optional steps in a booking workbench session, send a POST request with the workbench identifier to commit the order changes in the workbench.",
        "operationId": "NDCModifyReservation",
        "parameters": [
          {
            "name": "autoDeleteDate",
            "in": "query",
            "description": "Acts as a retention segment to hold the reservation open past the last date of travel purge date. Sending a new autoDeleteDate at commit step will update the existing autoDeleteDate. Sending 000/00/00 will delete an existing autoDeleteDate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "Issuance",
            "in": "query",
            "description": "Indicates the type of issuance that should be performed at commit. (Ticket, BackOffice (MIR\\/TAIR))",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Ticket",
                "BackOffice",
                "All",
                "Invoice"
              ]
            }
          },
          {
            "name": "DocumentValue",
            "in": "query",
            "description": "Indicates of the value of the document should be refunded or retained following a CancelOffer action",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Retain",
                "Refund",
                "Forfeit",
                "Void"
              ]
            }
          },
          {
            "name": "payLaterInd",
            "in": "query",
            "description": "If true, the Reservation will be fulfilled at a later date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQueryCommitReservation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations/{reservationIdentifier}/canceloffer": {
      "put": {
        "tags": [
          "Reservation"
        ],
        "summary": "Cancel an Offer within a Reservation",
        "description": "Cancel an Offer by modifying the Reservation",
        "operationId": "CancelReservationOffer",
        "parameters": [
          {
            "name": "reservationIdentifier",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "supplierLocator",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "offerID",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations/divide": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Divide a reservation",
        "operationId": "Divide",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQueryDivide"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations/build": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Single payload booking request",
        "description": "As an alternative to the booking workflow that takes place in a workbench session, you can send all booking details and commit a single payload to create a booking. The single payload book request does not support any of the optional steps in the booking workflow, such as adding seats or ancillaries.",
        "operationId": "BuildReservation",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQueryBuildWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations/find": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Find a reservation",
        "operationId": "FindReservation",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQuerySearchCriteriaReservation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations/getbylocator": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Retrieve a reservation by locator",
        "description": "To be deprecated and replaced by Get by Identifier using identifier Type \"Locator\"",
        "operationId": "GetReservationByLocator",
        "parameters": [
          {
            "name": "Locator",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16,
              "pattern": "([A-Z0-9]+)?",
              "type": "string"
            }
          },
          {
            "name": "creationDate",
            "in": "query",
            "description": "PNR creation Date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, ReservationDetail will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBrandCompleteInfoInd",
            "in": "query",
            "description": "If true, Brand complete information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBaggageDetailInd",
            "in": "query",
            "description": "if true, full baggage information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeFlightAmenitiesInd",
            "in": "query",
            "description": "If true, flight amenities will be included in the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "retrieveNonGDSSourceReservationInd",
            "in": "query",
            "description": "if true, reservation information will be retrieved directly from the source supplier",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservation/reservations": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Create a reservation",
        "description": "Create a reservation on the core or with the vendor/provider.",
        "operationId": "CreateReservation",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReservationID"
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/receipt/reservations/{ReservationResource_Identifier}/receipts": {
      "get": {
        "tags": [
          "Reservation Receipt"
        ],
        "summary": "ReceiptResource - Get",
        "description": "Get a list of ticket receipts for a reservation.",
        "operationId": "GetReceipts",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "ReceiptType",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Cancellation",
                "Payment",
                "ConfirmationHold",
                "ConfirmationTicket",
                "ConfirmationVehicle"
              ]
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Reservation Receipt"
        ],
        "summary": "ReceiptResource - CancelReservation",
        "description": "Create a set of offer cancelation receipts for every offer in the reservation.",
        "operationId": "CancelReservation",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "OfferIdentifier",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "agencySettlementNotReportedInd",
            "in": "query",
            "description": "If true, this refund is settled by the agency directly with the traveler. Transaction is not reported to BSP or ARC. Ticket coupon is updated to RFND status",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/receipt/reservations/{ReservationResource_Identifier}/receipts/buildfromlocator": {
      "post": {
        "tags": [
          "Reservation Receipt"
        ],
        "summary": "ReceiptResource - BuildFromLocator",
        "description": "Process all unprocessesed offers and create ticket receipts.",
        "operationId": "BuildReceiptsFromLocator",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "The view. Either detail or summary",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "ReservationLocator",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16,
              "pattern": "([A-Z0-9]+)?",
              "type": "string"
            }
          },
          {
            "name": "Issuance",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "Ticket",
                "BackOffice",
                "All",
                "Invoice"
              ]
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/receipt/reservations/{ReservationResource_Identifier}/receipts/buildfrompayment": {
      "post": {
        "tags": [
          "Reservation Receipt"
        ],
        "summary": "ReceiptResource - BuildFromPayment",
        "description": "Process all un-processesed payments and create a list of payment receipts.",
        "operationId": "BuildReceiptsFromPayment",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptQueryBuildFromPayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/session/reservationworkbench/buildfromlocator": {
      "post": {
        "tags": [
          "Workbench Management"
        ],
        "summary": "Create a workbench for existing booking",
        "description": "Initiate a post-commit workbench to create a session for ticketing or updating an existing reservation. This is a prerequisite step for any transaction that modifies, updates, or tickets any PNR.",
        "operationId": "CreateReservationWorkbenchFromLocator",
        "parameters": [
          {
            "name": "Locator",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16,
              "pattern": "([A-Z0-9]+)?",
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Specifies a unique identifier to indicate the source system which generated the resId.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, ReservationDetail will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBrandCompleteInfoInd",
            "in": "query",
            "description": "If true, Brand complete information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBaggageDetailInd",
            "in": "query",
            "description": "if true, full baggage information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/session/reservationworkbench/{Identifier}": {
      "get": {
        "tags": [
          "Workbench Management"
        ],
        "summary": "Retrieve workbench details",
        "description": "At any point in the booking session, you can retrieve the workbench. The response returns all details added to the workbench at that point.",
        "operationId": "RetrieveReservationWorkbench",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, ReservationDetail will be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBrandCompleteInfoInd",
            "in": "query",
            "description": "If true, Brand complete information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBaggageDetailInd",
            "in": "query",
            "description": "if true, full baggage information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Workbench Management"
        ],
        "summary": "Discard workbench",
        "description": "At any point in a booking or ticketing workflow, if necessary, you can discard the workbench and any information in it.",
        "operationId": "IgnoreReservationWorkbench",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/session/reservationworkbench": {
      "post": {
        "tags": [
          "Workbench Management"
        ],
        "summary": "Create a workbench for new booking",
        "description": "Use this request to initiate a workbench for a new reservation. This prerequisite step for booking creates the workbench session in which all booking details are added together to create a PNR at commit.",
        "operationId": "CreateReservationWorkbench",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/session/reservationworkbench/buildfromidentifier/{Identifier}": {
      "post": {
        "tags": [
          "Workbench Management"
        ],
        "summary": "Create a workbench for existing booking",
        "description": "Initiate a post-commit workbench to create a session for ticketing or updating an existing reservation. This is a prerequisite step for any transaction that modifies, updates, or tickets any PNR.",
        "operationId": "CreateReservationWorkbenchFromIdentifier",
        "parameters": [
          {
            "name": "detailViewInd",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Identifier",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "viewBrandCompleteInfoInd",
            "in": "query",
            "description": "If true, Brand complete information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "viewBaggageDetailInd",
            "in": "query",
            "description": "if true, full baggage information will be returned in Reservation Response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "identifierType",
            "in": "query",
            "description": "The type of identifier key used to retrieve the reservation",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/IdentifierTypeENUM"
            },
            "example": "Locator"
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "When document is selected in IdentifierType, use documentType to identify the type of document",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/DocumentTypeEnum"
            },
            "example": "Ticket"
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/profile/reservationworkbench/{identifier}/clientprofile": {
      "put": {
        "tags": [
          "Workbench - Client Profile"
        ],
        "summary": "Move a client profile into the reservation workbench",
        "description": "Functionality to move client profile information into the Reservation workbench. Release",
        "operationId": "ClientProfileMove",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "After a reservation workbench has been created you can move an existing client profile along with traveler profile information into the workbench.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationQueryClientProfileMove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content - Success."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromshoppingcartproducts": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Create offer from unpriced products in the shopping cart",
        "operationId": "BuildFromShoppingCartProducts",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromShoppingCartProducts"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromcatalogproductofferings": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Add offer to booking - reference payload.",
        "description": "Use the Add Offer reference payload request to add an offer to the reservation workbench as part of the booking workflow. The reference payload request sends identifiers from the Search response instead of full itinerary details. NDC supports only the reference payload. For GDS, you can send either a reference payload or a full payload.",
        "operationId": "WorkbenchBuildFromCatalogProductOfferings",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogProductOfferings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromoffer": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Reprice and existing offer in the workbench",
        "operationId": "BuildFromOffer",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromOffer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromoffers": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Reprice existing offers in the workbench",
        "operationId": "BuildFromOffers",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromOffers"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromofferlist": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Add an offer with reference to a Price response",
        "operationId": "BuildFromOfferList",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildfromOfferList"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/canceloffer": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Create a cancel offer quote",
        "operationId": "CancelWorkbenchOffer",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryCancelOffer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildancillaryoffersfromcatalogofferings": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Add ancillary offer (ancillary book)",
        "description": "The Ancillary Book request adds a selected ancillary or a paid seat to the new or post-commit workbench. For ancillaries, first send an Ancillary Shop request and an Ancillary Price request (NDC only). After adding an ancillary to the workbench, you must also issue an EMD for the selected ancillary per the Ancillary and EMD Guide. For paid seats, you must first create a workbench and send a Seat Map request.",
        "operationId": "WorkbenchBuildAncillaryOffersFromCatalogOfferings",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildAncillaryOffersFromCatalogOfferings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromproducts": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Add offer to booking - full payload",
        "description": "Use the Add Offer full payload request to add an offer to the reservation workbench as part of the booking workflow. The full payload request sends full itinerary details instead of identifiers from the Search response as in the reference payload request. Full payload is not supported for NDC; use the reference payload instead. For GDS, you can send either a reference payload or a full payload.",
        "operationId": "WorkbenchBuildFromProducts",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromProducts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromcatalogofferings": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Add offer to booking - reference payload.",
        "description": "Use the Add Offer reference payload request to add an offer to the reservation workbench as part of the booking workflow. The reference payload request sends identifiers from the Search response instead of full itinerary details. NDC supports only the reference payload. For GDS, you can send either a reference payload or a full payload.",
        "operationId": "WorkbenchBuildFromCatalogOfferings",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/reprice/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromcatalogofferings": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "NDC exchange offer workflow - reference payload.",
        "description": "Use the Add Offer reference payload request to add an offer to the reservation workbench as part of the booking workflow. The reference payload request sends identifiers from the Search response instead of full itinerary details. NDC supports only the reference payload. For GDS, you can send either a reference payload or a full payload.",
        "operationId": "WorkbenchNDCBuildFromCatalogOfferings",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Create refund or passive offer",
        "operationId": "DeprecatedCreateManualOffer",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "offerTypeENUM",
            "in": "query",
            "description": "Specifies the type of Offer that is being created",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OfferTypeENUM"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Offer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      }
    },
    "/air/book/airoffer/reservationworkbench/{ReservationResource_Identifier}/offers/create": {
      "post": {
        "tags": [
          "Workbench – Manage Offers"
        ],
        "summary": "Create refund or passive offer",
        "operationId": "CreateManualOffer",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "offerTypeENUM",
            "in": "query",
            "description": "Specifies the type of Offer that is being created",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OfferTypeENUM"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Offer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/offer/reservationworkbench/{ReservationResource_Identifier}/offers/buildfromcatalogofferings": {
      "post": {
        "tags": [
          "Workbench – Exchange Offers"
        ],
        "summary": "Add offer to booking - reference payload.",
        "description": "Use the Add Offer reference payload request to add an offer to the reservation workbench as part of the booking workflow. The reference payload request sends identifiers from the Exchage Search response instead of full itinerary details.",
        "operationId": "TripChangeBuildFromCatalogOfferings",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferQueryBuildFromCatalogOfferings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/offer/reservationworkbench/{ReservationResource_Identifier}/offers": {
      "post": {
        "tags": [
          "Workbench – Exchange Offers"
        ],
        "summary": "Create agency calculated exchange",
        "operationId": "CreateAgencyCalculatedExchange",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "offerTypeENUM",
            "in": "query",
            "description": "Specifies the type of Offer that is being created",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OfferTypeENUM"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Offer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/updateableitem/reservationworkbench/{ReservationResource_Identifier}/travelerupdatableitems/buildfromtraveler": {
      "post": {
        "tags": [
          "Workbench - Traveler Updatable Items"
        ],
        "summary": "Retrieve updatable items by traveler",
        "description": "The Updatable Items request retrieves by traveler ID a list of objects that are updatable for that traveler, and returns for each an indicator for whether that item can be added, modified, or deleted.",
        "operationId": "BuildFromTraveler",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelerUpdatableItemsQueryBuildFromTraveler"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerUpdatableItemsListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/documentoverride/Reservation/{ReservationResource_Identifier}/documentoverrides": {
      "post": {
        "tags": [
          "Workbench - Manage Document Overrides"
        ],
        "summary": "Add document override remark",
        "description": "Use document override to send remarks such as tour code, commission, or endorsements/restrictions.Document override remarks are returned in the PNR retrieve only when the detailViewInd query parameter is set to true. Document override remarks can be added to an existing PNR but cannot be modified or deleted; see PNR Modify Guide.",
        "operationId": "CreateDocumentOverrides",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentOverrides"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentOverridesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/documentoverride/Reservation/{ReservationResource_Identifier}/documentoverrides/{id}": {
      "put": {
        "tags": [
          "Workbench - Manage Document Overrides"
        ],
        "summary": "Update document overrides",
        "operationId": "UpdateDocumentOverrides",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The reporting number.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentOverrides"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentOverridesResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Workbench - Manage Document Overrides"
        ],
        "summary": "Delete document overrides",
        "operationId": "DeleteDocumentOverrides",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The reporting number.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/accounting/reservationworkbench/{ReservationResource_Identifier}/accountings": {
      "put": {
        "tags": [
          "Workbench - Manage Accounting Remarks"
        ],
        "summary": "Update accounting remarks",
        "operationId": "UpdateAccounting",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Accounting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Workbench - Manage Accounting Remarks"
        ],
        "summary": "Add accounting remarks",
        "description": "Accounting remarks are optional remarks that are added to the PNR and typically used by an agency's back office system in some way. The remarks can include ticket numbers, customer or account numbers, fares offered to the customer but refused, and canned remarks that document fare rules. Accounting remarks replace the back office accounting remarks in AirReservation prior to version 11.",
        "operationId": "CreateAccounting",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Accounting"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/accounting/reservationworkbench/{ReservationResource_Identifier}/accountings/{id}/namevaluepairs": {
      "delete": {
        "tags": [
          "Workbench - Manage Accounting Remarks"
        ],
        "summary": "Delete accounting remarks",
        "operationId": "DeleteAccounting",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Accounting item id to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NameValuePairIds",
            "in": "query",
            "description": "Comma separated list of nameValuePair IDs",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 512,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/payment/reservationworkbench/{ReservationResource_Identifier}/formofpayment": {
      "post": {
        "tags": [
          "Workbench - Manage Form Of Payment"
        ],
        "summary": "Add form of payment",
        "description": "You can send an Add Form of Payment (FOP) request in either a booking or ticketing workbench session. FOPs of cash and credit are supported. FOPs of agent invoice and non-standard credit card are supported for GDS only.",
        "operationId": "AddFormOfPayment",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "authorizePaymentInd",
            "in": "query",
            "description": "If true payment card approval will be obtained.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormOfPaymentID"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormOfPaymentResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/paymentoffer/reservationworkbench/{ReservationResource_Identifier}/payments": {
      "post": {
        "tags": [
          "Workbench - Manage Payment"
        ],
        "summary": "Add payment",
        "description": "The Add Payment step takes place in a ticketing workbench session and sends the payment. It references both the form of payment to be used for the payment and the offer to pay for.",
        "operationId": "AddPayment",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/paymentoffer/reservationworkbench/{ReservationResource_Identifier}/payments/{id}": {
      "post": {
        "tags": [
          "Workbench - Manage Payment"
        ],
        "summary": "Cancel a payment and void documents - NDC only",
        "operationId": "CancelPayment",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/remarks/reservationworkbench/{ReservationResource_Identifier}/reservationcomments/list": {
      "post": {
        "tags": [
          "Workbench - Manage Reservation Comments"
        ],
        "summary": "Add Reservation Comments",
        "operationId": "AddReservationComments",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationCommentListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationCommentListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/remarks/reservationworkbench/{ReservationResource_Identifier}/reservationcomments": {
      "put": {
        "tags": [
          "Workbench - Manage Reservation Comments"
        ],
        "summary": "Update Reservation Comments",
        "operationId": "UpdateReservationComments",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "description": "Textual information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationCommentResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/remarks/reservationworkbench/{ReservationResource_Identifier}/reservationcomments/{id}/comments": {
      "delete": {
        "tags": [
          "Workbench - Manage Reservation Comments"
        ],
        "summary": "Delete Reservation Comments",
        "operationId": "DeleteReservationComments",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Reservation Comment ID to be deleted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CommentIds",
            "in": "query",
            "description": "Comma separated list of comments IDs",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 512,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/specialservices/reservationworkbench/{ReservationResource_Identifier}/specialservices/list": {
      "post": {
        "tags": [
          "Workbench - Manage Special Services"
        ],
        "summary": "Add special services",
        "operationId": "AddSpecialServices",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpecialServiceListRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecialServiceListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/specialservices/reservationworkbench/{ReservationResource_Identifier}/specialservices": {
      "put": {
        "tags": [
          "Workbench - Manage Special Services"
        ],
        "summary": "Update special service",
        "operationId": "UpdateSpecialServices",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpecialService"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecialServiceResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/specialservices/reservationworkbench/{ReservationResource_Identifier}/specialservices/{id}": {
      "delete": {
        "tags": [
          "Workbench - Manage Special Services"
        ],
        "summary": "Delete a special service",
        "operationId": "DeleteSpecialServices",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Internal Id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/traveler/reservationworkbench/{ReservationResource_Identifier}/travelers/{id}": {
      "get": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "Retrieve Traveler",
        "operationId": "GetTraveler",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "Update traveler",
        "operationId": "UpdateTraveler",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Traveler"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "Delete traveler",
        "operationId": "DeleteTraveler",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/traveler/reservationworkbench/{ReservationResource_Identifier}/travelers/list": {
      "post": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "Add multiple travelers",
        "operationId": "AddTravelers",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelerListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/traveler/reservationworkbench/{ReservationResource_Identifier}/travelers/updatefromtravelerupdateditems/{id}": {
      "put": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "Modify traveler information after Updatable Items",
        "description": "The Traveler Update request follows an Updatable Items request and makes a change to one or more items returned in that Updatable Items response. Sent as part of a workbench session, either during the initial booking workflow (workbench not committed, PNR not issued yet) or a post-commit workbench for an existing PNR. It is followed by a workbench commit.",
        "operationId": "UpdateFromTravelerUpdatedItems",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelerQueryUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/traveler/reservationworkbench/{ReservationResource_Identifier}/travelers": {
      "get": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "retrieve multiple travelers",
        "operationId": "GetTravelers",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerListResponseWrapper"
                }
              }
            }
          },
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Workbench - Manage Travelers"
        ],
        "summary": "Add traveler and traveler remarks to booking",
        "description": "Send the Add Traveler request to add a traveler to the reservation workbench. You must add each traveler to the workbench in a separate POST request. Traveler information can include traveler name and contact details, add traveler-specific remarks including certain SSRs and travel documents such as a passport.",
        "operationId": "AddTraveler",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Traveler"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelerResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/primarycontact/reservationworkbench/{ReservationResource_Identifier}/primarycontacts": {
      "put": {
        "tags": [
          "Workbench - Manage Primary Contact"
        ],
        "summary": "Update primary contact",
        "operationId": "UpdatePrimaryContact",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrimaryContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimaryContactResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Workbench - Manage Primary Contact"
        ],
        "summary": "Add a primary contact",
        "operationId": "AddPrimaryContact",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrimaryContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimaryContactResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/primarycontact/reservationworkbench/{ReservationResource_Identifier}/primarycontacts/{id}": {
      "delete": {
        "tags": [
          "Workbench - Manage Primary Contact"
        ],
        "summary": "Delete a primary contact",
        "operationId": "DeletePrimaryContact",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/primarycontact/reservationworkbench/{ReservationResource_Identifier}/primarycontacts/list": {
      "post": {
        "tags": [
          "Workbench - Manage Primary Contact"
        ],
        "summary": "Add multiple primary contacts",
        "operationId": "AddPrimaryContacts",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrimaryContactListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "201: Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimaryContactListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/products/reservationworkbench/{ReservationResource_Identifier}/shoppingcart/products/buildfromcatalogproductofferings": {
      "post": {
        "tags": [
          "Workbench - Manage Products"
        ],
        "summary": "Add unpriced products to the workbench by reference to an availability",
        "operationId": "ProductBuildFromCatalogProductOfferings",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductQueryBuildFromCatalogProductOfferings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/products/reservationworkbench/{ReservationResource_Identifier}/shoppingcart/products/buildfromproducts": {
      "post": {
        "tags": [
          "Workbench - Manage Products"
        ],
        "summary": "Add unpriced products to the workbench using full payload",
        "operationId": "ProductBuildFromProducts",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductQueryBuildFromProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservationworkbench/{ReservationResource_Identifier}/OrganizationLoyaltyPrograms/{id}": {
      "delete": {
        "tags": [
          "Workbench – Manage Organization Loyalty Program"
        ],
        "summary": "Delete an Organization Loyalty Program",
        "operationId": "DeleteOrganizationLoyaltyProgram",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservationworkbench/{ReservationResource_Identifier}/organizationloyaltyprograms/list": {
      "post": {
        "tags": [
          "Workbench – Manage Organization Loyalty Program"
        ],
        "summary": "Add multiple Organization Loyalty Program",
        "operationId": "AddOrganizationLoyaltyPrograms",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationLoyaltyProgramListRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationLoyaltyProgramListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservationworkbench/{ReservationResource_Identifier}/organizationloyaltyprograms": {
      "post": {
        "tags": [
          "Workbench – Manage Organization Loyalty Program"
        ],
        "summary": "Add an Organization Loyalty Program",
        "operationId": "AddOrganizationLoyaltyProgram",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationLoyaltyProgram"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationLoyaltyProgramResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservationworkbench/{ReservationResource_Identifier}/agencyservicefees": {
      "post": {
        "tags": [
          "Workbench – Manage Agency Service Fees"
        ],
        "summary": "Add Agency ServiceFee",
        "operationId": "AddAgencyServiceFee",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyServiceFeeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgencyServiceFeeResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/reservationworkbench/{ReservationResource_Identifier}/agencyservicefees/{id}": {
      "delete": {
        "tags": [
          "Workbench – Manage Agency Service Fees"
        ],
        "summary": "AgencyServiceFee - Delete",
        "operationId": "DeleteAgencyServiceFee",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique id for this object within a message",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency": {
      "post": {
        "tags": [
          "Workbench – Manage Travel Agency"
        ],
        "summary": "Add Agency Details",
        "operationId": "AddAgencyDetails",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "E2ETrackingID",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/addaddress": {
      "post": {
        "tags": [
          "Workbench – Manage Travel Agency Address"
        ],
        "summary": "Add Agency Address",
        "operationId": "AddAgencyAddress",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyAddressWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/updateaddress": {
      "put": {
        "tags": [
          "Workbench – Manage Travel Agency Address"
        ],
        "summary": "Update Agency Address",
        "operationId": "UpdateAgencyAddress",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyAddressWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/deleteaddress/{addressid}": {
      "delete": {
        "tags": [
          "Workbench – Manage Travel Agency Address"
        ],
        "summary": "Delete Agency Address",
        "operationId": "DeleteAgencyAddress",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          },
          {
            "name": "addressid",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content - Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/addcorporatecode": {
      "post": {
        "tags": [
          "Workbench – Manage Travel Agency Corporate Code"
        ],
        "summary": "Add Corporate Code",
        "operationId": "AddCorporateCode",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyCorporateCodeWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/updatecorporatecode": {
      "put": {
        "tags": [
          "Workbench – Manage Travel Agency Corporate Code"
        ],
        "summary": "Update Corporate Code",
        "operationId": "UpdateCorporateCode",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyCorporateCodeWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/deletecorporatecode": {
      "delete": {
        "tags": [
          "Workbench – Manage Travel Agency Corporate Code"
        ],
        "summary": "Delete Corporate Code",
        "operationId": "DeleteCorporateCode",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content - Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/addemail": {
      "post": {
        "tags": [
          "Workbench – Manage Travel Agency Email"
        ],
        "summary": "Add Agency Email",
        "operationId": "AddAgencyEmail",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "E2ETrackingID",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyEmailWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "deprecated": true
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/updateemail": {
      "put": {
        "tags": [
          "Workbench – Manage Travel Agency Email"
        ],
        "summary": "Update Agency Address",
        "operationId": "UpdateAgencyEmail",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "E2ETrackingID",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyEmailWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/deleteemail/{emailid}": {
      "delete": {
        "tags": [
          "Workbench – Manage Travel Agency Email"
        ],
        "summary": "Delete Agency Email",
        "operationId": "DeleteAgencyEmail",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "emailid",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "E2ETrackingID",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content - Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/addtelephone": {
      "post": {
        "tags": [
          "Workbench – Manage Travel Agency Telephone"
        ],
        "summary": "Add Agency Telephone",
        "operationId": "AddAgencyTelephone",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "E2ETrackingID",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyTelephoneWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/updatetelephone": {
      "put": {
        "tags": [
          "Workbench – Manage Travel Agency Telephone"
        ],
        "summary": "Update Agency Telephone",
        "operationId": "UpdateAgencyTelephone",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "E2ETrackingID",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyTelephoneWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/travelagency/reservationworkbench/{ReservationResource_Identifier}/travelagency/{id}/deletetelephone/{telephoneid}": {
      "delete": {
        "tags": [
          "Workbench – Manage Travel Agency Telephone"
        ],
        "summary": "Delete Agency Telephone",
        "operationId": "DeleteAgencyTelephone",
        "parameters": [
          {
            "name": "ReservationResource_Identifier",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "telephoneid",
            "in": "path",
            "description": "Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TravelAgencyResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content - Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/customrule/customrules": {
      "get": {
        "tags": [
          "Workbench – Manage Custom Rules"
        ],
        "summary": "Retrieve custom rule records for a PCC",
        "operationId": "GetCustomRules",
        "parameters": [
          {
            "name": "PCC",
            "in": "query",
            "description": "The owning pcc of the custom rules.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "0XS4"
          },
          {
            "name": "RuleRecordName",
            "in": "query",
            "description": "The name of the rule record for a detail view of the rule. For multiple rules send space delimited list of strings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 10,
                "type": "string",
                "example": "CORPCODE"
              }
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/book/customrule/customrules/{ReservationWorkbench_Identifier}": {
      "post": {
        "tags": [
          "Workbench – Manage Custom Rules"
        ],
        "summary": "Add custom rule to Reservation",
        "operationId": "AddCustomRule",
        "parameters": [
          {
            "name": "ReservationWorkbench_Identifier",
            "in": "path",
            "description": "The unique reservation workbennch Identifer from your active workbench session where the custom rules shall be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "PCC",
            "in": "query",
            "description": "The owning pcc of the custom rules.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "0XS4"
          },
          {
            "name": "RuleRecordName",
            "in": "query",
            "description": "The name of the rule record for a detail view of the rule. For multiple rules send space delimited list of strings.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "maxLength": 10,
                "type": "string",
                "example": "CORPCODE"
              }
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created - 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Workbench – Manage Custom Rules"
        ],
        "summary": "Delete custom rule from Reservation",
        "operationId": "DeleteCustomRule",
        "parameters": [
          {
            "name": "ReservationWorkbench_Identifier",
            "in": "path",
            "description": "The unique reservation workbench Identifer from your active workbench session where the custom rules shall be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "PCC",
            "in": "query",
            "description": "The owning pcc of the custom rules.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "0XS4"
          },
          {
            "name": "RuleRecordSequence",
            "in": "query",
            "description": "The sequence of the rule record to delete a specific rule record. Leave blank to delete all rules.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/queue/queue": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "AgencyQueueResource - Move Reservation to a specified queue",
        "operationId": "Create",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyQueueSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/tickets/getbylocator": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Deprecated - use POST method",
        "operationId": "DeprecatedTicketGetByLocator",
        "parameters": [
          {
            "name": "Locator",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16,
              "pattern": "([A-Z0-9]+)?",
              "type": "string"
            },
            "example": "ABC123"
          },
          {
            "name": "TicketNumber",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 4096,
              "pattern": "([0-9]+)?",
              "type": "string"
            },
            "example": "1231234567890"
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, TicketDetail will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Ticket"
        ],
        "summary": "Retrieve tickets by locator",
        "operationId": "TicketGetByLocator",
        "parameters": [
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketQueryGetByLocator"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/ticket/tickets/{Identifier}": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Retrieve a single ticket",
        "description": "TicketDisplay returns details for a single ticket.",
        "operationId": "GetTicket",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "The ticket number",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            },
            "example": "1259900123456"
          },
          {
            "name": "detailViewInd",
            "in": "query",
            "description": "If true, TicketDetail will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "Void ticket for GDS",
        "description": "Use the TicketVoid API to void a GDS ticket. Generally a ticket can be voided only within the same day it was issued. See Basic Concepts above for limitations. At this time AirTicketing does not support canceling a GDS itinerary outside the void period.",
        "operationId": "UpdateTicket",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "description": "The ticket number",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            },
            "example": "1259900123456"
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketQueryUpdateTicket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketIDResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/emds/{Identifier}": {
      "get": {
        "tags": [
          "EMD"
        ],
        "summary": "Retrieve an EMD",
        "description": "Display an EMD to retrieve EMD details such as the amount paid and agency ticketing information.",
        "operationId": "GetEMD",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EMDListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "EMD"
        ],
        "summary": "Void an EMD",
        "description": "Void an EMD to cancel it. You can also use EMD void with GDS Exchange Ticketing API to refund an EMD back to the FOP.",
        "operationId": "UpdateEMD",
        "parameters": [
          {
            "name": "Identifier",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EMDQueryUpdateEMD"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EMDListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/air/emds/getbylocator": {
      "get": {
        "tags": [
          "EMD"
        ],
        "summary": "Retrieve EMD by locator",
        "operationId": "EMDGetByLocator",
        "parameters": [
          {
            "name": "Locator",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16,
              "pattern": "([A-Z0-9]+)?",
              "type": "string"
            }
          },
          {
            "name": "locatorType",
            "in": "query",
            "description": "Specifies the type of reservation ID (e.g. reservation or cancellation).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Specifies a unique identifier to indicate the source system which generated the resId.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "sourceContext",
            "in": "query",
            "description": "Specifies the context of the source.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "otaType",
            "in": "query",
            "description": "Used for codes in the OpenTravel Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
              "type": "string"
            }
          },
          {
            "name": "creationDate",
            "in": "query",
            "description": "PNR creation Date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "TraceId",
            "in": "header",
            "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 89,
              "minLength": 10,
              "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
              "type": "string"
            }
          },
          {
            "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
            "in": "header",
            "description": "Identifies the Travelport access group with which the caller is associated",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "travelportPlusSessionIdentifier",
            "in": "header",
            "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "minLength": 0,
              "pattern": "([a-zA-Z-0-9-_]*)",
              "type": "string"
            }
          },
          {
            "name": "TVP-PCC-Core",
            "in": "header",
            "description": "Allows user to pass PCC instead of Access Group ID",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
              "type": "string",
              "example": "DU7_1G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful Response - 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EMDListResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ReferenceListSeatingChart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "properties": {
              "SeatingChart": {
                "maxItems": 20,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SeatingChart"
                }
              }
            }
          }
        ]
      },
      "CatalogProductOfferingsResponseWrapper": {
        "properties": {
          "CatalogProductOfferingsResponse": {
            "$ref": "#/components/schemas/CatalogProductOfferingsResponse"
          }
        }
      },
      "CatalogProductOfferingsResponse": {
        "required": [
          "CatalogProductOfferings"
        ],
        "properties": {
          "CatalogProductOfferings": {
            "$ref": "#/components/schemas/CatalogProductOfferings"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "BaseResponse": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "BaseResponse"
          },
          "transactionId": {
            "type": "string",
            "description": "Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId."
          },
          "traceId": {
            "type": "string",
            "description": "Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId."
          },
          "Result": {
            "$ref": "#/components/schemas/Result"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "NextSteps": {
            "$ref": "#/components/schemas/NextSteps"
          },
          "ReferenceList": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceList"
            }
          },
          "CurrencyRateConversion": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyRateConversion"
            }
          },
          "Pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Result": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "Result"
          },
          "status": {
            "$ref": "#/components/schemas/ResultStatusEnum"
          },
          "Error": {
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "Warning": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Warning"
            }
          }
        },
        "description": "Discriminator class is Result only"
      },
      "ResultStatusEnum": {
        "type": "string",
        "description": "The status of an error or warning",
        "enum": [
          "Not processed",
          "Incomplete",
          "Complete",
          "Unknown"
        ]
      },
      "Error": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error"
          },
          "StatusCode": {
            "type": "integer",
            "description": "Http standard response code",
            "format": "int32",
            "deprecated": true
          },
          "Message": {
            "maxLength": 4096,
            "type": "string",
            "description": "The Travelport standardized error or warning message"
          },
          "NameValuePair": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            }
          }
        },
        "description": "Discriminator classes Error or ErrorDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "NameValuePair": {
        "required": [
          "name"
        ],
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string",
            "example": "Sunday"
          },
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "6"
          },
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "Key",
            "example": "Day1"
          }
        },
        "description": "Used for data stored in Name Value pairs"
      },
      "Warning": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Warning"
          },
          "StatusCode": {
            "type": "integer",
            "description": "Http standard response code",
            "format": "int32",
            "deprecated": true
          },
          "Message": {
            "maxLength": 4096,
            "type": "string",
            "description": "The Travelport standardized error or warning message"
          },
          "NameValuePair": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            }
          }
        },
        "description": "Discriminator classes Warning or WarningDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Identifier": {
        "properties": {
          "value": {
            "maxLength": 1024,
            "type": "string",
            "example": "A0656EFF-FAF4-456F-B061-0161008D7C4E"
          },
          "authority": {
            "maxLength": 128,
            "type": "string",
            "description": "Name of the authoritative system that created this identifier",
            "example": "TVPT"
          }
        },
        "description": "A globally unique identifier"
      },
      "NextSteps": {
        "required": [
          "NextStep",
          "baseURI"
        ],
        "properties": {
          "baseURI": {
            "type": "string",
            "description": "The base portion of the uri in order to shorten the uris in the individual steps"
          },
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "5"
          },
          "NextStep": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NextStep"
            }
          }
        }
      },
      "NextStep": {
        "required": [
          "action",
          "method"
        ],
        "properties": {
          "value": {
            "type": "string",
            "example": "www.resourcelocation.com"
          },
          "id": {
            "type": "string",
            "description": "Identifier for the Next Step",
            "example": "2"
          },
          "action": {
            "maxLength": 32,
            "type": "string",
            "description": "The action this next step is intended to achieve",
            "example": "cancel"
          },
          "method": {
            "$ref": "#/components/schemas/NextStepMethodEnum"
          },
          "description": {
            "maxLength": 32,
            "type": "string",
            "description": "Additional clarification for the next step",
            "example": "remove offer from the order"
          }
        },
        "description": "A URL that describes a step that can be applied to the resource containing the next step structure."
      },
      "NextStepMethodEnum": {
        "type": "string",
        "description": "Describes the set of potential methods that can be taken after an operation.",
        "enum": [
          "GET",
          "DELETE",
          "PUT",
          "POST"
        ]
      },
      "ReferenceList": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReferenceListFlight"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies for the Reference List"
          }
        },
        "description": "Discriminator classes for Air Search API are ReferenceListAmenity, ReferenceListBrand, ReferenceListFlight, ReferenceListProduct and ReferenceListTermsAndConditions. Discriminator classes for Air Price API are ReferenceListAmenity and ReferenceListBrand. Discriminator class for FareRule API is ReferenceListFlight. Discriminator class for Search Ancillaries API is ReferenceListFlight. Discriminator class for Seat Availabilities API is ReferenceListSeatingChart. Discriminator class for Hotel Availability is ReferenceListPropertyDates. Discriminator classes for Reservation and Reservation Workbench APIs are ReferenceListAmenity and ReferenceListBrand. Discriminator classes for Exchange Search API are ReferenceListBrand, ReferenceListFlight, ReferenceListExchangedPrice. Discriminator classes for Reservation Receipt API are ReferenceListOffer and ReferenceListTraveler. Discriminator class for Book_Traveler API is ReferenceListTraveler.",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CurrencyRateConversion": {
        "required": [
          "ConversionRate",
          "SourceCurrency",
          "TargetCurrency"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "CurrencyRateConversion"
          },
          "SourceCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "TargetCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "ConversionRate": {
            "$ref": "#/components/schemas/ConversionRate"
          }
        }
      },
      "CurrencyCode": {
        "properties": {
          "value": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "example": "USD"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Currency code authority",
            "example": "ISO 4217"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Currency code decimal place",
            "format": "int32",
            "example": 4
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Currency code decimal authority",
            "example": "ISO 4217"
          }
        },
        "description": "Currency codes are the three-letter alphabetic codes that represent the various currencies used throughout the world."
      },
      "ConversionRate": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "rateAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Rate authority",
            "example": "ISO 4217"
          },
          "rateAsOf": {
            "type": "string",
            "description": "Rate as of",
            "format": "date-time",
            "example": "2022-08-07T12:12:00Z"
          }
        },
        "description": "A conversion metric from standard to another with the contextual authority such as IATA, OAG, ISO, etc."
      },
      "Pagination": {
        "required": [
          "@type",
          "page",
          "pageSize",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Pagination"
          },
          "page": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The current page number of the full result set",
            "format": "int32",
            "example": 1
          },
          "pageSize": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The total number of items on this page",
            "format": "int32",
            "example": 20
          },
          "totalPages": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The total number of pages in this result set",
            "format": "int32",
            "example": 5
          },
          "totalItems": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The total number of pages in this result set",
            "format": "int32",
            "example": 100
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogProductOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogProductOfferingsID"
          },
          {
            "properties": {
              "CatalogProductOffering": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogProductOffering"
                }
              },
              "UpsellOffering": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsellOffering"
                }
              }
            }
          }
        ]
      },
      "CatalogProductOfferingsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOfferings"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "cpo_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes CatalogProductOfferingsID and CatalogProductOfferings",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogProductOffering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogProductOfferingID"
          },
          {
            "required": [
              "ProductBrandOptions"
            ],
            "properties": {
              "sequence": {
                "type": "integer",
                "description": "NumberDoubleDigit",
                "format": "int32",
                "example": 1
              },
              "Departure": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "([a-zA-Z]{3})",
                "type": "string",
                "description": "Departure location",
                "example": "LHR"
              },
              "Arrival": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "([a-zA-Z]{3})",
                "type": "string",
                "description": "Arrival location",
                "example": "LAX"
              },
              "Brand": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BrandID"
                }
              },
              "ProductBrandOptions": {
                "maxItems": 1000,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductBrandOptions"
                }
              },
              "SponsoredProductBrandOptions": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SponsoredProductBrandOptions"
                }
              }
            }
          }
        ]
      },
      "CatalogProductOfferingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOffering"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "cpo_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "CatalogProductOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "cpo_1"
          }
        },
        "description": "Discriminator classes CatalogProductOfferingID or CatalogProductOffering",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BrandID"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          },
          "BrandRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductBrandOptions": {
        "required": [
          "ProductBrandOffering"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductBrandOptions"
          },
          "flightRefs": {
            "type": "array",
            "description": "Reference to the Flights that are used within ProductBrandOptions",
            "example": [
              "s1",
              "s2",
              "s3"
            ],
            "items": {
              "type": "string"
            }
          },
          "ProductBrandOffering": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductBrandOffering"
            }
          }
        }
      },
      "ProductBrandOffering": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductBrandOffering"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "Price": {
            "$ref": "#/components/schemas/PriceDetail"
          },
          "Brand": {
            "$ref": "#/components/schemas/BrandID"
          },
          "Product": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductID"
            }
          },
          "TermsAndConditions": {
            "$ref": "#/components/schemas/TermsAndConditionsID"
          },
          "CombinabilityCode": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "maxLength": 32,
              "type": "string",
              "example": "J1"
            }
          },
          "BestCombinablePrice": {
            "$ref": "#/components/schemas/BestCombinablePriceDetail"
          },
          "Desirability": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "The desirability of the offering expressed as a percentage. The higher the percentage the more desirable the offering.",
            "format": "float",
            "example": 25
          },
          "MatchedAttributes": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The number of matched attributes according to the request modifiers",
            "format": "int32",
            "example": 7
          },
          "BrandStatus": {
            "$ref": "#/components/schemas/BrandStatusEnum"
          },
          "ContentSource": {
            "$ref": "#/components/schemas/ContentSourceEnum"
          },
          "bestMatchInd": {
            "type": "boolean",
            "description": "If true, this Offering is the best match according to the request modifiers",
            "example": true
          },
          "CO2EmissionsData": {
            "$ref": "#/components/schemas/CO2EmissionsData"
          },
          "adID": {
            "maxLength": 32,
            "type": "string",
            "description": "The advertisement ID for the sponsored offering"
          },
          "sponsoredOfferingPositionNumber": {
            "type": "integer",
            "description": "The display position of the sponsored offering",
            "format": "int32"
          }
        }
      },
      "PriceDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Price"
          },
          {
            "properties": {
              "PriceBreakdown": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceBreakdown"
                }
              }
            }
          }
        ]
      },
      "Price": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PriceDetail"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "2"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The total amount not including taxes and\\/or fees",
            "format": "float",
            "example": 20.2
          },
          "TotalTaxes": {
            "type": "number",
            "description": "The total of the taxes included in the total price",
            "format": "float",
            "example": 34.4
          },
          "TotalFees": {
            "type": "number",
            "description": "The total of the fees included in the total price",
            "format": "float",
            "example": 201
          },
          "TotalPrice": {
            "type": "number",
            "description": "The total price of the product in the currency indicated",
            "format": "float",
            "example": 34
          },
          "VendorCurrencyTotal": {
            "$ref": "#/components/schemas/VendorCurrencyTotal"
          }
        },
        "description": "Discriminator classes Price or PriceDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "VendorCurrencyTotal": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "VendorCurrencyTotal"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "CurrencySourceEnum": {
        "type": "string",
        "description": "The system requesting or returning the currency code specified in the attribute",
        "enum": [
          "Supplier",
          "Charged",
          "Requested"
        ]
      },
      "Taxes": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TaxesDetail"
          },
          "TotalTaxes": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 330.1
          },
          "TaxInfo": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxInfo"
            }
          }
        },
        "description": "Discriminator classes Taxes or TaxesDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TaxInfo": {
        "required": [
          "Amount",
          "TaxBreakdown",
          "TaxCode"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TaxInfo"
          },
          "TaxCode": {
            "type": "string",
            "description": "The tax code",
            "example": "XF"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the tax applied",
            "format": "float"
          },
          "TaxBreakdown": {
            "maxItems": 20,
            "type": "array",
            "description": "The breakdown of the tax for this tax code",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdown"
            }
          }
        }
      },
      "TaxBreakdown": {
        "required": [
          "AirportCode"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TaxInfo"
          },
          "AirportCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "The airport location the tax applies to",
            "example": "MIA"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the tax applied",
            "format": "float"
          }
        }
      },
      "Fees": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FeesDetail"
          },
          "TotalFees": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 111.11
          }
        },
        "description": "Discriminator classes Fees or FeesDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PriceBreakdown": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PriceBreakdownAir"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          }
        },
        "description": "Discriminator classes for Air Search and Air Price APIs are PriceBreakdownAir and PriceBreakdownAncillary. Discriminator classes for Search Ancillaries and Seat Availabilities are PriceBreakdown,  PriceBreakdownAncillary and PriceBreakdownAncillaryAir. Discriminator class for all Hotel APIs is PriceBreakdownHospitality. Discriminator classes for Vehicle APIs are PriceBreakdownVehicleCharges, PriceBreakdownVehicleDeposit, PriceBreakdownVehiclePrice, PriceBreakdownAncillaryVehicle . Discriminator classes for Reservation and Reservation Workbench APIs are PriceBreakdownAir, PriceBreakdownAncillary, PriceBreakdownHospitality, PriceBreakdownVehicleCharges, PriceBreakdownVehicleDeposit, PriceBreakdownVehiclePrice PriceBreakdownAncillaryVehicle",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Amount": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Amount"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "Commission": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Commission"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "description": "Discriminator classes CommissionAmount or CommissionPercent",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CommissionEnum": {
        "type": "string",
        "description": "Type of commission",
        "enum": [
          "Full",
          "Partial",
          "Non-paying",
          "No-show",
          "Adjustment",
          "Commissionable"
        ]
      },
      "ProductID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductAir"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "product_1"
          },
          "productRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "product_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes for Air Search API are ProductAir and ProductAncillary. Discriminator class for Exchange Search API is ProductAir.  Discriminator class for Search Ancillaries API is ProductAncillary. Discriminator classes for Seat Availabilities API is ProductSeatAvailability. Discriminator classes for Air Price API are ProductAir and ProductAncillary. Discriminator classes for Hotel Availability API are ProductHospitality and ProductHospitalityOffer. Discriminator class for Hotel Rules API and HotelReservation API is ProductHospitality. Discriminator classes for all Vehicle APIs are ProductVehicle and ProductAncillaryVehicle. Discriminator classes for Reservation API and Reservation Workbench APIs are ProductAir, ProductAncillary, ProductHospitality, ProductVehicle, ProductAncillaryVehicle.",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TermsAndConditionsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TermsAndConditionsAir"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "TC_1"
          },
          "termsAndConditionsRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message.",
            "example": "TC_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes for Air Search API are TermsAndConditionsAir and TermsAndConditionsAncillary. Discriminator class for Exchange Search API is TermsAndConditionsAir.  Discriminator classes for Search Ancillaries API and Seat Availabilities API are TermsAndConditions,  TermsAndConditionsAncillary and TermsAndConditionsAncillaryAir. Discriminator class for Hotel Availability API is TermsAndConditionsHospitality. Discriminator class for Vehicle Availability API is TermsAndConditionsVehicle.",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BestCombinablePriceDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BestCombinablePrice"
          },
          {
            "properties": {
              "PriceBreakdown": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceBreakdown"
                }
              }
            }
          }
        ]
      },
      "BestCombinablePrice": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BestCombinablePrice"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "2"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The total amount not including taxes and\\/or fees",
            "format": "float",
            "example": 20.2
          },
          "TotalTaxes": {
            "type": "number",
            "description": "The total of the taxes included in the total price",
            "format": "float",
            "example": 34.4
          },
          "TotalFees": {
            "type": "number",
            "description": "The total of the fees included in the total price",
            "format": "float",
            "example": 201
          },
          "TotalPrice": {
            "type": "number",
            "description": "The total price of the product in the currency indicated",
            "format": "float",
            "example": 34
          },
          "VendorCurrencyTotal": {
            "$ref": "#/components/schemas/VendorCurrencyTotal"
          }
        },
        "description": "Discriminator classes BestCombinablePrice or BestCombinablePriceDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandStatusEnum": {
        "type": "string",
        "enum": [
          "NotOffered",
          "SoldOut"
        ]
      },
      "ContentSourceEnum": {
        "type": "string",
        "description": "The source of the content to be returned in CatalogOfferings",
        "example": "GDS",
        "enum": [
          "GDS",
          "NDC",
          "LCC",
          "API"
        ],
        "x-enumDescriptions": {
          "GDS": "Use for GDS sourced transactions",
          "NDC": "Use for NDC sourced transactions",
          "LCC": "Do not use - replaced by API",
          "API": "Use for all other API sourced transactions including low cost carriers"
        }
      },
      "CO2EmissionsData": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "CO2EmissionsData"
          },
          "Actual": {
            "$ref": "#/components/schemas/Measurement"
          },
          "Typical": {
            "$ref": "#/components/schemas/Measurement"
          },
          "Variance": {
            "type": "integer",
            "description": "The variance of CO2 emission from the typical emission value represented as a percentage. If positive the CO2 emission is higher than the industry average. If negative it is lower than the industry average",
            "format": "int32"
          }
        }
      },
      "Measurement": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 2.22
          },
          "measurementType": {
            "$ref": "#/components/schemas/MeasurementTypeEnum"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitOfMeasureEnum"
          }
        },
        "description": "Used for dimensional units (width, height, depth) or weight"
      },
      "MeasurementTypeEnum": {
        "type": "string",
        "description": "The type of measurement such as width, height, weight",
        "enum": [
          "Width",
          "Height",
          "Depth",
          "Weight",
          "OverallDimension"
        ]
      },
      "UnitOfMeasureEnum": {
        "type": "string",
        "description": "The unit of measure in a code format. Refer to OpenTravel Code List Unit of Measure Code (UOM).",
        "enum": [
          "Miles",
          "Kilometers",
          "Meters",
          "Millimeters",
          "Centimeters",
          "Yards",
          "Feet",
          "Inches",
          "Pixels",
          "Block",
          "Megabytes",
          "Gigabytes",
          "Square feet",
          "Square meters",
          "Pounds",
          "Kilograms",
          "Square inch",
          "Square yard",
          "Acre",
          "Square millimeter",
          "Square centimeter",
          "Hectare",
          "Ounce",
          "Gram",
          "Gallons",
          "Liters",
          "Kilowatts",
          "Cubic meters"
        ]
      },
      "SponsoredProductBrandOptions": {
        "required": [
          "ProductBrandOffering"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SponsoredProductBrandOptions"
          },
          "flightRefs": {
            "type": "array",
            "description": "Reference to the Flights that are used within  SponsoredProductBrandOptions",
            "example": [
              "s1",
              "s2",
              "s3"
            ],
            "items": {
              "type": "string"
            }
          },
          "ProductBrandOffering": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductBrandOffering"
            }
          }
        }
      },
      "UpsellOffering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpsellOfferingID"
          },
          {
            "$ref": "#/components/schemas/CatalogProductOffering"
          },
          {
            "properties": {
              "productRefs": {
                "type": "array",
                "description": "An unsolicited Offering, offered in conjunction with specified product(s)",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "UpsellOfferingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "UpsellOffering"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "CatalogProductOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message"
          }
        },
        "description": "Discriminator classes UpsellOfferingID and UpsellOffering",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CatalogProductOfferingsQueryRequest": {
        "required": [
          "@type",
          "CatalogProductOfferingsRequest"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOfferingsQueryRequest"
          },
          "CatalogProductOfferingsRequest": {
            "$ref": "#/components/schemas/CatalogProductOfferingsRequestAir"
          }
        },
        "description": "Discriminator class CatalogProductOfferingsQueryRequest only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogProductOfferingsRequestAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogProductOfferingsRequest"
          },
          {
            "properties": {
              "maxNumberOfOffersToReturn": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "This attribute is deprecated and not validated if sent",
                "format": "int32",
                "example": 34
              },
              "offersPerPage": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "Number of offers per page",
                "format": "int32",
                "example": 45
              },
              "contentSourceList": {
                "type": "array",
                "example": [
                  "GDS",
                  "NDC"
                ],
                "items": {
                  "$ref": "#/components/schemas/ContentSourceEnum"
                }
              },
              "maxNumberOfUpsellsToReturn": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The maximum number of upsells to return",
                "format": "int32",
                "example": 3
              },
              "numberOfDownsellsToReturn": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The number of downsells to return",
                "format": "int32",
                "example": 2
              },
              "sortBy": {
                "$ref": "#/components/schemas/SortByEnum"
              },
              "PassengerCriteria": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassengerCriteria"
                }
              },
              "SearchCriteriaFlight": {
                "maxItems": 20,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchCriteriaFlight"
                }
              },
              "SearchModifiersAir": {
                "$ref": "#/components/schemas/SearchModifiersAir"
              },
              "PaymentCriteria": {
                "$ref": "#/components/schemas/PaymentCriteria"
              },
              "PricingModifiersAir": {
                "$ref": "#/components/schemas/PricingModifiersAir"
              },
              "PseudoCityInfo": {
                "$ref": "#/components/schemas/PseudoCityInfo"
              },
              "CustomResponseModifiersAir": {
                "$ref": "#/components/schemas/CustomResponseModifiersAir"
              },
              "SearchType": {
                "$ref": "#/components/schemas/SearchTypeEnum"
              },
              "inhibitBrandContentInd": {
                "type": "boolean",
                "description": "if true, brand infromation will be supressed.",
                "example": true
              },
              "detailViewInd": {
                "type": "boolean",
                "description": "if true, detail view should be returned",
                "example": true
              },
              "excludeMixedBrandsInd": {
                "type": "boolean",
                "description": "If true, mixed brands will be inhibited from the response"
              }
            }
          }
        ]
      },
      "CatalogProductOfferingsRequest": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOfferingsRequestAir"
          },
          "SearchControlConsoleChannelID": {
            "$ref": "#/components/schemas/SearchControlConsoleChannelID"
          }
        },
        "description": "Discriminator classes CatalogProductOfferingsRequest, CatalogProductOfferingsRequestAir",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "SearchControlConsoleChannelID": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "2"
          },
          "sccType": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          }
        }
      },
      "SortByEnum": {
        "type": "string",
        "enum": [
          "Price-LowToHigh"
        ]
      },
      "PassengerCriteria": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "PassengerCriteria"
          },
          "number": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Number",
            "format": "int32",
            "example": 1
          },
          "age": {
            "type": "integer",
            "description": "Age",
            "format": "int32",
            "example": 26
          },
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "Passenger Type Code",
            "example": "ADT"
          },
          "birthDate": {
            "type": "string",
            "description": "The date of birth of the passenger. May be used in age validation for fares with age restrictions",
            "format": "Date"
          },
          "CustomerLoyalty": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerLoyalty"
            }
          },
          "TravelerGeographicLocation": {
            "$ref": "#/components/schemas/TravelerGeographicLocation"
          },
          "specifiedPassengerTypeCodeOnlyInd": {
            "type": "boolean",
            "description": "If true then the Offering\\/Offer will only be returned for the specific passengerTypeCode",
            "example": true
          }
        }
      },
      "CustomerLoyalty": {
        "properties": {
          "value": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "example": "132456"
          },
          "id": {
            "type": "string",
            "description": "Customer Loyality Id",
            "example": "Loyalty_1"
          },
          "priority": {
            "maximum": 300,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Numeric Priority Code",
            "format": "int32",
            "example": 2
          },
          "programId": {
            "maxLength": 128,
            "type": "string",
            "description": "Specifies an identifier to indicate the company owner of the loyalty program",
            "example": "United"
          },
          "programName": {
            "maxLength": 128,
            "type": "string",
            "description": "Supplier's loyalty program name such as Frontier-EarlyReturns",
            "example": "Mileage Plus"
          },
          "supplierType": {
            "maxLength": 32,
            "type": "string",
            "description": "The kind of supplier of a loyalty program",
            "example": "Airline"
          },
          "supplier": {
            "maxLength": 128,
            "type": "string",
            "description": "Supplier of a loyalty program",
            "example": "UA"
          },
          "tier": {
            "maxLength": 32,
            "type": "string",
            "description": "Customer Loyalty tier level",
            "example": "Silver"
          },
          "shareWithSupplier": {
            "type": "array",
            "description": "The list of suppliers that the CustomerLoyalty number is shared.",
            "items": {
              "maxLength": 32,
              "type": "string",
              "example": "LH NH SQ"
            }
          },
          "cardHolderName": {
            "maxLength": 128,
            "type": "string",
            "description": "The card holder name",
            "example": "John Smith"
          },
          "validatedInd": {
            "type": "boolean",
            "description": "Customer loyalty number has been validated by the supplier",
            "example": true
          },
          "prefix": {
            "maxLength": 10,
            "type": "string",
            "description": "The cardholder name prefix title like Mr, Mrs, Dr"
          },
          "given": {
            "maxLength": 30,
            "type": "string",
            "description": "The First Name of the Cardholder"
          },
          "middle": {
            "maxLength": 30,
            "type": "string",
            "description": "Middle Name of the Cardholder"
          },
          "surname": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Last Name of the Cardholder"
          }
        },
        "description": "Specifies the ID for the membership program."
      },
      "TravelerGeographicLocation": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "PMI"
          },
          "travelerGeographicLocationType": {
            "$ref": "#/components/schemas/TravelerGeographicTypeEnum"
          },
          "residentGeographicCode": {
            "type": "string",
            "description": "Resident code, currently used to handle Spanish residency fares for NDC channel where this code is required in addition to the city of residence"
          },
          "generalLargeFamilyResidentDiscountInd": {
            "type": "boolean",
            "description": "if true, this request qualifies for general large family resident discount. General large families (up to 3 children) from Spain, from the EU/EEA or of any other nationality, whose residency in Spain is recognised and who are in possession of a large-family certificate issued by the autonomous community in which they live.",
            "example": true
          },
          "specialLargeFamilyResidentDiscountInd": {
            "type": "boolean",
            "description": "if true, this request qualifies for special large family resident discount. Special large families (4 or more children) from Spain, from the EU/EEA or of any other nationality, whose residency in Spain is recognised and who are in possession of a large-family certificate issued by the autonomous community in which they live.",
            "example": true
          }
        },
        "description": "Specifies which location the Traveler resides in. Used for resident fares"
      },
      "TravelerGeographicTypeEnum": {
        "type": "string",
        "example": "City",
        "enum": [
          "Country",
          "StateProvince",
          "City"
        ]
      },
      "SearchCriteriaFlight": {
        "required": [
          "@type",
          "From",
          "To",
          "departureDate"
        ],
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Preferred local departure date. Cannot be used in conjunction with arrival date",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "description": "Preferred local departure time. Cannot be used in conjunction with arrival time",
            "example": "07:00:00"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Preferred local arrival date. Cannot be used in conjunction with departure date.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "description": "Preferred local arrival time. Cannot be used in conjunction with departure time.",
            "format": "time",
            "example": "09:15:00"
          },
          "legSequence": {
            "type": "integer",
            "description": "Leg sequence",
            "format": "int32",
            "example": 1
          },
          "From": {
            "$ref": "#/components/schemas/FromTo"
          },
          "To": {
            "$ref": "#/components/schemas/FromTo"
          },
          "DepartureTimeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "ArrivalTimeRange": {
            "$ref": "#/components/schemas/TimeRange"
          }
        }
      },
      "FromTo": {
        "properties": {
          "value": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "example": "MEX"
          },
          "cityOrAirport": {
            "$ref": "#/components/schemas/CityOrAirportEnum"
          }
        },
        "description": "Location code"
      },
      "CityOrAirportEnum": {
        "type": "string",
        "description": "Clarification of how the airport or city code is used",
        "enum": [
          "Airport Only",
          "City or Airport",
          "City Only",
          "Use Default"
        ]
      },
      "TimeRange": {
        "properties": {
          "start": {
            "type": "string",
            "description": "start time",
            "example": "06:15:00"
          },
          "end": {
            "type": "string",
            "description": "endTime",
            "example": "09:15:00"
          }
        },
        "description": "Specify time."
      },
      "SearchModifiersAir": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "SearchModifiersAir"
          },
          "excludeGround": {
            "$ref": "#/components/schemas/ExcludeGroundTypeEnum"
          },
          "CarrierPreference": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarrierPreference"
            }
          },
          "CabinPreference": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CabinPreference"
            }
          },
          "ClassOfServicePreference": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassOfServicePreference"
            }
          },
          "ProductInclusionPreference": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInclusionPreference"
            }
          },
          "ConnectionPreferences": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionPreferencesAir"
            }
          },
          "prohibitChangeOfAirportInd": {
            "type": "boolean",
            "description": "If present and true, connections that require a change of airports are not returned",
            "example": true
          }
        }
      },
      "ExcludeGroundTypeEnum": {
        "type": "string",
        "example": "Train",
        "enum": [
          "Train",
          "All"
        ]
      },
      "CarrierPreference": {
        "required": [
          "carriers",
          "preferenceType"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CarrierPreference"
          },
          "preferenceType": {
            "$ref": "#/components/schemas/CarrierPreferenceTypeEnum"
          },
          "carriers": {
            "type": "array",
            "description": "Carrier airline codes",
            "items": {
              "pattern": "([a-zA-Z0-9]{2,3})",
              "type": "string",
              "example": "BA"
            }
          },
          "legSequence": {
            "type": "array",
            "description": "Leg sequence",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "CarrierPreferenceTypeEnum": {
        "type": "string",
        "example": "Preferred",
        "enum": [
          "Preferred",
          "Permitted",
          "Prohibited"
        ]
      },
      "CabinPreference": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "CabinPreference"
          },
          "preferenceType": {
            "$ref": "#/components/schemas/CabinPreferenceTypeEnum"
          },
          "cabins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CabinAirEnum"
            }
          },
          "legSequence": {
            "type": "array",
            "description": "Leg sequence",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "CabinPreferenceTypeEnum": {
        "type": "string",
        "example": "Preferred",
        "enum": [
          "Preferred",
          "Permitted",
          "PreferredWithUpgrade",
          "Prohibited"
        ]
      },
      "CabinAirEnum": {
        "type": "string",
        "description": "Specifies the cabin type (e.g. first, business, economy).",
        "example": "Economy",
        "enum": [
          "PremiumFirst",
          "First",
          "Business",
          "PremiumEconomy",
          "Economy"
        ]
      },
      "ClassOfServicePreference": {
        "required": [
          "ClassesOfService"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ClassOfServicePreference"
          },
          "legSequence": {
            "type": "array",
            "description": "The legSequence value",
            "example": [
              1,
              3,
              4
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ClassesOfService": {
            "type": "array",
            "description": "Allows user to specify which class(s) of service they want returned in CatalogOfferings",
            "items": {
              "maxLength": 2,
              "minLength": 1,
              "pattern": "([a-zA-Z0-9]{1,2})",
              "type": "string",
              "example": "F"
            }
          },
          "PreferenceType": {
            "$ref": "#/components/schemas/ClassOfServicePreferenceTypeEnum"
          }
        }
      },
      "ClassOfServicePreferenceTypeEnum": {
        "type": "string",
        "example": "Preferred",
        "enum": [
          "Preferred",
          "Permitted",
          "Prohibited"
        ]
      },
      "ProductInclusionPreference": {
        "required": [
          "Classification"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductInclusionPreference"
          },
          "legSequence": {
            "type": "array",
            "description": "The legSequence value",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "Classification": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "example": [
              "Meals",
              "WiFi",
              "Other"
            ],
            "items": {
              "$ref": "#/components/schemas/BrandClassificationEnum"
            }
          },
          "AdditionalClassification": {
            "maxItems": 10,
            "type": "array",
            "example": [
              "45",
              "67",
              "6"
            ],
            "items": {
              "maxLength": 512,
              "type": "string"
            }
          },
          "exactMatchInd": {
            "type": "boolean",
            "description": "This indicator is deprecated. The default behavior will be to provide an exact match to the product inclusion preferences",
            "example": true
          },
          "bestMatchInd": {
            "type": "boolean",
            "description": "If true, the bestMatch will be returned according to the select product inclusions",
            "example": true
          }
        }
      },
      "BrandClassificationEnum": {
        "type": "string",
        "description": "The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.",
        "enum": [
          "CheckedBag",
          "CarryOn",
          "PersonalItem",
          "Rebooking",
          "Refund",
          "SeatAssignment",
          "PremiumSeat",
          "LieFlatSeat",
          "Meals",
          "WiFi",
          "Other"
        ]
      },
      "ConnectionPreferencesAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionPreferences"
          },
          {
            "properties": {
              "FlightType": {
                "$ref": "#/components/schemas/FlightType"
              }
            }
          }
        ]
      },
      "ConnectionPreferences": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "ConnectionPreferences"
          },
          "legSequence": {
            "type": "array",
            "description": "Leg sequence",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "maxConnectionDuration": {
            "type": "string",
            "description": "The maximum acceptable duration of the connection ISO8601",
            "example": "PT3H30M"
          },
          "maxOvernightDuration": {
            "type": "string",
            "description": "The maximum acceptable overnight duration of the connection ISO8601",
            "example": "PT6H30M"
          },
          "preferenceType": {
            "$ref": "#/components/schemas/ConnectionPointPreferenceTypeENUM"
          },
          "ConnectionPoint": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "maxLength": 3,
              "minLength": 3,
              "pattern": "([a-zA-Z]{3})",
              "type": "string"
            }
          },
          "cityOrAirport": {
            "$ref": "#/components/schemas/CityOrAirportEnum"
          }
        },
        "description": "Discriminator classes ConnectionPreferences or ConnectionPreferencesAir",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ConnectionPointPreferenceTypeENUM": {
        "type": "string",
        "description": "Preference type - preferred, permitted or prohibited. Preferred is not permitted as a preference type and will be ignored",
        "example": "Permitted",
        "enum": [
          "Preferred",
          "Permitted",
          "Prohibited"
        ]
      },
      "FlightType": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightType"
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionTypeEnum"
          },
          "excludeInterlineConnectionsInd": {
            "type": "boolean",
            "description": "If present and true, exclude interline connections",
            "example": true
          }
        }
      },
      "ConnectionTypeEnum": {
        "type": "string",
        "example": "StopDirect",
        "enum": [
          "NonStopDirect",
          "StopDirect",
          "SingleConnection",
          "DoubleConnection",
          "TripleConnection"
        ]
      },
      "PaymentCriteria": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "PaymentCriteria"
          },
          "IssuerIdentificationNumber": {
            "maxLength": 32,
            "pattern": "[0-9]{6,11}",
            "type": "string",
            "description": "This the BIN/IIN",
            "example": "123456"
          },
          "PaymentCardCode": {
            "maxLength": 2,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "A two character code for a credit card, like MC, AX",
            "example": "AD"
          },
          "DocumentNumber": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentNumber"
            }
          },
          "FlightPass": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightPass"
            }
          },
          "agencyAccountInd": {
            "type": "boolean",
            "description": "If true, payment will be made by agency account",
            "example": true
          },
          "bspInd": {
            "type": "boolean",
            "description": "If true, payment will be made by BSP",
            "example": true
          },
          "cashInd": {
            "type": "boolean",
            "description": "If true, payment will be made by cash",
            "example": true
          },
          "invoiceInd": {
            "type": "boolean",
            "description": "If true, payment will be made by invoice",
            "example": true
          }
        }
      },
      "DocumentNumber": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "pattern": "([0-9]+)?",
            "type": "string",
            "example": "1259900123456"
          },
          "documentIssuer": {
            "maxLength": 32,
            "type": "string",
            "description": "Document issuer",
            "example": "BA"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          },
          "travelerIdentifierRef": {
            "maxLength": 128,
            "type": "string",
            "description": "traveler identifier reference"
          },
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "The name of the Traveler being referenced."
          },
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "The passenger type code of the Traveler being referenced."
          },
          "id": {
            "type": "string",
            "description": "A locally referenced ID"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text used to identify the contents of a target object"
          },
          "uris": {
            "type": "array",
            "description": "The URI used to GET the target object in another domain.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentTypeEnum": {
        "type": "string",
        "description": "Document type like EMD, MCO",
        "example": "Ticket",
        "enum": [
          "EMD",
          "MCO",
          "Ticket"
        ]
      },
      "FlightPass": {
        "required": [
          "@type",
          "supplier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightPass"
          },
          "accountNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The flight pass account number",
            "example": "0140851633093"
          },
          "supplier": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "The flight pass supplier code",
            "example": "AC"
          },
          "Description": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "maxLength": 128,
              "type": "string",
              "description": "The program name or description of the flight pass",
              "example": "FlightPass"
            }
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          }
        },
        "description": "Discriminator classes FlightPass only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerIdentifierRef": {
        "properties": {
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "Traveler identifier"
          },
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "Passenger Type code",
            "example": "ADT"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierRef"
          }
        ]
      },
      "IdentifierRef": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "A locally referenced ID"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text used to identify the contents of a target object"
          },
          "uris": {
            "type": "array",
            "description": "Uniform Resource Identifier",
            "items": {
              "type": "string",
              "example": "google.com"
            }
          }
        }
      },
      "PricingModifiersAir": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "example": "GBP"
          },
          "FareSelection": {
            "$ref": "#/components/schemas/FareSelection"
          },
          "OrganizationInformation": {
            "$ref": "#/components/schemas/OrganizationInformation"
          },
          "TaxExemption": {
            "$ref": "#/components/schemas/TaxExemption"
          },
          "PromotionalCode": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionalCode"
            }
          },
          "SellCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Overrides the sell city of the requestor."
          },
          "TicketCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Overrides the ticket city of the requestor."
          },
          "PricingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string"
          },
          "TicketingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string"
          },
          "CalculatedFareAdjustment": {
            "$ref": "#/components/schemas/CalculatedFareAdjustment"
          },
          "ManualFareAdjustment": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualFareAdjustment"
            }
          },
          "includeSplitPaymentInd": {
            "type": "boolean",
            "description": "If true, split payment (split ticket) offerings\\/offers will be returned"
          },
          "returnMostRestrictiveBrandInd": {
            "type": "boolean",
            "description": "if true, the most restrictive brand will be returned in the response when there are different brands present in the Offering"
          },
          "splitPaymentOfferings": {
            "type": "number",
            "description": "The percentage, between 0 and 99, of round trip offerings the user would like returned in the result set.",
            "format": "float",
            "example": 25
          }
        },
        "description": "Discriminator classes PricingModifiersAir and PricingModifersAirDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FareSelection": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FareSelection"
          },
          "fareType": {
            "$ref": "#/components/schemas/FaresFilterEnum"
          },
          "RefundOptions": {
            "$ref": "#/components/schemas/RefundOptions"
          },
          "ChangeOptions": {
            "$ref": "#/components/schemas/ChangeOptions"
          },
          "FareQualifier": {
            "maxItems": 5,
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/FareQualifierENUM"
            }
          },
          "FareQualifierString": {
            "maxItems": 5,
            "type": "array",
            "description": "Fare qualifier to describe the type of private fare",
            "example": [
              "Tour",
              "Student",
              "Consolidator"
            ],
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          }
        },
        "description": "Discriminator classes FareSelection or FareSelectionDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FaresFilterEnum": {
        "type": "string",
        "description": "Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only",
        "enum": [
          "PublicFaresOnly",
          "PrivateFaresOnly",
          "AgencyPrivateFaresOnly",
          "AirlinePrivateFaresOnly",
          "PublicAndPrivateFares",
          "NetFaresOnly",
          "AllFares"
        ]
      },
      "RefundOptions": {
        "required": [
          "refundTypes"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RefundOptions"
          },
          "refundTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundTypeEnum"
            }
          },
          "RefundPenaltyRange": {
            "$ref": "#/components/schemas/RefundPenaltyRange"
          }
        }
      },
      "RefundTypeEnum": {
        "type": "string",
        "example": "Refundable",
        "enum": [
          "Refundable",
          "NonRefundable",
          "PartialRefund"
        ]
      },
      "RefundPenaltyRange": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "RefundPenaltyRange"
          },
          "Minimum": {
            "$ref": "#/components/schemas/AmountPercent"
          },
          "Maximum": {
            "$ref": "#/components/schemas/AmountPercent"
          }
        }
      },
      "AmountPercent": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AmountPercentAmount"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "description": "Discriminator classes AmountPercentAmount or AmountPercentPercent",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ChangeOptions": {
        "required": [
          "changeTypes"
        ],
        "properties": {
          "changeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeTypeENUM"
            }
          },
          "ChangePenaltyRange": {
            "$ref": "#/components/schemas/ChangePenaltyRange"
          }
        }
      },
      "ChangeTypeENUM": {
        "type": "string",
        "enum": [
          "Changeable",
          "NonChangeable",
          "PenaltyToChange"
        ]
      },
      "ChangePenaltyRange": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ChangePenaltyRange"
          },
          "Minimum": {
            "$ref": "#/components/schemas/AmountPercent"
          },
          "Maximum": {
            "$ref": "#/components/schemas/AmountPercent"
          }
        }
      },
      "FareQualifierENUM": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/FareQualifierENUM_Base"
          }
        },
        "deprecated": true
      },
      "FareQualifierENUM_Base": {
        "type": "string",
        "description": "Deprecated - do not use. Replaced by FareQualiferString",
        "deprecated": true,
        "enum": [
          "Consolidator",
          "Government",
          "Marine",
          "Military",
          "Reward",
          "StandBy",
          "Staff",
          "Student",
          "Tour",
          "Youth",
          "VistFriendsAndRelatives"
        ]
      },
      "OrganizationInformation": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "OrganizationInformation"
          },
          "OrganizationIdentifier": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationIdentifier"
            }
          },
          "GSTRegistrationNumber": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GSTRegistrationNumber"
            }
          }
        }
      },
      "OrganizationIdentifier": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "JBD123456"
          },
          "supplier": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "Supplier code",
            "example": "AA"
          },
          "organizationCodeType": {
            "$ref": "#/components/schemas/OrganizationCodeTypeEnum"
          },
          "segmentSequenceList": {
            "type": "array",
            "description": "SegmentSequenceList",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "productRef": {
            "type": "array",
            "description": "The productRef which the OrganizationIdentifier applies to",
            "example": [
              "product_1",
              "product_2"
            ],
            "items": {
              "type": "string"
            }
          },
          "accountCodeFaresOnlyInd": {
            "type": "boolean",
            "description": "If true, account code only fares will be returned"
          }
        },
        "description": "The organization identifier"
      },
      "OrganizationCodeTypeEnum": {
        "type": "string",
        "description": "Defines the type of code given to the Organization to obtain discounts or additional benefits",
        "example": "Account",
        "enum": [
          "Account",
          "OrganizationLoyaltyProgram",
          "Tour",
          "TicketDesignator"
        ]
      },
      "GSTRegistrationNumber": {
        "required": [
          "country"
        ],
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string",
            "example": "07AAGFF2194N1Z1"
          },
          "telephone": {
            "maxLength": 32,
            "type": "string",
            "description": "Telephone Number",
            "example": "222-222-222"
          },
          "address": {
            "maxLength": 128,
            "type": "string",
            "description": "Address of the GST customer",
            "example": "1122 sample trail, CO, USA, 21232"
          },
          "country": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Country",
            "example": "India"
          },
          "companyName": {
            "maxLength": 512,
            "type": "string",
            "description": "Name of the Company",
            "example": "American Airlines"
          },
          "email": {
            "maxLength": 128,
            "type": "string",
            "description": "E-Mail",
            "example": "sample@aa.com"
          }
        },
        "description": "The GST Registration Number for this Organization"
      },
      "TaxExemption": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "TaxExemption"
          },
          "countries": {
            "type": "array",
            "description": "ISO country code",
            "example": [
              "CA",
              "US"
            ],
            "items": {
              "pattern": "[a-zA-Z]{2}",
              "type": "string"
            }
          },
          "taxCodes": {
            "type": "array",
            "description": "Tax codes",
            "example": [
              "YQ",
              "US"
            ],
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          },
          "allTaxesExemptInd": {
            "type": "boolean",
            "description": "If true, the Offer/Offering is exempt from all taxes",
            "example": true
          }
        }
      },
      "PromotionalCode": {
        "required": [
          "supplierCode"
        ],
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "CDFRT"
          },
          "supplierCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Promotional code supplier code",
            "example": "AA"
          }
        }
      },
      "CalculatedFareAdjustment": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CalculatedFareAdjustmentDiscount"
          }
        },
        "description": "Discriminator classes CalculatedFareAdjustmentDiscount or CalculatedFareAdjustmentIncrease",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ManualFareAdjustment": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ManualFareAdjustmentIncrease"
          },
          "passengerTypeCodes": {
            "type": "array",
            "description": "List of Passenger Type Codes",
            "items": {
              "maxLength": 5,
              "minLength": 3,
              "pattern": "([a-zA-Z0-9]{3,5})",
              "type": "string"
            }
          }
        },
        "description": "Discriminator class ManualFareAdjustmentIncrease or ManualFareAdjustmentDiscount",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PseudoCityInfo": {
        "properties": {
          "value": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "example": "1CR"
          },
          "providerCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Assigned Type: c-1100:SupplierCode",
            "example": "1CR"
          }
        },
        "description": "a pseudo city information contains the details about the corporate user of a computer reservation system (CRS) or global distribution system (GDS), typically a travel agency."
      },
      "CustomResponseModifiersAir": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "CustomResponseModifiersAir"
          },
          "BrandAttributeInclusion": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandAttributeInclusion"
            }
          },
          "SearchRepresentation": {
            "$ref": "#/components/schemas/SearchRepresentationENUM"
          },
          "excludePenaltiesInd": {
            "type": "boolean",
            "description": "If true, Penalties will be excluded from the response",
            "example": true
          },
          "excludeBaggageFeesInd": {
            "type": "boolean",
            "description": "If true, Baggage Fees will be inhibited from the response",
            "example": true
          },
          "includeFareCalculationInd": {
            "type": "boolean",
            "description": "if true, the fare calculation string will be returned in the response",
            "example": true
          },
          "excludeSurchargesInd": {
            "type": "boolean",
            "description": "If true, the surcharge breakdown will be excluded from Price_Detail",
            "example": true
          },
          "excludeUnbundledFaresInd": {
            "type": "boolean",
            "description": "If true, unbundled fares will not be returned in the response",
            "example": true
          },
          "includeCO2EmissionsDataInd": {
            "type": "boolean",
            "description": "If true, CO2 emissions data will be included in the response"
          },
          "includeFlightAmenitiesInd": {
            "type": "boolean",
            "description": "If true, flight amenities will be included in the response"
          }
        },
        "description": "Modifiers to customize the result set"
      },
      "BrandAttributeInclusion": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "BrandAttributeInclusion"
          },
          "legSequence": {
            "type": "array",
            "description": "the leg sequence",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "Classification": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandClassificationEnum"
            }
          },
          "AdditionalClassification": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "maxLength": 512,
              "type": "string"
            }
          }
        }
      },
      "SearchRepresentationENUM": {
        "type": "string",
        "description": "Customize search result set as leg or journey based",
        "example": "Leg",
        "enum": [
          "Leg",
          "Journey",
          "LegWithJourneyData"
        ]
      },
      "SearchTypeEnum": {
        "type": "string",
        "example": "MetaSearch",
        "enum": [
          "MetaSearch",
          "ProductSearch",
          "OfferSearch"
        ]
      },
      "CatalogProductOfferingsQueryBuildNext": {
        "required": [
          "@type",
          "BuildFromCatalogProductOfferingsRequest"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOfferingsQueryBuildNext"
          },
          "BuildFromCatalogProductOfferingsRequest": {
            "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
          }
        },
        "description": "Discriminator classes CatalogProductOfferingsQueryBuildNext only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromCatalogProductOfferingsRequest": {
        "required": [
          "@type",
          "CatalogProductOfferingSelection",
          "CatalogProductOfferingsIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromCatalogProductOfferingsRequest"
          },
          "CatalogProductOfferingsIdentifier": {
            "$ref": "#/components/schemas/CatalogProductOfferingsIdentifier"
          },
          "CatalogProductOfferingSelection": {
            "maxItems": 16,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogProductOfferingSelection"
            }
          },
          "UpsellOfferingIdentifier": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsellOfferingIdentifier"
            }
          }
        },
        "description": "Discriminator classes BuildFromCatalogProductOfferingsRequest, BuildFromCatalogProductOfferingsRequestAir, BuildFromCatalogProductOfferingsRequestAirSearch, BuildFromCatalogProductOfferingsRequestAirChange",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogProductOfferingsIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "cpo_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "CatalogProductOfferingSelection": {
        "required": [
          "CatalogProductOfferingIdentifier",
          "ProductBrandOfferingIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOfferingSelection"
          },
          "CatalogProductOfferingIdentifier": {
            "$ref": "#/components/schemas/CatalogProductOfferingIdentifier"
          },
          "ProductBrandOfferingIdentifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "ProductIdentifier": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "SegmentSequence": {
            "type": "array",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "CatalogProductOfferingIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "cpo_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "CatalogProductOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "cpo_1"
          }
        }
      },
      "ProductIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "product_1"
          },
          "productRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "product_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "UpsellOfferingIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "CatalogProductOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message"
          }
        }
      },
      "CatalogProductOfferingsQueryBuildOptions": {
        "required": [
          "@type",
          "BuildOptions"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogProductOfferingsQueryBuildOptions"
          },
          "BuildOptions": {
            "$ref": "#/components/schemas/BuildOptions"
          }
        },
        "description": "Discriminator classes CatalogProductOfferingsQueryBuildOptions only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildOptions": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildOptionsFromCatalogProductOptions"
          },
          "maxNumberOfUpsellsToReturn": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "NonnegativeInteger",
            "format": "int32",
            "example": 2
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          },
          "FareRuleType": {
            "$ref": "#/components/schemas/FareRuleEnum"
          },
          "FareRuleCategory": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareRuleCategoryEnum"
            }
          },
          "returnBrandedFaresInd": {
            "type": "boolean"
          },
          "CustomResponseModifiersAir": {
            "$ref": "#/components/schemas/CustomResponseModifiersAir"
          }
        },
        "description": "Discriminator classes BuildOptionsFromCatalogProductOptions or BuildOptionsFromProducts",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FareRuleEnum": {
        "type": "string",
        "enum": [
          "Structured",
          "ShortText",
          "LongText"
        ]
      },
      "FareRuleCategoryEnum": {
        "type": "string",
        "enum": [
          "AdvanceReservationsTicketing",
          "MinimumStay",
          "MaximumStay",
          "Stopovers",
          "Penalties",
          "Eligibility",
          "DayTime",
          "Seasonality",
          "FlightApplication",
          "Transfers",
          "Combinations",
          "BlackoutDates",
          "Surcharges",
          "AccompaniedTravel",
          "TravelRestrictions",
          "SalesRestrictions",
          "HIPMileageExeptions",
          "TicketEndorsements",
          "ChildrenDiscounts",
          "TourConductorDiscounts",
          "AgentDiscounts",
          "AllOtherDiscounts",
          "MiscellaneousProvisions",
          "FareByRule",
          "Groups",
          "Tours",
          "VisitAnotherCountry",
          "Deposits",
          "VoluntaryChanges",
          "VoluntaryRefunds",
          "NegotiatedFares",
          "ApplicationAndOtherConditions"
        ]
      },
      "CatalogOfferingsQueryAirChange": {
        "required": [
          "@type",
          "CatalogOfferingsAirChangeRequest"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsQueryAirChange"
          },
          "CatalogOfferingsAirChangeRequest": {
            "$ref": "#/components/schemas/CatalogOfferingsAirChangeRequestReservation"
          }
        },
        "description": "Discriminator class CatalogOfferingsQueryAirChange only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsAirChangeRequestReservation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingsAirChangeRequest"
          },
          {
            "required": [
              "BuildFromReservationWorkbench"
            ],
            "properties": {
              "BuildFromReservationWorkbench": {
                "$ref": "#/components/schemas/BuildFromReservationWorkbench"
              }
            }
          }
        ]
      },
      "CatalogOfferingsAirChangeRequest": {
        "required": [
          "@type",
          "PassengerCriteria",
          "SearchCriteriaFlight"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsAirChangeRequestReservation"
          },
          "catalogOfferingsPerPage": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Catalog Offerings per page value",
            "format": "int32",
            "example": 5
          },
          "SearchCriteriaFlight": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchCriteriaFlight"
            }
          },
          "PassengerCriteria": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerCriteria"
            }
          },
          "SearchModifiersAir": {
            "$ref": "#/components/schemas/SearchModifiersAir"
          },
          "PricingModifiersAirChange": {
            "$ref": "#/components/schemas/PricingModifiersAirChange"
          },
          "SearchControlConsoleChannelID": {
            "$ref": "#/components/schemas/SearchControlConsoleChannelID"
          },
          "returnBrandedFaresInd": {
            "type": "boolean",
            "example": true
          },
          "upsellInd": {
            "type": "boolean",
            "example": true
          },
          "detailViewInd": {
            "type": "boolean",
            "example": true
          }
        },
        "description": "Discriminator classes CatalogOfferingsAirChangeRequestReservation or CatalogOfferingsAirChangeRequestDocumentNumber",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PricingModifiersAirChange": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "PricingModifiersAirChange"
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "ISO 4217 currency code",
            "example": "USD"
          },
          "FareSelection": {
            "$ref": "#/components/schemas/FareSelection"
          },
          "OrganizationInformation": {
            "$ref": "#/components/schemas/OrganizationInformation"
          },
          "WaiverCode": {
            "$ref": "#/components/schemas/WaiverCode"
          },
          "TaxExemption": {
            "$ref": "#/components/schemas/TaxExemption"
          },
          "PromotionalCode": {
            "$ref": "#/components/schemas/PromotionalCode"
          },
          "SellCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Overrides the sell city of the requestor.",
            "example": "MEX"
          },
          "TicketCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Overrides the ticket city of the requestor.",
            "example": "MEX"
          },
          "PricingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string"
          },
          "TicketingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string"
          },
          "CalculatedFareAdjustment": {
            "$ref": "#/components/schemas/CalculatedFareAdjustment"
          },
          "keepToBrandInd": {
            "type": "boolean",
            "description": "If true, the offerings returned will be of the same brand as the original Offer",
            "example": true
          },
          "returnMostRestrictiveBrandInd": {
            "type": "boolean",
            "description": "if true, the most restrictive brand will be returned in the response when there are different brands present in the Offering",
            "example": true
          }
        }
      },
      "WaiverCode": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "reasonCode": {
            "type": "integer",
            "description": "A code assigned to identify the reason for disruption",
            "format": "int32",
            "example": 3312
          }
        }
      },
      "BuildFromReservationWorkbench": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromReservationWorkbench"
          },
          "OfferIdentifier": {
            "$ref": "#/components/schemas/OfferIdentifier"
          },
          "ProductIdentifier": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "SegmentSequenceList": {
            "type": "array",
            "description": "The segmentSequence within the product the action is being requested for. Used when multiple flights exist within a product. Only one product may be selected with this option.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ReservationIdentifier": {
            "$ref": "#/components/schemas/ReservationIdentifier"
          }
        }
      },
      "OfferIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "offer_1"
          },
          "offerRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "offer_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "ReservationIdentifier": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "Reservation",
            "deprecated": true
          },
          "id": {
            "type": "string",
            "description": "Internal ID"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "IdentifierType": {
            "$ref": "#/components/schemas/IdentifierTypeENUM"
          }
        }
      },
      "IdentifierTypeENUM": {
        "type": "string",
        "example": "Locator",
        "enum": [
          "Reservation",
          "Locator",
          "SupplierLocator",
          "DocumentNumber"
        ]
      },
      "CatalogOfferingsAirChangeResponseWrapper": {
        "properties": {
          "CatalogOfferingsAirChangeResponse": {
            "$ref": "#/components/schemas/CatalogOfferingsAirChangeResponse"
          }
        }
      },
      "CatalogOfferingsAirChangeResponse": {
        "properties": {
          "CatalogOfferings": {
            "$ref": "#/components/schemas/CatalogOfferings"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CatalogOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingsID"
          },
          {
            "required": [
              "CatalogOffering"
            ],
            "properties": {
              "totalCatalogOffering": {
                "type": "integer",
                "description": "Total number or catalogoffering returned for the result set",
                "format": "int32"
              },
              "catalogOfferingPerPage": {
                "type": "integer",
                "description": "Number of catalogOffering per page",
                "format": "int32"
              },
              "numberOfPages": {
                "type": "integer",
                "description": "Total number of pages for the result set",
                "format": "int32"
              },
              "CatalogOffering": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogOffering"
                }
              },
              "AncillaryOffering": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AncillaryOfferingID"
                }
              }
            }
          }
        ]
      },
      "CatalogOfferingsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferings"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "CatalogOfferings_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes for Exchange Search API are CatalogOfferingsID and CatalogOfferings. Discriminator classes for Search Ancillaries API and SeatAvailabilities API are CatalogOfferingsID and CatalogOfferingsTravelerFlight.",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOffering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingID"
          },
          {
            "required": [
              "Price",
              "ProductOptions"
            ],
            "properties": {
              "ProductOptions": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductOptions"
                }
              },
              "Price": {
                "$ref": "#/components/schemas/PriceDetail"
              },
              "TermsAndConditions": {
                "$ref": "#/components/schemas/TermsAndConditions"
              }
            }
          }
        ]
      },
      "CatalogOfferingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOffering"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "co1"
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "co1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator class for Hotel Availability is CatalogOfferingHospitality. Discriminator class for ExchangeSearch is CatalogOfferingModify",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductOptionsID"
          },
          {
            "required": [
              "Product"
            ],
            "properties": {
              "sequence": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "NonnegativeInteger",
                "format": "int32",
                "example": 1
              },
              "Product": {
                "maxItems": 1000,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductID"
                }
              }
            }
          }
        ]
      },
      "ProductOptionsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductOptions"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "ProductOptions_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "ProductOptionsRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "ProductOptions_1"
          }
        },
        "description": "Discriminator classes ProductOptionsID and ProductOptions",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TermsAndConditions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsID"
          },
          {
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The data and time the offer will expire",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "CustomerLoyalty": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              }
            }
          }
        ]
      },
      "AncillaryOfferingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AncillaryOffering"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message"
          },
          "AncillaryOfferingRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes AncillaryOfferingID and AncillaryOffering",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsQueryProductSpecificSearch": {
        "required": [
          "@type",
          "BuildFromProductsRequestAirChange",
          "PassengerCriteria",
          "PaymentCriteria"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsQueryProductSpecificSearch"
          },
          "detailView": {
            "type": "boolean",
            "description": "If true, detail view will be returned in response"
          },
          "lowFareFinderInd": {
            "type": "boolean",
            "description": "If true, the lowest fare will be returned regardless of the booking class sent"
          },
          "returnBrandedfaresInd": {
            "type": "boolean",
            "description": "If true, branded fares will be returned in the response"
          },
          "BuildFromProductsRequestAirChange": {
            "$ref": "#/components/schemas/BuildFromProductsRequestAirChange"
          },
          "PassengerCriteria": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerCriteria"
            }
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          },
          "CabinPreference": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CabinPreference"
            }
          }
        },
        "description": "Discriminator classes CatalogOfferingsQueryProductSpecificSearch only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromProductsRequestAirChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromProductsRequest"
          },
          {
            "required": [
              "ProductCriteriaAir"
            ],
            "properties": {
              "PricingModifiersAirChange": {
                "$ref": "#/components/schemas/PricingModifiersAirChange"
              },
              "ProductCriteriaAir": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductCriteriaAir"
                }
              }
            }
          }
        ]
      },
      "BuildFromProductsRequest": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromProductsRequestAir"
          }
        },
        "description": "Discriminator classes BuildFromProductsRequest, BuildFromProductsRequestAir, BuildFromProductsRequestAirSearch, BuildFromProductsRequestAirChange",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductCriteriaAir": {
        "required": [
          "SpecificFlightCriteria",
          "sequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductCriteriaAir"
          },
          "sequence": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Product criteria air sequence",
            "format": "int32",
            "example": 1
          },
          "SpecificFlightCriteria": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificFlightCriteria"
            }
          }
        }
      },
      "SpecificFlightCriteria": {
        "required": [
          "carrier",
          "departureDate",
          "flightNumber",
          "from",
          "segmentSequence",
          "to"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SpecificFlightCriteria"
          },
          "carrier": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "Carrier",
            "example": "BA"
          },
          "flightNumber": {
            "pattern": "[0-9]{1,4}[A-Z]?|OPEN|ARNK",
            "type": "string",
            "description": "Flight Number",
            "example": "980"
          },
          "departureDate": {
            "type": "string",
            "description": "date of departure",
            "format": "date"
          },
          "departureTime": {
            "pattern": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$",
            "type": "string",
            "description": "The departure time in local timezone",
            "example": "68400"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Arrival date",
            "format": "date"
          },
          "arrivalTime": {
            "pattern": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$",
            "type": "string",
            "description": "The arrival time in local timezone",
            "example": "80100"
          },
          "from": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "From Airport Code IATA",
            "example": "LHR"
          },
          "to": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "to Airpor Code IATA",
            "example": "PAR"
          },
          "cabin": {
            "$ref": "#/components/schemas/CabinAirEnum"
          },
          "classOfService": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]{1,2})",
            "type": "string",
            "description": "The class of service",
            "example": "F"
          },
          "brandTier": {
            "type": "integer",
            "description": "Brand tier",
            "format": "int32",
            "example": 2
          },
          "segmentSequence": {
            "type": "integer",
            "description": "Segment sequence",
            "format": "int32",
            "example": 1
          },
          "AvailabilitySourceCode": {
            "$ref": "#/components/schemas/AvailabilitySourceCodeENUM"
          },
          "ContentSource": {
            "$ref": "#/components/schemas/ContentSourceEnum"
          },
          "boundFlightsInd": {
            "type": "boolean",
            "description": "if true indicates that the flight availability was polled (availability check) using connecting segments. If false, flights were polled as point to point segments.",
            "example": true
          }
        }
      },
      "AvailabilitySourceCodeENUM": {
        "type": "string",
        "description": "A code representing the source of the flight availability",
        "example": "Z",
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "S",
          "T",
          "U",
          "X",
          "Y",
          "Z"
        ]
      },
      "CatalogOfferingsQueryAncillaries": {
        "required": [
          "@type",
          "AncillaryOfferings"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsQueryAncillaries"
          },
          "AncillaryOfferings": {
            "$ref": "#/components/schemas/AncillaryOfferings"
          }
        },
        "description": "Discriminator class CatalogOfferingsQueryAncillaries only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AncillaryOfferings": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AncillaryOfferingsBuildFromReservationWorkbench"
          },
          "includeUnsellableAncillariesInd": {
            "type": "boolean",
            "description": "If true, the response will include unsellable ancillary options",
            "example": true
          }
        },
        "description": "Discriminator classes AncillaryOfferingsBuildFromCatalogOfferings, AncillaryOfferingsBuildFromCatalogProductOfferings, AncillaryOfferingsBuildFromOfferList, AncillaryOfferingsBuildFromOffer, AncillaryOfferingsBuildFromReservationWorkbench",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsAncillaryListResponseWrapper": {
        "properties": {
          "CatalogOfferingsAncillaryListResponse": {
            "$ref": "#/components/schemas/CatalogOfferingsAncillaryListResponse"
          }
        }
      },
      "CatalogOfferingsAncillaryListResponse": {
        "properties": {
          "CatalogOfferingsID": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogOfferings"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CatalogOfferingsQuerySeatAvailability": {
        "required": [
          "@type",
          "SeatAvailabilityOfferings"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CatalogOfferingsQuerySeatAvailability"
          },
          "SeatAvailabilityOfferings": {
            "$ref": "#/components/schemas/SeatAvailabilityOfferings"
          }
        },
        "description": "Discriminator class CatalogOfferingsQuerySeatAvailability only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "SeatAvailabilityOfferings": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SeatAvailabilityOfferings"
          }
        },
        "description": "Discriminator classes SeatAvailabilityOfferingsBuildFromCatalogOfferings, SeatAvailabilityOfferingsBuildFromCatalogProductOfferings, SeatAvailabilityOfferingsBuildFromOffer, SeatAvailabilityOfferingsBuildFromOfferList, SeatAvailabilityOfferingsBuildFromProducts, SeatAvailabilityOfferingsBuildFromReservationWorkbench",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TicketChangeEligibilityListResponseWrapper": {
        "properties": {
          "TicketChangeEligibilityListResponse": {
            "$ref": "#/components/schemas/TicketChangeEligibilityListResponse"
          }
        }
      },
      "TicketChangeEligibilityListResponse": {
        "properties": {
          "TicketChangeEligibility": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketChangeEligibility"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "TicketChangeEligibility": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TicketChangeEligibilityID"
          },
          {
            "properties": {
              "exchangeable": {
                "$ref": "#/components/schemas/AllSomeNoneEnum"
              },
              "refundable": {
                "$ref": "#/components/schemas/AllSomeNoneEnum"
              },
              "Penalties": {
                "$ref": "#/components/schemas/Penalties"
              },
              "PassengerTypeCode": {
                "maxLength": 5,
                "minLength": 3,
                "pattern": "([a-zA-Z0-9]{3,5})",
                "type": "string",
                "description": "Pessanger Type Code",
                "example": "ADT"
              },
              "automationNotSupportedInd": {
                "type": "boolean",
                "description": "automation process not supported for this eligibility"
              }
            }
          }
        ]
      },
      "TicketChangeEligibilityID": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketChangeEligibility"
          },
          "objID": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "AllSomeNoneEnum": {
        "type": "string",
        "description": "Used to indicate if all, some, or none of the ticket can be exchanged or         refunded",
        "enum": [
          "All",
          "Some",
          "None"
        ]
      },
      "Penalties": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "Penalties"
          },
          "Change": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "Cancel": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cancel"
            }
          },
          "Waiver": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaiverEnum"
            }
          },
          "PenaltySourceCode": {
            "$ref": "#/components/schemas/PenaltySourceCode"
          },
          "PassengerTypeCodes": {
            "type": "array",
            "description": "The passenger type codes that this penalty applies to",
            "example": [
              "CHD",
              "UMNR",
              "CNN"
            ],
            "items": {
              "maxLength": 5,
              "minLength": 3,
              "pattern": "([a-zA-Z0-9]{3,5})",
              "type": "string"
            }
          },
          "involuntaryInd": {
            "type": "boolean",
            "description": "Penalties apply for involuntary changes initiated by the airline",
            "example": true
          },
          "applyLeastRestrictiveInd": {
            "type": "boolean",
            "description": "if true, apply the least restrictive of the rule hierarchy"
          },
          "ruleNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The rule number associated to this fare rule info",
            "example": "D38"
          },
          "tariffNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The tariff number associated to this fare rule info",
            "example": "01634"
          }
        }
      },
      "Change": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ChangePermitted"
          },
          "ProductRefs": {
            "type": "array",
            "description": "The productRefs this change or cancel applies to",
            "example": [
              "baloon",
              "food",
              "accesories"
            ],
            "items": {
              "type": "string"
            }
          },
          "SegmentSequence": {
            "type": "array",
            "description": "The SegmentSequence of the product this change or cancel applies to",
            "example": [
              34,
              56,
              678,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "description": "Discriminator classes ChangePermitted, ChangeNotPermitted or ChangeIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Cancel": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CancelPermitted"
          },
          "ProductRefs": {
            "type": "array",
            "description": "The productRefs this change or cancel applies to",
            "example": [
              "baloon",
              "food",
              "accesories"
            ],
            "items": {
              "type": "string"
            }
          },
          "SegmentSequence": {
            "type": "array",
            "description": "The SegmentSequence of the product this change or cancel applies to",
            "example": [
              34,
              56,
              678,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "description": "Discriminator classes CancelPermitted, CancelNotPermitted or CancelIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "WaiverEnum": {
        "type": "string",
        "description": "Type of Waiver like Death of Pessanger,illness Of Passenger, Death of Immediate Family Member  etc",
        "example": "TicketUpgrade",
        "enum": [
          "DeathOfPassenger",
          "IllnessOfPassenger",
          "DeathOfImmediateFamilyMember",
          "IllnessOfImmediateFamilyMember",
          "TicketUpgrade",
          "ScheduleChange"
        ]
      },
      "PenaltySourceCode": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "Properties of the penalty"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "Penalty source code context",
            "example": "Context of the penalty source"
          }
        }
      },
      "OfferQueryBuildFromCatalogProductOfferings": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromCatalogProductOfferings"
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          },
          "BuildFromCatalogProductOfferingsRequest": {
            "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
          },
          "MaxNumberOfUpsellsToReturn": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "description": "Discriminator class OfferQueryBuildFromCatalogProductOfferings only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferListResponseWrapper": {
        "properties": {
          "OfferListResponse": {
            "$ref": "#/components/schemas/OfferListResponse"
          }
        }
      },
      "OfferListResponse": {
        "properties": {
          "OfferID": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "OfferID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Offer"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "offer_1"
          },
          "offerRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "offer_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes for Air Price are OfferID, Offer, and OfferUpsell. Discriminator classes for Reservation and ReservationWorkbenche are OfferID, Offer, OfferModify and OfferUpsell. Discriminator classes for Hotel Rules are OfferID and Offer",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferQueryBuildFromProducts": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromProducts"
          },
          "BuildFromProductsRequest": {
            "$ref": "#/components/schemas/BuildFromProductsRequest"
          },
          "CabinPreference": {
            "$ref": "#/components/schemas/CabinPreference"
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          },
          "FareRuleType": {
            "$ref": "#/components/schemas/FareRuleEnum"
          },
          "FareRuleCategory": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareRuleCategoryEnum"
            }
          },
          "lowFareFinderInd": {
            "type": "boolean",
            "description": "If present and true, this is a low fare finder request",
            "example": true
          },
          "returnBrandedFaresInd": {
            "type": "boolean",
            "description": "If present and true, branded fares are returned",
            "example": true
          },
          "reCheckInventoryInd": {
            "type": "boolean",
            "description": "If present and true, then the host system will perform a sell inventory check.",
            "example": true
          },
          "validateInventoryInd": {
            "type": "boolean",
            "description": "If true, the flight inventory will be checked during the price step",
            "example": true
          },
          "MaxNumberOfUpsellsToReturn": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "description": "Discriminator class OfferQueryBuildFromProducts only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferQueryBuildFromCatalogOfferings": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromCatalogOfferings"
          },
          "BuildFromCatalogOfferingsRequest": {
            "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
          },
          "CabinPreference": {
            "$ref": "#/components/schemas/CabinPreference"
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          },
          "FareRuleType": {
            "$ref": "#/components/schemas/FareRuleEnum"
          },
          "FareRuleCategory": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareRuleCategoryEnum"
            }
          },
          "lowFareFinderInd": {
            "type": "boolean",
            "description": "If present and true, this is a low fare finder request",
            "example": true
          },
          "returnBrandedFaresInd": {
            "type": "boolean",
            "description": "If present and true, branded fares are returned",
            "example": true
          },
          "reCheckInventoryInd": {
            "type": "boolean",
            "description": "If present and true, then the host system will perform a sell inventory check.",
            "example": true
          },
          "validateInventoryInd": {
            "type": "boolean",
            "description": "If true, the flight inventory will be checked during the price step",
            "example": true
          }
        },
        "description": "Discriminator class OfferQueryBuildFromCatalogOfferings only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromCatalogOfferingsRequest": {
        "required": [
          "@type",
          "CatalogOfferingIdentifier",
          "CatalogOfferingsIdentifier",
          "ProductIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromCatalogOfferingsRequestAir"
          },
          "CatalogOfferingsIdentifier": {
            "$ref": "#/components/schemas/CatalogOfferingsIdentifier"
          },
          "CatalogOfferingIdentifier": {
            "$ref": "#/components/schemas/CatalogOfferingIdentifier"
          },
          "ProductIdentifier": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "example": [
              "p1",
              "p2"
            ],
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "AncillaryOfferingIdentifier": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncillaryOfferingIdentifier"
            }
          }
        },
        "description": "Discriminator classes BuildFromCatalogOfferingsRequest, BuildFromCatalogOfferingsRequestAir, BuildFromCatalogOfferingsRequestAirChange",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CatalogOfferingsIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "CatalogOfferings_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "CatalogOfferingIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "co1"
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "co1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "AncillaryOfferingIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "AN1"
          },
          "CatalogOfferingRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message",
            "example": "CO1"
          },
          "AncillaryOfferingRef": {
            "type": "string",
            "example": "AN1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "OfferQueryBuildAncillaryOffersFromCatalogOfferings": {
        "required": [
          "@type",
          "BuildAncillaryOffersFromCatalogOfferings"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildAncillaryOffersFromCatalogOfferings"
          },
          "BuildAncillaryOffersFromCatalogOfferings": {
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BuildAncillaryOffersFromCatalogOfferings"
            }
          }
        },
        "description": "Discriminator class OfferQueryBuildAncillaryOffersFromCatalogOfferings only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildAncillaryOffersFromCatalogOfferings": {
        "required": [
          "@type",
          "CatalogOfferingIdentifier",
          "CatalogOfferingsIdentifier",
          "ProductIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildAncillaryOffersFromCatalogOfferings"
          },
          "CatalogOfferingsIdentifier": {
            "$ref": "#/components/schemas/CatalogOfferingsIdentifier"
          },
          "CatalogOfferingIdentifier": {
            "$ref": "#/components/schemas/CatalogOfferingIdentifier"
          },
          "ProductIdentifier": {
            "$ref": "#/components/schemas/ProductIdentifier"
          },
          "Quantity": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The quantity of ancillaries to be included in the Offer",
            "format": "int32",
            "example": 3
          },
          "TravelerIdentifierRef": {
            "$ref": "#/components/schemas/TravelerIdentifierRef"
          },
          "CatalogOfferingsAncillaryListIdentifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "includeUnsellableAncillariesInd": {
            "type": "boolean",
            "description": "If true, the response will include unsellable ancillary options",
            "example": true
          }
        },
        "description": "Discriminator classes BuildAncillaryOffersFromCatalogOfferings or BuildAncillaryOffersFromCatalogOfferingsAirSeat",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandQueryBuildCompleteInfoFromOffer": {
        "required": [
          "@type",
          "OfferIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BrandQueryBuildCompleteInfoFromOffer"
          },
          "OfferIdentifier": {
            "$ref": "#/components/schemas/OfferIdentifier"
          },
          "ProductIdentifier": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandListResponseWrapper": {
        "properties": {
          "BrandListResponse": {
            "$ref": "#/components/schemas/BrandListResponse"
          }
        }
      },
      "BrandListResponse": {
        "properties": {
          "BrandID": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandCompleteInfo"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "BrandCompleteInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Brand"
          },
          {
            "required": [
              "BrandText"
            ],
            "properties": {
              "BrandText": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BrandText"
                }
              }
            }
          }
        ]
      },
      "Brand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandID"
          },
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "The name of the brand",
                "example": "Main Cabin Extra"
              },
              "tier": {
                "type": "integer",
                "description": "The brand tier",
                "format": "int32",
                "example": 2
              },
              "shelfNumbers": {
                "type": "array",
                "description": "ATPCO shelf number",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "code": {
                "maxLength": 32,
                "type": "string",
                "description": "The ATPCO Brand Code",
                "example": "REFMAIN"
              },
              "BrandAttribute": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BrandAttribute"
                }
              },
              "AdditionalBrandAttribute": {
                "maxItems": 15,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdditionalBrandAttribute"
                }
              },
              "ImageURL": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "BrandAttribute": {
        "required": [
          "@type",
          "classification",
          "inclusion"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BrandAttribute"
          },
          "classification": {
            "$ref": "#/components/schemas/BrandClassificationEnum"
          },
          "inclusion": {
            "$ref": "#/components/schemas/BrandInclusionEnum"
          },
          "ImageURL": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matchedAttributeInd": {
            "type": "boolean",
            "description": "if true, this is a matched attribute."
          },
          "groupCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "BG"
          },
          "subGroupCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "CY"
          },
          "subCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "08A"
          }
        },
        "description": "Discriminator classes BrandAttribute or BrandAttributeCompleteInfo",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandInclusionEnum": {
        "type": "string",
        "description": "The indicator as to how the brand and the product are associated.",
        "enum": [
          "Included",
          "Chargeable",
          "Not Offered"
        ]
      },
      "AdditionalBrandAttribute": {
        "required": [
          "@type",
          "Classification",
          "Inclusion"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdditionalBrandAttribute"
          },
          "Classification": {
            "maxLength": 512,
            "type": "string",
            "description": "The Travelport classification used for categories of ancillaries"
          },
          "Inclusion": {
            "$ref": "#/components/schemas/BrandInclusionEnum"
          },
          "ImageURL": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matchedAttributeInd": {
            "type": "boolean",
            "description": "If true, this is a matched attribute"
          },
          "groupCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "BG"
          },
          "subGroupCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "CY"
          },
          "subCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "08A"
          }
        },
        "description": "Discriminator classes AdditionalBrandAttribute or AdditionalBrandAttributeCompleteInfo",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandText": {
        "required": [
          "@type",
          "TextFormatted"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BrandText"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id"
          },
          "target": {
            "$ref": "#/components/schemas/BrandTargetEnum"
          },
          "TextFormatted": {
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextFormatted"
            }
          }
        },
        "description": "Discriminator classes BrandText or BrandTextDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BrandTargetEnum": {
        "type": "string",
        "description": "The audience targeted for the brand information",
        "enum": [
          "Strapline",
          "MarketingAgent",
          "MarketingConsumer",
          "External",
          "Short",
          "Agent",
          "Consumer",
          "Upsell"
        ]
      },
      "TextFormatted": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Formatted text"
          },
          "language": {
            "type": "string",
            "description": "The language in which the text is provided.",
            "example": "English"
          },
          "textFormat": {
            "$ref": "#/components/schemas/TextFormatEnum"
          }
        },
        "description": "Provides text and indicates whether it is formatted or not."
      },
      "TextFormatEnum": {
        "type": "string",
        "description": "Describes the format of text such as plain text or html",
        "enum": [
          "PlainText",
          "HTML"
        ]
      },
      "FareRuleListResponseWrapper": {
        "properties": {
          "FareRuleListResponse": {
            "$ref": "#/components/schemas/FareRuleListResponse"
          }
        }
      },
      "FareRuleListResponse": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "FareRuleListResponse"
          },
          "FareRule": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareRule"
            }
          },
          "transactionId": {
            "type": "string",
            "description": "Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId."
          },
          "traceId": {
            "type": "string",
            "description": "Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId."
          },
          "Result": {
            "$ref": "#/components/schemas/Result"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "ReferenceList": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceList"
            }
          }
        }
      },
      "FareRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FareRuleID"
          },
          {
            "required": [
              "Flight"
            ],
            "properties": {
              "ruleNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The rule number of fare rule",
                "example": "34",
                "deprecated": true
              },
              "tariffNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "Fare rule tarrif number",
                "example": "56",
                "deprecated": true
              },
              "Flight": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightID"
                }
              }
            }
          }
        ]
      },
      "FareRuleID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FareRuleText"
          },
          "id": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes FareRuleID, FareRuleStructured or FareRuleText",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FlightID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightDetail"
          },
          "id": {
            "type": "string",
            "description": "Internal ID",
            "example": "126"
          },
          "FlightRef": {
            "type": "string",
            "description": "Reference to a Flight object eslewhere in the message",
            "example": "pln0845"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes FlightID, Flight or FlightDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationResponseWrapper": {
        "properties": {
          "ReservationResponse": {
            "$ref": "#/components/schemas/ReservationResponse"
          }
        }
      },
      "ReservationResponse": {
        "properties": {
          "Reservation": {
            "$ref": "#/components/schemas/ReservationID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ReservationID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Reservation"
          },
          "id": {
            "type": "string",
            "description": "Internal ID",
            "example": "REF12873"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes ReservationID, Reservation or ReservationDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationQueryCommitReservation": {
        "properties": {
          "Notification": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "scheduleChangeAcceptedInd": {
            "type": "boolean",
            "description": "if true, the schedule change is accepted by the consumer"
          },
          "errorWhenOfferPriceCancelledInd": {
            "type": "boolean",
            "description": "If true, and the OfferPrice is invalidated, error will be returned and Reservation commit will not be processed"
          },
          "scheduleChangeReprice": {
            "$ref": "#/components/schemas/ScheduleChangeRepriceEnum"
          },
          "ReceivedFrom": {
            "maxLength": 61,
            "type": "string",
            "description": "Override the received from field with custom data. Field is stored in Reservation history."
          }
        }
      },
      "Notification": {
        "properties": {
          "QueueNumber": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueNumber"
            }
          },
          "Date": {
            "type": "string",
            "description": "The notification date is equivalent to ticket time limit and will place the Reservation on the defined queue for the date specified. Sending a new notificiation date at commit step will update the existing notificationDate. Sending 000/00/00 will delete an existing notificationDate.",
            "format": "date"
          }
        }
      },
      "QueueNumber": {
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "category": {
            "maxLength": 3,
            "pattern": "([0-9a-zA-Z]+)?",
            "type": "string",
            "description": "The Queue Category",
            "example": "CAE"
          },
          "subCategory": {
            "maxLength": 32,
            "type": "string",
            "description": "Date range subCategory",
            "example": "Date Range sub-category"
          },
          "overridePCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "Use PCC to override to queue the Reservation to another PCC",
            "example": "0XS4"
          }
        },
        "description": "The queue number"
      },
      "ScheduleChangeRepriceEnum": {
        "type": "string",
        "enum": [
          "RetainOfferPrice",
          "AcceptOfferPriceDifference"
        ]
      },
      "ReservationQueryDivide": {
        "required": [
          "ReservationIdentifier",
          "TravelerIdentifier"
        ],
        "properties": {
          "ReservationIdentifier": {
            "$ref": "#/components/schemas/ReservationIdentifier"
          },
          "TravelerIdentifier": {
            "maxItems": 9,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifier"
            }
          },
          "InfantTravelerAssociation": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfantTravelerAssociation"
            }
          }
        }
      },
      "TravelerIdentifier": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerIdentifier"
          },
          "id": {
            "type": "string"
          },
          "TravelerRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "InfantTravelerAssociation": {
        "required": [
          "@type",
          "InfantTravelerID",
          "TravelerID"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "InfantTravelerAssociation"
          },
          "TravelerID": {
            "$ref": "#/components/schemas/Identifier"
          },
          "InfantTravelerID": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes InfantTravelerAssociation only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationListResponseWrapper": {
        "properties": {
          "ReservationResponse": {
            "$ref": "#/components/schemas/ReservationResponse"
          }
        }
      },
      "ReservationQueryBuildWrapper": {
        "properties": {
          "ReservationQueryBuild": {
            "$ref": "#/components/schemas/ReservationQueryBuild"
          }
        }
      },
      "ReservationQueryBuild": {
        "required": [
          "@type",
          "ReservationBuild"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationQueryBuild"
          },
          "ReservationBuild": {
            "$ref": "#/components/schemas/ReservationBuild"
          }
        },
        "description": "Discriminator classes ReservationQueryBuild only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationBuild": {
        "required": [
          "@type",
          "Traveler"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationBuildFromCatalogOfferings"
          },
          "Traveler": {
            "maxItems": 9,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerID"
            }
          },
          "FormOfPayment": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormOfPaymentID"
            }
          },
          "Payment": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentID"
            }
          },
          "ReservationComment": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationCommentID"
            }
          },
          "PrimaryContact": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryContactID"
            }
          },
          "SpecialService": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialServiceID"
            }
          },
          "Accounting": {
            "$ref": "#/components/schemas/AccountingID"
          },
          "DocumentOverrides": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentOverridesID"
            }
          },
          "Preference": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreferenceID"
            }
          },
          "ReceiptConfirmation": {
            "$ref": "#/components/schemas/ReceiptConfirmation"
          },
          "TravelAgency": {
            "$ref": "#/components/schemas/TravelAgency"
          }
        },
        "description": "Discriminator classes ReservationBuildFromCatalogOffering, ReservationBuildFromCatalogOfferings, ReservationBuildfromCatalogOfferingsAir,  ReservationBuildFromCatalogProductOfferings, ReservationBuildFromProducts, ReservationBuildVehicle",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerDetail"
          },
          "id": {
            "type": "string"
          },
          "TravelerRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes TravelerID or Traveler",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FormOfPaymentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FormOfPaymentPaymentCard"
          },
          "id": {
            "type": "string"
          },
          "FormOfPaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes FormOfPaymentID, FormOfPaymentBSP, FormOfPaymentCash, FormOfPaymentDocument, FormOfPaymentFlightPass, FormOfPaymentForfeit, FormOfPaymentInvoice, FormOfPaymentPaymentCard, FormOfPaymentVirtualPaymentAccount, FormOfPaymentWaiverCode",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PaymentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Payment"
          },
          "id": {
            "type": "string"
          },
          "PaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes PaymentID or Payment",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationCommentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationComment"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object."
          }
        },
        "description": "Discriminator classes ReservationCommentID or ReservationComment",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PrimaryContactID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PrimaryContact"
          },
          "id": {
            "type": "string"
          }
        },
        "description": "Discriminator classes PrimaryContactID or PrimaryContact",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "SpecialServiceID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SpecialService"
          },
          "id": {
            "type": "string",
            "description": "Internal Id"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes SpecialServiceID, SpecialServiceBassinet, SpecialServiceBlind, SpecialServiceDeaf, SpecialServiceDPNA, SpecialServiceMeal, SpecialServiceRequirement, SpecialServiceUnaccompaniedMinor, SpecialServiceWheelchairAirlineSupplied, SpecialServiceWheelchairTravelerSupplied",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AccountingID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Accounting"
          },
          "id": {
            "type": "string"
          },
          "AccountingRef": {
            "type": "string",
            "description": "Accounting reference"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes AccountingID or Accounting",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DocumentOverridesID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DocumentOverrides"
          },
          "id": {
            "type": "string",
            "description": "The reporting number."
          },
          "DocumentOverridesRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes DocumentOverridesID or DocumentOverrides",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PreferenceID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Preference"
          },
          "id": {
            "type": "string"
          }
        },
        "description": "Discriminator classes PreferenceID, Preference, PreferenceAirSeat or PreferenceRailSeat",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReceiptConfirmation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Receipt"
          },
          {
            "properties": {
              "Confirmation": {
                "$ref": "#/components/schemas/Confirmation"
              },
              "SegmentSequenceList": {
                "type": "array",
                "description": "The segmentSequenceList the ReceiptConfirmation applies to",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "Receipt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceiptID"
          },
          {
            "properties": {
              "dateTime": {
                "type": "string",
                "description": "Receipt date time",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "OfferRef": {
                "type": "array",
                "description": "List of offers which links with the receipt",
                "items": {
                  "type": "string"
                }
              },
              "ProductRef": {
                "type": "string",
                "description": "Reference of product"
              }
            }
          }
        ]
      },
      "ReceiptID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReceiptConfirmation"
          },
          "id": {
            "type": "string",
            "description": "The verification number.",
            "example": "3493289238"
          },
          "ReceiptRef": {
            "type": "string",
            "example": "6773 2389 2239 2832"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes ReceiptID, ReceiptConfirmation, ReceiptConfirmationDivide, ReceiptCancellation, ReceiptPayment",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Confirmation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ConfirmationHold"
          }
        },
        "description": "Discriminator classes ConfirmationHold or ConfirmationVehicle",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelAgency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelAgencyID"
          },
          {
            "required": [
              "OrganizationName"
            ],
            "properties": {
              "organizationType": {
                "$ref": "#/components/schemas/OrganizationTypeEnum"
              },
              "OrganizationName": {
                "$ref": "#/components/schemas/CompanyName"
              },
              "CorporateCode": {
                "maxLength": 32,
                "type": "string",
                "description": "A reference assigned by the Travel Agency to identify the corporate organization",
                "example": "Air Agency"
              },
              "ProfileName": {
                "maxItems": 200,
                "type": "array",
                "items": {
                  "maxLength": 64,
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "TravelAgencyID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelAgencyDetail"
          },
          "id": {
            "type": "string",
            "description": "Simple xsd id, not for external use",
            "example": "2"
          },
          "TravelOrganizationRef": {
            "type": "string",
            "description": "An organization that has a name and a structure and members and directly works in the travel industry",
            "example": "TravelAgency_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes TravelAgencyID, TravelAgency or TravelAgencyDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OrganizationTypeEnum": {
        "type": "string",
        "description": "The type of organization such as an Agency, Branch, Company, Supplier, Provider",
        "enum": [
          "TravelAgency",
          "AgencyBranch",
          "LoyaltyProgram",
          "IdDocumentIssuer",
          "TravelSupplier",
          "TravelProvider",
          "Regulatory"
        ]
      },
      "CompanyName": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Use this id to internally identify this company in NextSteps",
            "example": "2"
          },
          "division": {
            "maxLength": 32,
            "type": "string",
            "description": "The division name or ID with which the contact is associated",
            "example": "Travel Division"
          },
          "department": {
            "maxLength": 32,
            "type": "string",
            "description": "The department name or ID with which the contact is associated",
            "example": "Adventure department"
          },
          "shortName": {
            "maxLength": 32,
            "type": "string",
            "description": "Used to provide the company common name",
            "example": "Aventure Inc"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies a company by the company code",
            "example": "AI"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies the context of the identifying code,such as DUNS,IATA or internal code",
            "example": "ISO"
          },
          "systemOfRecord": {
            "type": "array",
            "description": "The system(s) that maintain the data",
            "items": {
              "maxLength": 5,
              "minLength": 2,
              "pattern": "([a-zA-Z0-9]{2,5})",
              "type": "string",
              "example": "MB"
            }
          }
        },
        "description": "Identifies a company by name."
      },
      "ReservationQuerySearchCriteriaReservation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationQuerySearchCriteriaReservation"
          },
          "PersonName": {
            "$ref": "#/components/schemas/PersonName"
          },
          "DepartureDate": {
            "type": "string",
            "description": "Local date of flight departure",
            "format": "date",
            "example": "2022-03-03"
          },
          "DepartureDateRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "Departure": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "The city or airport code a flight is departing from in the Reservation",
            "example": "ATL"
          },
          "Arrival": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "The city or airport code a flight is arriving at in the Reservation",
            "example": "DEN"
          },
          "detailViewInd": {
            "type": "boolean",
            "description": "If true, ReservationDetail will be returned",
            "example": true
          }
        },
        "description": "Discriminator classes ReservationQuerySearchCriteriaReservation",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PersonName": {
        "required": [
          "@type",
          "Surname"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PersonNameDetail"
          },
          "Prefix": {
            "maxLength": 10,
            "type": "string",
            "description": "Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)",
            "example": "Mr"
          },
          "Given": {
            "maxLength": 30,
            "type": "string",
            "description": "Given name, first name or names.",
            "example": "John"
          },
          "Middle": {
            "maxLength": 30,
            "type": "string",
            "description": "The middle name of the person name.",
            "example": "Erick"
          },
          "Surname": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Family name, last name.",
            "example": "Smith"
          }
        },
        "description": "Discriminator classes PersonName or PersonNameDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DateRange": {
        "required": [
          "end",
          "start"
        ],
        "properties": {
          "start": {
            "type": "string",
            "description": "Specifies the start date for an event, such as a booking",
            "format": "date",
            "example": "2023-03-03"
          },
          "end": {
            "type": "string",
            "description": "Specifies the end date an event, such as a booking",
            "format": "date",
            "example": "2023-03-03"
          }
        },
        "description": "Specifies the begin and end date of an event"
      },
      "ReceiptListResponseWrapper": {
        "properties": {
          "ReceiptListResponse": {
            "$ref": "#/components/schemas/ReceiptListResponse"
          }
        }
      },
      "ReceiptListResponse": {
        "properties": {
          "ReceiptID": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Receipt"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ReceiptQueryBuildFromPayment": {
        "properties": {
          "Payment": {
            "$ref": "#/components/schemas/PaymentID"
          }
        }
      },
      "ReservationQueryClientProfileMove": {
        "required": [
          "ClientProfileMoveHeaderModifiers"
        ],
        "properties": {
          "ClientProfileMoveHeaderModifiers": {
            "$ref": "#/components/schemas/ClientProfileMoveHeaderModifiers"
          },
          "ClientProfileMoveLineModifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientProfileMoveLineModifiers"
            }
          },
          "ClientProfileMoveTravelerFlightModifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientProfileMoveTravelerFlightModifiers"
            }
          }
        }
      },
      "ClientProfileMoveHeaderModifiers": {
        "required": [
          "BusinessTitle"
        ],
        "properties": {
          "BusinessTitle": {
            "maxLength": 21,
            "type": "string",
            "description": "The name of the corporation/business account the profile is associated to",
            "example": "ABCCORP"
          },
          "PersonalTitle": {
            "maxLength": 21,
            "type": "string",
            "description": "The name of the Traveler the profile is associated to",
            "example": "SMITH/J"
          },
          "MultipleIndicator": {
            "type": "boolean",
            "description": "If true, Indicates the move is a multiple level Client File  move. For example, you can move only a Personal File (single), or you can move the Personal, Business, and Agency Files (multiple)."
          },
          "SelectIndicator": {
            "type": "boolean",
            "description": "If true, Indicates this is a select line move. If false or blank move all lines"
          },
          "MergeIndicator": {
            "type": "boolean",
            "description": "Indicates how any associated TravelScreen Preferences should be activated at the time of the Client File Move. If true, merged preferences will be moved. If false of blank, normal preferences will be moved."
          },
          "RelatedMoveIndicator": {
            "maxLength": 1,
            "type": "string",
            "description": "Indicates the passenger and segment relation for the related move. Value set to Y indicates relation move required. Value set to P indicates Passenger Number is to be used when moving Secure Flight data.",
            "example": "Y"
          },
          "ProfilePCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "If profile PCC is included as a modifier, this will override the requesting PCC"
          }
        }
      },
      "ClientProfileMoveLineModifiers": {
        "required": [
          "LineNumber"
        ],
        "properties": {
          "LineNumber": {
            "type": "integer",
            "description": "Line Number",
            "example": 3
          },
          "AppendedData": {
            "maxLength": 58,
            "type": "string",
            "description": "Data to be appended to the above Client File line",
            "example": "15MAY"
          }
        }
      },
      "ClientProfileMoveTravelerFlightModifiers": {
        "required": [
          "TravelerRef"
        ],
        "properties": {
          "TravelerRef": {
            "type": "string",
            "description": "The Traveler ref to associate related lines of the client profile",
            "example": "t1"
          },
          "FlightRef": {
            "type": "string",
            "description": "The Flight ref to associate the related lines of the client profile",
            "example": "s1"
          }
        }
      },
      "OfferQueryBuildFromShoppingCartProducts": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromShoppingCartProducts"
          },
          "PricingModifiersAir": {
            "$ref": "#/components/schemas/PricingModifiersAir"
          },
          "ProductIdentifier": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          },
          "CabinPreference": {
            "$ref": "#/components/schemas/CabinPreference"
          },
          "CustomResponseModifiersAir": {
            "$ref": "#/components/schemas/CustomResponseModifiersAir"
          },
          "inhibitBrandContentInd": {
            "type": "boolean",
            "description": "If true, brand information will not be returned"
          },
          "lowFareFinderInd": {
            "type": "boolean",
            "description": "If true, a new Offer will be returned with the lowest fare available  regardless of booking class. The flight products will NOT be rebooked"
          },
          "lowFareFindAndRebookInd": {
            "type": "boolean",
            "description": "If true, a new Offer will replace the referenced Offer with the lowest available fare. Flight products are rebooked."
          },
          "validateInventoryInd": {
            "type": "boolean",
            "description": "If true, the inventory will be checked using best availability option for the carrier when used in conjunction with lowFareFinderInd"
          },
          "MaxNumberOfUpsellsToReturn": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "description": "Discriminator class OfferQueryBuildfromShoppingCartProducts",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferQueryBuildFromOffer": {
        "required": [
          "@type",
          "BuildFromOffer"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromOffer"
          },
          "BuildFromOffer": {
            "$ref": "#/components/schemas/BuildFromOffer"
          },
          "CabinPreference": {
            "$ref": "#/components/schemas/CabinPreference"
          },
          "CustomResponseModifiersAir": {
            "$ref": "#/components/schemas/CustomResponseModifiersAir"
          },
          "PricingModifiersAir": {
            "$ref": "#/components/schemas/PricingModifiersAir"
          },
          "priceHistoricalOfferInd": {
            "type": "boolean",
            "description": "If true, the new Offer should be priced using the original Offer create date."
          },
          "priceHistoricalTaxInd": {
            "type": "boolean",
            "description": "if true, the taxes in the new Offer should be priced using the original Offer create date."
          },
          "priceHistoricalFeeInd": {
            "type": "boolean",
            "description": "if true, the fees in the new Offer should be priced using the original Offer create date."
          },
          "inhibitBrandContentInd": {
            "type": "boolean",
            "description": "If true, brand information will not be returned"
          },
          "lowFareFinderInd": {
            "type": "boolean",
            "description": "If true, a new Offer will be returned with the lowest fare available  regardless of booking class. The flight products will NOT be rebooked"
          },
          "lowFareFindAndRebookInd": {
            "type": "boolean",
            "description": "If true, a new Offer will replace the referenced Offer with the lowest available fare. Flight products are rebooked."
          },
          "validateInventoryInd": {
            "type": "boolean",
            "description": "If true, the inventory will be checked using best availability option for the carrier when used in conjunction with lowFareFinderInd"
          },
          "MaxNumberOfUpsellsToReturn": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "description": "Discriminator class OfferQueryBuildFromOffer only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromOffer": {
        "required": [
          "@type",
          "OfferIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromOffer"
          },
          "OfferIdentifier": {
            "$ref": "#/components/schemas/OfferIdentifier"
          },
          "ProductIdentifier": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "PaymentCriteria": {
            "$ref": "#/components/schemas/PaymentCriteria"
          }
        },
        "description": "Discriminator classes BuildFromOffer and BuildFromOfferAir",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferResponseWrapper": {
        "properties": {
          "OfferResponse": {
            "$ref": "#/components/schemas/OfferResponse"
          }
        }
      },
      "OfferResponse": {
        "properties": {
          "Offer": {
            "$ref": "#/components/schemas/OfferID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "OfferQueryBuildFromOffers": {
        "required": [
          "@type",
          "RepriceOffers"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildFromOffers"
          },
          "RepriceOffers": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepriceOffers"
            }
          }
        },
        "description": "Discriminator class OfferQueryBuildFromOffers only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RepriceOffers": {
        "required": [
          "@type",
          "BuildFromOffer"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "BuildFromOffer": {
            "$ref": "#/components/schemas/BuildFromOfferAir"
          },
          "CabinPreference": {
            "$ref": "#/components/schemas/CabinPreference"
          },
          "CustomResponseModifiersAir": {
            "$ref": "#/components/schemas/CustomResponseModifiersAir"
          },
          "PricingModifiersAir": {
            "$ref": "#/components/schemas/PricingModifiersAir"
          },
          "priceHistoricalFeeInd": {
            "type": "boolean",
            "description": "if true, the fees in the new Offer should be priced using the original Offer create date."
          },
          "priceHistoricalTaxInd": {
            "type": "boolean",
            "description": "if true, the taxes in the new Offer should be priced using the original Offer create date."
          },
          "priceHistoricalOfferInd": {
            "type": "boolean",
            "description": "If true, the new Offer should be priced using the original Offer create date."
          },
          "lowFareFinderInd": {
            "type": "boolean",
            "description": "If true, a new Offer will be returned with the lowest fare available regardless of booking class. The flight products will NOT be rebooked"
          },
          "lowFareFindAndRebookInd": {
            "type": "boolean",
            "description": "If true, a new Offer will replace the referenced Offer with the lowest available fare. Flight products are rebooked."
          },
          "inhibitBrandContentInd": {
            "type": "boolean",
            "description": "If true, brand information will not be returned"
          },
          "validateInventoryInd": {
            "type": "boolean",
            "description": "If true, the inventory will be checked using best availability option for the carrier when used in conjunction with lowFareFinderInd"
          },
          "MaxNumberOfUpsellsToReturn": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "description": "Discriminator class RepriceOffers only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromOfferAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromOffer"
          },
          {
            "properties": {
              "SegmentSequence": {
                "type": "array",
                "description": "The segmentSequence within the product the action is being requested for. Used when multiple in a product",
                "example": [
                  2,
                  6,
                  8
                ],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "OfferQueryBuildfromOfferList": {
        "required": [
          "@type",
          "BuildFromOfferList"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryBuildfromOfferList"
          },
          "BuildFromOfferList": {
            "$ref": "#/components/schemas/BuildFromOfferList"
          },
          "MaxNumberOfUpsellsToReturn": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "description": "Discriminator class OfferQueryBuildFromOfferList",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromOfferList": {
        "required": [
          "OfferIdentifier",
          "OfferListIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromOfferList"
          },
          "OfferListIdentifier": {
            "maxLength": 128,
            "type": "string",
            "description": "The OfferListIdentifer (GUID) to retrieve the OfferList from cache",
            "example": "A0656EFF-FAF4-456F-B061-0161008D7C4E"
          },
          "OfferIdentifier": {
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferIdentifier"
            }
          },
          "ProductIdentifier": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "SegmentSequence": {
            "type": "integer",
            "description": "The segmentSequence within the product the action is being requested for. Used when multiple exist within a product",
            "format": "int32",
            "example": 1
          }
        }
      },
      "OfferQueryCancelOffer": {
        "required": [
          "@type",
          "BuildFromOffer"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferQueryCancelOffer"
          },
          "BuildFromOffer": {
            "$ref": "#/components/schemas/BuildFromOffer"
          },
          "TravelerIdentifier": {
            "maxItems": 8,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          }
        },
        "description": "Discriminator class OfferQueryCancelOffer only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferTypeENUM": {
        "type": "string",
        "enum": [
          "AgencyCalculatedExchange",
          "AgencyCalculatedRefund"
        ]
      },
      "Offer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferID"
          },
          {
            "required": [
              "Price",
              "Product"
            ],
            "properties": {
              "parentOfferRef": {
                "type": "string",
                "description": "A reference to the Offer this offer is sold in conjunction with",
                "example": "offer_1"
              },
              "offerModifyRef": {
                "type": "string",
                "description": "Reference to the new Offer created as a result of this Offer being subject to a schedule change."
              },
              "Product": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductID"
                }
              },
              "Price": {
                "$ref": "#/components/schemas/Price"
              },
              "TermsAndConditionsFull": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermsAndConditionsFullID"
                }
              },
              "passiveOfferInd": {
                "type": "boolean",
                "description": "If true, the Offer is passive for booking purposes.",
                "example": true
              },
              "scheduleChangeInd": {
                "type": "boolean",
                "description": "If true, this Offer is subject to a schedule change."
              }
            }
          }
        ]
      },
      "TermsAndConditionsFullID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TermsAndConditionsFullAir"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "TC_1"
          },
          "termsAndConditionsRef": {
            "type": "string",
            "description": "Used to reference another instance of this object in the same message.",
            "example": "TC_1"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes for Air Price API are TermsAndConditionsFullAir and TermsAndConditionsFullAncillary. Discriminator class for Hotel Rules and Reservation API is TermsAndConditionsFullHospitality. Discriminator class for Vehicle Rules and Reservation is TermsAndConditionsFullVehicle. Discriminator classes for Reservation and Reservation Workbench APIs are TermsAndConditionsFullAir, TermsAndConditionsFullAncillary, TermsAndConditionsFullHospitality, TermsAndConditionsFullVehicle",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerUpdatableItemsQueryBuildFromTraveler": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerUpdatableItemsQueryBuildFromTraveler"
          },
          "TravelerIdentifier": {
            "maxItems": 100,
            "type": "array",
            "example": [
              "34",
              "65",
              "23",
              "12",
              "22",
              "81"
            ],
            "items": {
              "maxLength": 128,
              "type": "string"
            }
          }
        },
        "description": "Discriminator classes TravelerUpdatableItemsQueryBuildFromTraveler only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerUpdatableItemsListResponseWrapper": {
        "properties": {
          "TravelerUpdatableItemsListResponse": {
            "$ref": "#/components/schemas/TravelerUpdatableItemsListResponse"
          }
        }
      },
      "TravelerUpdatableItemsListResponse": {
        "properties": {
          "TravelerUpdatableItemsID": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerUpdatableItemsID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "TravelerUpdatableItemsID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerUpdatableItems"
          },
          "id": {
            "type": "string",
            "description": "Internally reference xsd id",
            "example": "523"
          },
          "TravelerUpdatableItemsRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes TravelerUpdatableItems only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DocumentOverrides": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentOverridesID"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "$ref": "#/components/schemas/OfferIdentifier"
              },
              "ProductIdentifier": {
                "$ref": "#/components/schemas/ProductIdentifier"
              },
              "Commissions": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Commissions"
                }
              },
              "DestinationPurpose": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DestinationPurpose"
                }
              },
              "Restrictions": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Restrictions"
                }
              },
              "TourCodes": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TourCodes"
                }
              },
              "ChangeFeeCollectionMethod": {
                "$ref": "#/components/schemas/ChangeFeeCollectionMethod"
              },
              "NetRemitInfo": {
                "$ref": "#/components/schemas/NetRemitInfo"
              },
              "TicketDesignators": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketDesignators"
                }
              }
            }
          }
        ]
      },
      "Commissions": {
        "required": [
          "Commission"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Commissions"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          },
          "ApplyTo": {
            "$ref": "#/components/schemas/CommissionApplyEnum"
          }
        }
      },
      "CommissionApplyEnum": {
        "type": "string",
        "example": "Base",
        "enum": [
          "Base",
          "Fee"
        ]
      },
      "DestinationPurpose": {
        "required": [
          "destination",
          "purpose"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DestinationPurpose"
          },
          "destination": {
            "$ref": "#/components/schemas/DestinationEnum"
          },
          "purpose": {
            "$ref": "#/components/schemas/PurposeEnum"
          }
        }
      },
      "DestinationEnum": {
        "type": "string",
        "enum": [
          "United States of America",
          "Mexico / Central America / Canal Zone/ Costa Rica",
          "Islands and Countries of the Caribbean",
          "South America",
          "Europe",
          "Africa",
          "Middle East / Western Asia",
          "Asia",
          "Australia / New Zealand / Pacific Islands",
          "Canada and Greenland"
        ]
      },
      "PurposeEnum": {
        "type": "string",
        "enum": [
          "Business",
          "Pleasure",
          "Charter Service"
        ]
      },
      "Restrictions": {
        "required": [
          "Restriction"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Restrictions"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "Restriction": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "DocumentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        }
      },
      "TourCodes": {
        "required": [
          "TourCode"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TourCodes"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "TourCode": {
            "$ref": "#/components/schemas/TourCode"
          }
        }
      },
      "TourCode": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string"
          },
          "tourCodeType": {
            "$ref": "#/components/schemas/TourCodeTypeEnum"
          }
        },
        "description": "Tour code"
      },
      "TourCodeTypeEnum": {
        "type": "string",
        "enum": [
          "Bulk Tour",
          "Inclusive Tour"
        ]
      },
      "ChangeFeeCollectionMethod": {
        "required": [
          "code"
        ],
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ChangeFeeMethodEnum"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "The code value",
            "example": "f2142"
          },
          "subCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The subcode value",
            "example": "631b"
          },
          "description": {
            "maxLength": 128,
            "type": "string",
            "description": "The description value",
            "example": "Change fee collection method"
          },
          "changeFeeIssuedSeparatelyInd": {
            "type": "boolean",
            "description": "if true, the change fee will be issued as a separate transaction to the residual amount",
            "example": true
          },
          "taxIncludedInBaseAmountInd": {
            "type": "boolean",
            "description": "If true, the tax  on the fee will be included in the base fee amount and sent as a single value to the supplier for fulfilment",
            "example": true
          }
        }
      },
      "ChangeFeeMethodEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ChangeFeeMethodEnum_Base"
          }
        }
      },
      "ChangeFeeMethodEnum_Base": {
        "type": "string",
        "example": "EMD",
        "enum": [
          "EMD",
          "MCO",
          "Tax",
          "Unknown"
        ]
      },
      "NetRemitInfo": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "NetRemitInfo"
          },
          "CarCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The CAR code applied to this product for use in net remit",
            "example": "ACAR"
          },
          "ValueCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The Value code applied to this product for use in net remit",
            "example": "D1000"
          },
          "ActualSellingFare": {
            "type": "number",
            "description": "The actual selling fare which will override the Offer base fare on the document",
            "format": "float",
            "example": 100.5
          },
          "NetBaseAmount": {
            "$ref": "#/components/schemas/FiledAmount"
          }
        }
      },
      "FiledAmount": {
        "required": [
          "codeAuthority",
          "decimalPlace"
        ],
        "properties": {
          "value": {
            "type": "number",
            "description": "Filed amount value",
            "format": "float",
            "example": 43.3422
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Filed amount currency code",
            "example": "USD"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Filed amount currency code authority",
            "example": "Australian Dollar"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "ISO 4217 standard has a different number of decimals",
            "format": "int32",
            "example": 3
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "ISO 4217 standard decimal authority",
            "example": "ISO 4217"
          }
        },
        "description": "The base amount of a ticket price or net price that is filed in local currency"
      },
      "TicketDesignators": {
        "required": [
          "@type",
          "TicketDesignator"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "TravelerIdentifierRef": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerIdentifierRef"
            }
          },
          "TicketDesignator": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "description": "Discriminator class TicketDesignators only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DocumentOverridesResponseWrapper": {
        "properties": {
          "DocumentOverridesResponse": {
            "$ref": "#/components/schemas/DocumentOverridesResponse"
          }
        }
      },
      "DocumentOverridesResponse": {
        "properties": {
          "DocumentOverrides": {
            "$ref": "#/components/schemas/DocumentOverrides"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "Accounting": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountingID"
          },
          {
            "properties": {
              "dataType": {
                "maxLength": 32,
                "type": "string",
                "description": "Accounting data type",
                "example": "DateTime"
              },
              "template": {
                "maxLength": 512,
                "type": "string",
                "description": "Accounting template",
                "example": "Internal Finance template"
              },
              "NameValuePair": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameValuePair"
                }
              }
            }
          }
        ]
      },
      "AccountingResponseWrapper": {
        "properties": {
          "AccountingResponse": {
            "$ref": "#/components/schemas/AccountingResponse"
          }
        }
      },
      "AccountingResponse": {
        "properties": {
          "Accounting": {
            "$ref": "#/components/schemas/AccountingID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "FormOfPaymentResponseWrapper": {
        "properties": {
          "FormOfPaymentResponse": {
            "$ref": "#/components/schemas/FormOfPaymentResponse"
          }
        }
      },
      "FormOfPaymentResponse": {
        "properties": {
          "FormOfPayment": {
            "$ref": "#/components/schemas/FormOfPaymentIdentifier"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "FormOfPaymentIdentifier": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "FormOfPaymentPaymentCash"
          },
          "id": {
            "type": "string"
          },
          "FormOfPaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "Payment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentID"
          },
          {
            "required": [
              "Amount"
            ],
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "FormOfPaymentIdentifier": {
                "$ref": "#/components/schemas/FormOfPaymentIdentifier"
              },
              "OfferIdentifier": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferIdentifier"
                }
              },
              "Fees": {
                "$ref": "#/components/schemas/Fees"
              },
              "Taxes": {
                "$ref": "#/components/schemas/Taxes"
              },
              "TravelerIdentifierRef": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelerIdentifierRef"
                }
              },
              "BaseAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "depositInd": {
                "type": "boolean",
                "description": "If true, the payment is a deposit on the referenced Offer"
              },
              "ExtendedPayment": {
                "$ref": "#/components/schemas/ExtendedPayment"
              },
              "AgencyServiceFeeIdentifier": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgencyServiceFeeIdentifier"
                }
              },
              "guaranteeInd": {
                "type": "boolean",
                "description": "If true, the payment is a guarantee for the referenced Offer"
              }
            }
          }
        ]
      },
      "CurrencyAmount": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 124.56
          },
          "code": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "An ISO 4217 alpha character code that specifies a money unit",
            "example": "USD"
          },
          "minorUnit": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Minor units are a mechanism for expressing the relationship between a major currency unit and its corresponding minor currency unit.",
            "format": "int32",
            "example": 2
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if the currency amount has been converted from the original amount",
            "example": true
          }
        },
        "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included."
      },
      "ExtendedPayment": {
        "required": [
          "NumberOfInstallments"
        ],
        "properties": {
          "NumberOfInstallments": {
            "type": "integer",
            "description": "The number of installment payments to be charged by the payment card provider",
            "format": "int32",
            "example": 6
          },
          "FirstInstallment": {
            "type": "number",
            "description": "For Pagos Parceledos, specify the first installment amount. This will be the same currency as the payment",
            "format": "float",
            "example": 100
          },
          "RemainingAmount": {
            "type": "number",
            "description": "For Pagos Parceledos, specify the remaining amount to be charged that will be spread across the number of installments. This will be the same currency as the payment",
            "format": "float",
            "example": 50
          },
          "OTATOCode": {
            "maxLength": 32,
            "type": "string",
            "description": "For Pagos Parceledos the OTATOCode"
          }
        },
        "description": "Note this field is deprecated in Payment schema and should be passed in FormOfPaymentPaymentCardExtendPayment schema"
      },
      "AgencyServiceFeeIdentifier": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id for this object within a message"
          }
        }
      },
      "PaymentResponseWrapper": {
        "properties": {
          "PaymentResponse": {
            "$ref": "#/components/schemas/PaymentResponse"
          }
        }
      },
      "PaymentResponse": {
        "properties": {
          "Payment": {
            "$ref": "#/components/schemas/PaymentIdentifier"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "PaymentIdentifier": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "Payment"
          },
          "id": {
            "type": "string"
          },
          "PaymentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        }
      },
      "ReservationCommentListRequest": {
        "required": [
          "ReservationComment"
        ],
        "properties": {
          "ReservationComment": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationComment"
            }
          }
        }
      },
      "ReservationComment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationCommentID"
          },
          {
            "properties": {
              "commentSource": {
                "$ref": "#/components/schemas/CommentSourceEnum"
              },
              "shareWith": {
                "$ref": "#/components/schemas/ShareWithEnum"
              },
              "shareWithSupplier": {
                "type": "array",
                "description": "Reservation comment shared with supplier",
                "items": {
                  "maxLength": 32,
                  "type": "string"
                }
              },
              "Comment": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Comment"
                }
              },
              "AppliesTo": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AppliesTo"
                }
              }
            }
          }
        ]
      },
      "CommentSourceEnum": {
        "type": "string",
        "enum": [
          "Agency",
          "Supplier",
          "Traveler"
        ]
      },
      "ShareWithEnum": {
        "type": "string",
        "description": "Share with like Supplier,agency etc",
        "enum": [
          "Supplier",
          "Agency",
          "Traveler"
        ]
      },
      "Comment": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Additional comments"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "comment_1"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Title",
            "example": "Comment name"
          },
          "language": {
            "type": "string",
            "description": "Language code using ISO-639 standard",
            "example": "EN"
          }
        },
        "description": "Textual information."
      },
      "AppliesTo": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AppliesToOffer"
          }
        },
        "description": "Discriminator classes AppliesToOffer, AppliesToOfferProduct, AppliesToOfferProductSegment",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationCommentListResponseWrapper": {
        "properties": {
          "ReservationCommentListResponse": {
            "$ref": "#/components/schemas/ReservationCommentListResponse"
          }
        }
      },
      "ReservationCommentListResponse": {
        "properties": {
          "ReservationCommentID": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationCommentID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ReservationCommentResponseWrapper": {
        "properties": {
          "ReservationCommentResponse": {
            "$ref": "#/components/schemas/ReservationCommentResponse"
          }
        }
      },
      "ReservationCommentResponse": {
        "properties": {
          "ReservationComment": {
            "$ref": "#/components/schemas/ReservationCommentID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "SpecialServiceListRequest": {
        "required": [
          "SpecialService"
        ],
        "properties": {
          "SpecialService": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialService"
            }
          }
        },
        "description": "supports sending a list of SpecialService objects"
      },
      "SpecialService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialServiceID"
          },
          {
            "properties": {
              "AppliesTo": {
                "$ref": "#/components/schemas/AppliesTo"
              },
              "Status": {
                "$ref": "#/components/schemas/Status"
              },
              "ServiceAnimalType": {
                "maxLength": 32,
                "type": "string",
                "description": "The type of service animal accompanying the Traveler. If no service animal leave blank."
              },
              "TravelerIdentifier": {
                "$ref": "#/components/schemas/TravelerIdentifier"
              },
              "Quantity": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "FreeText": {
                "type": "string",
                "example": "NO SEAFOOD"
              },
              "SSRCode": {
                "maxLength": 4096,
                "pattern": "([A-Z]+)?",
                "type": "string",
                "example": "SPML"
              }
            }
          }
        ]
      },
      "Status": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ConfirmationStatusEnum"
          },
          "supplierText": {
            "maxLength": 128,
            "type": "string",
            "description": "Supplier status text",
            "example": "Active/In-active"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Special service status code",
            "example": "NN"
          }
        }
      },
      "ConfirmationStatusEnum": {
        "type": "string",
        "description": "Status returned in a response for a two or more phase commitment process",
        "enum": [
          "Pending",
          "Confirmed",
          "Cancelled",
          "Rejected",
          "Requested"
        ]
      },
      "SpecialServiceListResponseWrapper": {
        "properties": {
          "SpecialServiceListResponse": {
            "$ref": "#/components/schemas/SpecialServiceListResponse"
          }
        }
      },
      "SpecialServiceListResponse": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "SpecialServiceListResponse"
          },
          "SpecialServiceID": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecialServiceID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "SpecialServiceResponseWrapper": {
        "properties": {
          "SpecialServiceResponse": {
            "$ref": "#/components/schemas/SpecialServiceResponse"
          }
        }
      },
      "SpecialServiceResponse": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "SpecialServiceResponse"
          },
          "SpecialService": {
            "$ref": "#/components/schemas/SpecialServiceID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "TravelerResponseWrapper": {
        "properties": {
          "TravelerResponse": {
            "$ref": "#/components/schemas/TravelerResponse"
          }
        }
      },
      "TravelerResponse": {
        "properties": {
          "Traveler": {
            "$ref": "#/components/schemas/TravelerIdentifier"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "Traveler": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerID"
          },
          {
            "required": [
              "PersonName"
            ],
            "properties": {
              "birthDate": {
                "type": "string",
                "description": "Date of Birth YYYY-MM-DD",
                "format": "date",
                "example": "2021-06-05"
              },
              "gender": {
                "$ref": "#/components/schemas/GenderEnum"
              },
              "PersonName": {
                "$ref": "#/components/schemas/PersonName"
              },
              "Address": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "Telephone": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Telephone"
                }
              },
              "Email": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "passengerTypeCode": {
                "maxLength": 5,
                "minLength": 3,
                "pattern": "([a-zA-Z0-9]{3,5})",
                "type": "string",
                "description": "Passenger type code",
                "example": "CHD"
              },
              "nationality": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "Nationality on country code ISO",
                "example": "AL"
              },
              "CustomerLoyalty": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "AlternateContact": {
                "maxItems": 20,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AlternateContact"
                }
              },
              "TravelDocument": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelDocument"
                }
              },
              "Comments": {
                "$ref": "#/components/schemas/Comments"
              },
              "RailDiscountCard": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RailDiscountCard"
                }
              },
              "accompaniedByInfantInd": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "GenderEnum": {
        "type": "string",
        "description": "Gender Type Male, Female etc. This field is not used by Hotel APIs and will be ignored",
        "enum": [
          "Male",
          "Female",
          "Unknown",
          "Undisclosed"
        ]
      },
      "Address": {
        "required": [
          "@type",
          "City"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AddressDetail"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "Address_1"
          },
          "BldgRoom": {
            "$ref": "#/components/schemas/AddressBldgRoom"
          },
          "Number": {
            "$ref": "#/components/schemas/AddressStreetNumber"
          },
          "Street": {
            "maxLength": 128,
            "type": "string",
            "description": "May contain the street number when the Street number element is missing.",
            "example": "ABC Street"
          },
          "AddressLine": {
            "maxItems": 3,
            "type": "array",
            "description": "Additional address line details",
            "items": {
              "maxLength": 128,
              "type": "string",
              "example": "S Havana,Opposite to USPS"
            }
          },
          "City": {
            "maxLength": 128,
            "type": "string",
            "description": "City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).",
            "example": "Windsor"
          },
          "County": {
            "maxLength": 128,
            "type": "string",
            "description": "County or Region Name (e.g., Fairfax).",
            "example": "Berkshire"
          },
          "StateProv": {
            "$ref": "#/components/schemas/StateProv"
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "PostalCode": {
            "maxLength": 128,
            "type": "string",
            "description": "Post Office Code number.",
            "example": "Sl6 1AB"
          },
          "Addressee": {
            "maxLength": 37,
            "type": "string",
            "description": "The name of the company or person to be addressed",
            "example": "ACME INC"
          },
          "role": {
            "$ref": "#/components/schemas/Enum_AddressRole"
          }
        },
        "description": "Discriminator classes Address or AddressDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AddressBldgRoom": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "Moore House, Room 101, 23 ABC Street, Windsor, Berkshire, United Kingdom, SL6 51A"
          },
          "buldingInd": {
            "type": "boolean",
            "description": "When true, the information is a building name. When false, it is an apartment or room #",
            "example": true
          }
        },
        "description": "Address with building and room number"
      },
      "AddressStreetNumber": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "23B ABC Street, Windsor, Berkshire, United Kingdom, SL6 51A"
          },
          "streetNmbrSuffix": {
            "maxLength": 32,
            "type": "string",
            "description": "Street Number Suffix",
            "example": "B"
          },
          "streetDirection": {
            "maxLength": 32,
            "type": "string",
            "description": "Dircetion of the Street",
            "example": "NW"
          },
          "ruralRouteNmbr": {
            "pattern": "[0-9]{1,5}",
            "type": "string",
            "description": "RuralRoute Number",
            "example": "76"
          },
          "po_Box": {
            "maxLength": 128,
            "type": "string",
            "description": "PO Box Number",
            "example": "1001"
          }
        },
        "description": "The street number alone is the numerical number that precedes the street name in the address"
      },
      "StateProv": {
        "properties": {
          "value": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "example": "CA"
          },
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "State,province or region name or code needed to identify location",
            "example": "California"
          }
        },
        "description": "The standard code or abbreviation for the state, province, or region with optional name"
      },
      "Country": {
        "properties": {
          "value": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "example": "US"
          },
          "id": {
            "type": "string",
            "description": "Use this id to internally identify this country in NextSteps",
            "example": "23"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "The name or code of a country",
            "example": "United States"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "The source of a code",
            "example": "IATA"
          }
        },
        "description": "ISO 3166 code for a country with optional name"
      },
      "Enum_AddressRole": {
        "type": "string",
        "example": "Delivery",
        "enum": [
          "Home",
          "Business",
          "Mailing",
          "Delivery",
          "Destination",
          "Other",
          "Billing"
        ]
      },
      "Telephone": {
        "required": [
          "@type",
          "phoneNumber"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Telephone"
          },
          "countryAccessCode": {
            "pattern": "[0-9]{1,3}",
            "type": "string",
            "description": "TelephoneCountry AccessCode",
            "example": "1"
          },
          "areaCityCode": {
            "pattern": "[0-9]{1,8}",
            "type": "string",
            "description": "Telephone Area CityCode",
            "example": "972"
          },
          "phoneNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "Mobile/Telephone Number",
            "example": "972-000-787"
          },
          "extension": {
            "pattern": "[0-9]{0,5}",
            "type": "string",
            "description": "Telephone extension number",
            "example": "234"
          },
          "id": {
            "type": "string",
            "description": "UOptional internally referenced id",
            "example": "3"
          },
          "cityCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "City Code",
            "example": "DEN"
          },
          "role": {
            "$ref": "#/components/schemas/Enum_TelephoneRole"
          }
        },
        "description": "Discriminator classes Telephone or TelephoneDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Enum_TelephoneRole": {
        "type": "string",
        "example": "Mobile",
        "enum": [
          "Mobile",
          "Home",
          "Work",
          "Office",
          "Fax",
          "Other"
        ]
      },
      "Email": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "exampledomain@example.com"
          },
          "id": {
            "type": "string",
            "description": "Electronic email addresses, in IETF specified format.",
            "example": "email_1"
          },
          "emailType": {
            "type": "string",
            "description": "Use email type to specify if the email is to be sent \"TO\" or sent \"FROM\"",
            "example": "FROM"
          },
          "comment": {
            "maxLength": 4096,
            "type": "string",
            "description": "Comments associated to the email"
          },
          "preferredFormat": {
            "maxLength": 32,
            "type": "string",
            "description": "Mime media type",
            "example": "text/html"
          },
          "shareMarketing": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "shareSync": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optOutInd": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optInStatus": {
            "$ref": "#/components/schemas/OptInStatusEnum"
          },
          "optInDate": {
            "type": "string",
            "description": "The datetime of receiving the opt in notice",
            "format": "date-time",
            "example": "2023-04-05T11:11:00Z"
          },
          "optOutDate": {
            "type": "string",
            "description": "The datetime the opt out notice was received",
            "format": "date-time",
            "example": "2024-04-05T11:11:00Z"
          },
          "validInd": {
            "type": "boolean",
            "description": "If true, this is a valid email address that has been system verified via a successful email transmission.",
            "example": true
          },
          "provisionedInd": {
            "type": "boolean",
            "description": "If true then the email address came from the provisioning process",
            "example": true
          }
        },
        "description": "Electronic email addresses, in IETF specified format."
      },
      "YesNoInheritEnum": {
        "type": "string",
        "description": "Used to indicate marketing preferences, Yes, No, Inherit",
        "enum": [
          "Yes",
          "No",
          "Inherit"
        ]
      },
      "OptInStatusEnum": {
        "type": "string",
        "description": "Used to indicate marketing preferences, OptIn, OptOut",
        "enum": [
          "OptedIn",
          "OptedOut",
          "Unknown"
        ]
      },
      "AlternateContact": {
        "required": [
          "PersonName"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AlternateContact"
          },
          "id": {
            "type": "string"
          },
          "contactType": {
            "maxLength": 128,
            "type": "string",
            "description": "Contact type value",
            "example": "Relative"
          },
          "relation": {
            "maxLength": 128,
            "type": "string",
            "description": "Relation value",
            "example": "Mother"
          },
          "PersonName": {
            "$ref": "#/components/schemas/PersonName"
          },
          "Address": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "Telephone": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "Email": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "emergencyInd": {
            "type": "boolean",
            "description": "This is the contact in case of an emergency",
            "example": true
          },
          "defaultInd": {
            "type": "boolean",
            "description": "This is the default contact",
            "example": true
          }
        }
      },
      "TravelDocument": {
        "required": [
          "@type",
          "Gender",
          "PersonName"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelDocumentDetail"
          },
          "docNumber": {
            "maxLength": 128,
            "type": "string",
            "description": "Document number value",
            "example": "B37201"
          },
          "docType": {
            "$ref": "#/components/schemas/DocTypeCodeEnum"
          },
          "issueDate": {
            "type": "string",
            "description": "Date of Issue",
            "format": "date",
            "example": "2002-10-13"
          },
          "expireDate": {
            "type": "string",
            "description": "Date of expiration",
            "format": "date",
            "example": "2002-11-13"
          },
          "stateProvCode": {
            "maxLength": 8,
            "minLength": 2,
            "type": "string",
            "description": "State Province Code value",
            "example": "44"
          },
          "placeOfIssue": {
            "maxLength": 32,
            "type": "string",
            "description": "Place of issue value",
            "example": "Birmingham"
          },
          "issueCountry": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Issue country on Country Code ISO",
            "example": "CA"
          },
          "birthDate": {
            "type": "string",
            "description": "The date of birth of the document holder",
            "format": "date",
            "example": "1995-04-22"
          },
          "birthCountry": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Birth country on Country Code ISO value",
            "example": "AR"
          },
          "birthPlace": {
            "maxLength": 128,
            "type": "string",
            "description": "Birth place value",
            "example": "Ontario"
          },
          "residence": {
            "maxLength": 512,
            "type": "string",
            "description": "Residence value",
            "example": "1st section 8th st"
          },
          "id": {
            "type": "string",
            "description": "Locally referenced id",
            "example": "34"
          },
          "Gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "Nationality": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Specifies a 2 character country code as defined in ISO3166.",
            "example": "BR"
          },
          "PersonName": {
            "$ref": "#/components/schemas/PersonName"
          }
        },
        "description": "Discriminator classes TravelDocument or TravelDocumentDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DocTypeCodeEnum": {
        "type": "string",
        "description": "Codes from OTA DOC - Document Type",
        "example": "Passport",
        "enum": [
          "Visa",
          "Passport",
          "MilitaryIdentification",
          "DriversLicense",
          "NationalIdentityDocument",
          "VaccinationCertificate",
          "AlienRegistrationNumber",
          "InsurancePolicyNumber",
          "TaxExemptionNumber",
          "VehicleRegistrationLicenseNumber",
          "BoderCrossingCard",
          "RefugeeTravelDocument",
          "PilotsLicense",
          "PermanentResidentCard",
          "RedressNumber",
          "KnownTravelerNumber",
          "Non-Standard",
          "MerchantNumber",
          "AirNexusCard",
          "CrewMemberCertificate",
          "PassportCard",
          "NaturalizationCertificate",
          "TicketNumber",
          "LargeFamilyDiscountCard",
          "IdentityCardTypeA",
          "IdentityCardTypeC",
          "IdentityCardTypeI"
        ]
      },
      "Comments": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Comments"
          },
          "Comment": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "RailDiscountCard": {
        "required": [
          "supplierCode"
        ],
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "20 Perecnt"
          },
          "supplierCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Code of the Supplier",
            "example": "Enco"
          },
          "referenceNumber": {
            "maxLength": 128,
            "type": "string",
            "description": "ReferenceNumber",
            "example": "134256"
          }
        },
        "description": "The name of the Rail Discount"
      },
      "TravelerListRequest": {
        "required": [
          "Traveler"
        ],
        "properties": {
          "Traveler": {
            "maxItems": 9,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Traveler"
            }
          }
        }
      },
      "TravelerListResponseWrapper": {
        "properties": {
          "TravelerListResponse": {
            "$ref": "#/components/schemas/TravelerListResponse"
          }
        }
      },
      "TravelerListResponse": {
        "properties": {
          "TravelerID": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "TravelerQueryUpdate": {
        "required": [
          "@type",
          "TravelerUpdatedItem"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerQueryUpdate"
          },
          "TravelerUpdatedItem": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelerUpdatedItem"
            }
          }
        },
        "description": "Discriminator classes TravelerQueryUpdate only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerUpdatedItem": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerUpdatedItem"
          },
          "TravelerUpdatableItemID": {
            "maxLength": 128,
            "type": "string",
            "description": "A unique GUID to identify the TravelerUpdatedItem",
            "example": "234"
          },
          "addInd": {
            "type": "boolean",
            "description": "If true the TravelerUpdatedItem is being added to the Traveler",
            "example": true
          },
          "modifyInd": {
            "type": "boolean",
            "description": "If true the TravelerUpdatedItem is being modified in the Traveler",
            "example": true
          },
          "deleteInd": {
            "type": "boolean",
            "description": "If true the TravelerUpdatedItem is being deleted from the Traveler",
            "example": true
          }
        },
        "description": "Discriminator classes TravelerUpdatedItemAddress, TravelerUpdatedItemBirthDate, TravelerUpdatedItemComments, TravelerUpdatedItemCustomerLoyalty, TravelerUpdatedItemEmail, TravelerUpdatedItemGender, TravelerUpdatedItemPersonName, TravelerUpdatedItemTelephone, TravelerUpdatedItemTravelDocument",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PrimaryContact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PrimaryContactID"
          },
          {
            "properties": {
              "shareWith": {
                "$ref": "#/components/schemas/ShareWithEnum"
              },
              "shareWithSupplier": {
                "type": "array",
                "description": "Primary contact shared with supplier",
                "items": {
                  "maxLength": 32,
                  "type": "string"
                }
              },
              "Email": {
                "$ref": "#/components/schemas/Email"
              },
              "Telephone": {
                "$ref": "#/components/schemas/Telephone"
              },
              "TravelerIdentifier": {
                "$ref": "#/components/schemas/TravelerIdentifier"
              },
              "contactInformationRefusedInd": {
                "type": "boolean",
                "description": "If true, the passenger has refused to provide emergency contact details",
                "example": true
              }
            }
          }
        ]
      },
      "PrimaryContactResponseWrapper": {
        "properties": {
          "PrimaryContactResponse": {
            "$ref": "#/components/schemas/PrimaryContactResponse"
          }
        }
      },
      "PrimaryContactResponse": {
        "properties": {
          "PrimaryContact": {
            "$ref": "#/components/schemas/PrimaryContactID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "PrimaryContactListRequest": {
        "required": [
          "PrimaryContact"
        ],
        "properties": {
          "PrimaryContact": {
            "maxItems": 9,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryContact"
            }
          }
        }
      },
      "PrimaryContactListResponseWrapper": {
        "properties": {
          "PrimaryContactListResponse": {
            "$ref": "#/components/schemas/PrimaryContactListResponse"
          }
        }
      },
      "PrimaryContactListResponse": {
        "properties": {
          "PrimaryContactID": {
            "maxItems": 9,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryContactID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ProductQueryBuildFromCatalogProductOfferings": {
        "required": [
          "BuildFromCatalogProductOfferingsRequest"
        ],
        "properties": {
          "BuildFromCatalogProductOfferingsRequest": {
            "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
          }
        }
      },
      "ProductListResponseWrapper": {
        "properties": {
          "ProductListResponse": {
            "$ref": "#/components/schemas/ProductListResponse"
          }
        }
      },
      "ProductListResponse": {
        "properties": {
          "Product": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "Product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductID"
          },
          {
            "properties": {
              "Quantity": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The quantity of the product",
                "format": "int32",
                "example": 2
              }
            }
          }
        ]
      },
      "ProductQueryBuildFromProducts": {
        "required": [
          "PassengerCriteria",
          "ProductCriteriaAir"
        ],
        "properties": {
          "ProductCriteriaAir": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCriteriaAir"
            }
          },
          "PassengerCriteria": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerCriteria"
            }
          }
        }
      },
      "OrganizationLoyaltyProgramListRequest": {
        "required": [
          "OrganizationLoyaltyProgram"
        ],
        "properties": {
          "OrganizationLoyaltyProgram": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationLoyaltyProgram"
            }
          }
        }
      },
      "OrganizationLoyaltyProgram": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganizationLoyaltyProgramID"
          },
          {
            "required": [
              "LoyaltyIdentifier",
              "Supplier"
            ],
            "properties": {
              "Supplier": {
                "maxLength": 32,
                "type": "string",
                "description": "The supplier of the loyalty program",
                "example": "Air canada"
              },
              "LoyaltyIdentifier": {
                "maxLength": 1000,
                "minLength": 1,
                "type": "string",
                "description": "Loyalty Identifier",
                "example": "LP029381"
              }
            }
          }
        ]
      },
      "OrganizationLoyaltyProgramID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OrganizationLoyaltyProgramID"
          },
          "id": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes OrganizationLoyaltyProgramID or OrganizationLoyaltyProgram",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OrganizationLoyaltyProgramListResponse": {
        "properties": {
          "OrganizationLoyaltyProgram": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationLoyaltyProgramID"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "OrganizationLoyaltyProgramResponse": {
        "properties": {
          "OrganizationLoyaltyProgram": {
            "$ref": "#/components/schemas/OrganizationLoyaltyProgramID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "AgencyServiceFeeRequest": {
        "properties": {
          "AgencyServiceFee": {
            "$ref": "#/components/schemas/AgencyServiceFee"
          }
        }
      },
      "AgencyServiceFee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AgencyServiceFeeID"
          },
          {
            "required": [
              "Amount"
            ],
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The service fee expiry date. Once expiry date has been reached, the service fee information will only be stored in the ReservationReceipt",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "Description": {
                "maxLength": 512,
                "type": "string",
                "description": "The description of the service fee",
                "example": "Flight reservation service fee"
              },
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "Tax": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tax"
                }
              },
              "RelatedDocumentNumber": {
                "$ref": "#/components/schemas/DocumentNumber"
              },
              "TravelerRef": {
                "type": "string",
                "description": "Reference to a Traveler within the Reservation that this service fee applies to"
              },
              "OfferRef": {
                "type": "string",
                "description": "Reference to an Offer within the Reservation that this service fee applies to"
              }
            }
          }
        ]
      },
      "AgencyServiceFeeID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AgencyServiceFee"
          },
          "id": {
            "type": "string",
            "description": "Unique id for this object within a message",
            "example": "AgencyServiceFee_1"
          }
        },
        "description": "Discriminator classes AgencyServiceFeeID or AgencyServiceFee",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Tax": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 12.2
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Currency code of the city.",
            "example": "USD"
          },
          "taxCode": {
            "maxLength": 512,
            "type": "string",
            "description": "Tax code of the city",
            "example": "7702"
          },
          "reportingAuthority": {
            "maxLength": 512,
            "type": "string",
            "description": "Identifies the reporting authority such as airport code for XF taxes.",
            "example": "JFK1"
          },
          "purpose": {
            "maxLength": 512,
            "type": "string",
            "description": "purpose",
            "example": "Fuel"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "additional information",
            "example": "Additional details."
          },
          "includedInBase": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Code Authority",
            "example": "ISO"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Allowed number of decimals.",
            "format": "int32",
            "example": 2
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Decimal Authority",
            "example": "ISO"
          },
          "exemptInd": {
            "type": "boolean",
            "description": "If true, this tax is exempt",
            "example": true
          },
          "nonRefundableInd": {
            "type": "boolean",
            "description": "if true, the tax is non refundable. This indicator is only supported for exchange search and exchange price quote transactions.",
            "example": true
          },
          "excludedFromTotalPriceInd": {
            "type": "boolean",
            "description": "Returned in Hotel APIs when a tax is not included in the TotalPrice. Default behavior is for taxes to be included in TotalPrice",
            "example": true
          }
        }
      },
      "YesNoUnknownEnum": {
        "type": "string",
        "description": "Yes , No , Unknown",
        "enum": [
          "Yes",
          "No",
          "Unknown"
        ]
      },
      "AgencyServiceFeeResponseWrapper": {
        "properties": {
          "AgencyServiceFeeResponse": {
            "$ref": "#/components/schemas/AgencyServiceFeeResponse"
          }
        }
      },
      "AgencyServiceFeeResponse": {
        "properties": {
          "AgencyServiceFee": {
            "$ref": "#/components/schemas/AgencyServiceFeeID"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyWrapper": {
        "properties": {
          "TravelAgencyQueryTravelAgency": {
            "$ref": "#/components/schemas/TravelAgencyQueryTravelAgency"
          }
        }
      },
      "TravelAgencyQueryTravelAgency": {
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/AddressBasic"
          },
          "Telephone": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TelephoneBasic"
            }
          },
          "Email": {
            "$ref": "#/components/schemas/EmailBasic"
          },
          "CorporateCode": {
            "maxLength": 32,
            "type": "string",
            "description": "A reference assigned by the Travel Agency to identify the corporate organization",
            "example": "Air Agency"
          }
        }
      },
      "AddressBasic": {
        "properties": {
          "Addressee": {
            "maxLength": 37,
            "type": "string",
            "description": "The name of the company or person to be addressed",
            "example": "ACME INC"
          },
          "AddressLine": {
            "maxItems": 1,
            "type": "array",
            "description": "Additional address line details",
            "example": [
              "S Havana,Opposite to USPS"
            ],
            "items": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "City": {
            "maxLength": 128,
            "type": "string",
            "description": "City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).",
            "example": "Windsor"
          },
          "StateProv": {
            "$ref": "#/components/schemas/StateProv"
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "PostalCode": {
            "maxLength": 128,
            "type": "string",
            "description": "Post Office Code number.",
            "example": "Sl6 1AB"
          }
        }
      },
      "TelephoneBasic": {
        "properties": {
          "cityCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "City Code",
            "example": "DEN"
          },
          "countryAccessCode": {
            "pattern": "[0-9]{1,3}",
            "type": "string",
            "description": "Telephone Country Access Code",
            "example": "1"
          },
          "areaCityCode": {
            "pattern": "[0-9]{1,8}",
            "type": "string",
            "description": "Telephone Area CityCode",
            "example": "972"
          },
          "phoneNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "Mobile/Telephone Number",
            "example": "972-000-787"
          },
          "extension": {
            "pattern": "[0-9]{0,5}",
            "type": "string",
            "description": "Telephone extension number",
            "example": "234"
          }
        }
      },
      "EmailBasic": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "exampledomain@example.com"
          }
        },
        "description": "email addresses"
      },
      "TravelAgencyResponse": {
        "properties": {
          "TravelAgency": {
            "$ref": "#/components/schemas/TravelAgencyID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "TravelAgencyQueryTravelAgencyAddressWrapper": {
        "properties": {
          "TravelAgencyQueryTravelAgencyAddress": {
            "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyAddress"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyAddress": {
        "required": [
          "Address"
        ],
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/AddressDetail"
          }
        }
      },
      "AddressDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "properties": {
              "addressType": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "OTA code for address type",
                "example": "CLT"
              },
              "use": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "OTA code for address use",
                "example": "AUT"
              },
              "Comment": {
                "$ref": "#/components/schemas/Comment"
              },
              "Privacy": {
                "$ref": "#/components/schemas/Privacy"
              },
              "Priority": {
                "maximum": 300,
                "exclusiveMaximum": false,
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The priority ranking within the group",
                "format": "int32",
                "example": 1
              },
              "validInd": {
                "type": "boolean",
                "description": "If true, this is a valid and complete mailing address that has been verified through an address verification service or previously mailed materials have not been returned.",
                "example": false
              },
              "provisionedInd": {
                "type": "boolean",
                "description": "If true, this address came into the system through provisioning",
                "example": false
              }
            }
          }
        ]
      },
      "Privacy": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "2"
          },
          "shareMarketing": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "shareSync": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optOutInd": {
            "$ref": "#/components/schemas/YesNoInheritEnum"
          },
          "optInStatus": {
            "$ref": "#/components/schemas/OptInStatusEnum"
          },
          "optInDate": {
            "type": "string",
            "description": "The datetime of receiving the opt in notice",
            "format": "date-time",
            "example": "2022-08-07T12:12:00Z"
          },
          "optOutDate": {
            "type": "string",
            "description": "The datetime the opt out notice was received",
            "format": "date-time",
            "example": "2022-08-07T12:12:00Z"
          }
        },
        "description": "Confidential details for marketing purpose"
      },
      "TravelAgencyQueryTravelAgencyCorporateCodeWrapper": {
        "properties": {
          "TravelAgencyQueryTravelAgencyCorporateCode": {
            "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyCorporateCode"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyCorporateCode": {
        "required": [
          "CorporateCode"
        ],
        "properties": {
          "CorporateCode": {
            "maxLength": 32,
            "type": "string",
            "description": "A reference assigned by the Travel Agency to identify the corporate organization",
            "example": "Air Agency"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyEmailWrapper": {
        "properties": {
          "TravelAgencyQueryTravelAgencyEmail": {
            "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyEmail"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyEmail": {
        "required": [
          "Email"
        ],
        "properties": {
          "Email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyTelephoneWrapper": {
        "properties": {
          "TravelAgencyQueryTravelAgencyTelephone": {
            "$ref": "#/components/schemas/TravelAgencyQueryTravelAgencyTelephone"
          }
        }
      },
      "TravelAgencyQueryTravelAgencyTelephone": {
        "required": [
          "Telephone"
        ],
        "properties": {
          "Telephone": {
            "$ref": "#/components/schemas/TelephoneDetail"
          }
        }
      },
      "TelephoneDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Telephone"
          },
          {
            "properties": {
              "phoneLocationType": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "Location of the phone",
                "example": "Home"
              },
              "phoneTechType": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "Indicates the type of technology associated with the telephone number",
                "example": "Voice"
              },
              "phoneUseType": {
                "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
                "type": "string",
                "description": "Use of the phone",
                "example": "Home"
              },
              "pin": {
                "maxLength": 32,
                "type": "string",
                "description": "Additional codes used for telephone",
                "example": "3456"
              },
              "priority": {
                "maximum": 300,
                "exclusiveMaximum": false,
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "Priority",
                "format": "int32",
                "example": 1
              },
              "Privacy": {
                "$ref": "#/components/schemas/Privacy"
              },
              "Enum_TelephoneRole": {
                "$ref": "#/components/schemas/Enum_TelephoneRole"
              },
              "Comment": {
                "$ref": "#/components/schemas/Comment"
              },
              "defaultInd": {
                "type": "boolean",
                "description": "When true, indicates a default value should be used.",
                "example": true
              },
              "provisionedInd": {
                "type": "boolean",
                "description": "true indicates this phone number was created through provisioned",
                "example": false
              }
            }
          }
        ]
      },
      "CustomRuleResponse": {
        "required": [
          "CustomRule"
        ],
        "properties": {
          "CustomRule": {
            "$ref": "#/components/schemas/CustomRuleID"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CustomRuleID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes CustomRuleID or CustomRule",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AgencyQueueSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AgencyQueueID"
          },
          {
            "required": [
              "Queue"
            ],
            "type": "object",
            "properties": {
              "ReservationIdentifier": {
                "$ref": "#/components/schemas/Identifier"
              },
              "Queue": {
                "maxItems": 99,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          }
        ]
      },
      "AgencyQueueID": {
        "required": [
          "@type"
        ],
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "AgencyQueueSummary"
          },
          "Identifer": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Queue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32",
            "example": 23
          },
          "pccOverride": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "example": "0XS4"
          },
          "category": {
            "maxLength": 3,
            "pattern": "([0-9a-zA-Z]+)?",
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "dateOffset": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BaseResponseWrapper": {
        "properties": {
          "BaseResponse": {
            "$ref": "#/components/schemas/BaseResponse"
          }
        }
      },
      "TicketListResponseWrapper": {
        "properties": {
          "TicketListResponse": {
            "$ref": "#/components/schemas/TicketListResponse"
          }
        }
      },
      "TicketListResponse": {
        "properties": {
          "TicketID": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          },
          "SettlementAuthorizationCode": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "Ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TicketID"
          },
          {
            "required": [
              "FormOfPayment",
              "PersonName",
              "TicketPrice",
              "TicketSegment",
              "numberOfTicketsIssued"
            ],
            "properties": {
              "numberOfTicketsIssued": {
                "type": "integer",
                "description": "The total number of tickets issued for the collection of flight segments example: 5",
                "format": "int32"
              },
              "settlementAuthorizationCode": {
                "maxLength": 32,
                "type": "string",
                "description": "Electronic Settlement Authorization Code - A unique number generated by a Carrier to authorize or approve a transaction",
                "example": "REA"
              },
              "tourCode": {
                "maxLength": 32,
                "type": "string",
                "description": "A Tour Code on a flight ticket is a special code arranged between the Travel Agency and the Airlines",
                "example": "LHR"
              },
              "accountCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The Account Code used to classify financial activities",
                "example": "Pcard, travel"
              },
              "ticketDesignator": {
                "maxLength": 32,
                "type": "string",
                "description": "A code on airline tickets to indicate what type of discount is applied",
                "example": "infant"
              },
              "PersonName": {
                "$ref": "#/components/schemas/PersonName"
              },
              "ReservationLocator": {
                "$ref": "#/components/schemas/SupplierLocator"
              },
              "FormOfPayment": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormOfPayment"
                }
              },
              "TicketSegment": {
                "maxItems": 30,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketSegment"
                }
              },
              "TicketPrice": {
                "$ref": "#/components/schemas/TicketPrice"
              },
              "PassengerTypeCode": {
                "maxLength": 5,
                "minLength": 3,
                "pattern": "([a-zA-Z0-9]{3,5})",
                "type": "string",
                "description": "Code used to identify Passengers according to various",
                "example": "PTC"
              },
              "ValidatingCarrier": {
                "pattern": "([a-zA-Z0-9]{2,3})",
                "type": "string",
                "description": "The plating carrier of the ticket",
                "example": "ticket prefix is 001, while United Airlines' prefix is 016."
              },
              "PricingType": {
                "$ref": "#/components/schemas/PricingTypeEnum"
              },
              "Restrictions": {
                "maxItems": 10,
                "type": "array",
                "description": "restrictions associated with a particular fare",
                "example": [
                  "VALID BA ONLY/ NON REF",
                  "NON REF"
                ],
                "items": {
                  "maxLength": 128,
                  "type": "string"
                }
              },
              "AgencyInfo": {
                "$ref": "#/components/schemas/AgencyInfo"
              },
              "OriginalIssue": {
                "$ref": "#/components/schemas/OriginalIssue"
              },
              "PreviousIssue": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PreviousIssue"
                }
              }
            }
          }
        ]
      },
      "TicketID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Ticket"
          },
          "objID": {
            "type": "string"
          },
          "TicketRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes TicketID, Ticket, TicketSummary or TicketDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "SupplierLocator": {
        "properties": {
          "value": {
            "maxLength": 16,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "WTR45G"
          },
          "supplierCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Supplier Code",
            "example": "AA"
          },
          "supplierName": {
            "maxLength": 64,
            "type": "string",
            "description": "Name of the supplier",
            "example": "American Airlines"
          }
        },
        "description": "The supplier and the supplier's locator code for a product"
      },
      "FormOfPayment": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/FormOfPaymentTypeEnum"
          },
          "documentNumber": {
            "maxLength": 4096,
            "pattern": "([0-9]+)?",
            "type": "string",
            "description": "Payment document number",
            "example": "45"
          },
          "encryptedValue": {
            "maxLength": 512,
            "type": "string",
            "description": "Encrypted value",
            "example": "BNASJASJKASKJASHJKASK"
          },
          "documentIssuer": {
            "maxLength": 32,
            "type": "string",
            "description": "Document issuer",
            "example": "Alpha travel"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        }
      },
      "FormOfPaymentTypeEnum": {
        "type": "string",
        "description": "The list of valid forms of payment.",
        "enum": [
          "AgencyAccount",
          "BSP",
          "Cash",
          "Document",
          "Invoice",
          "PaymentCard",
          "WaiverCode"
        ]
      },
      "TicketSegment": {
        "required": [
          "Arrival",
          "Carrier",
          "Departure",
          "FlightStatusCode",
          "Number",
          "TicketBaggage",
          "ValidDateRange"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketSegment"
          },
          "sequence": {
            "type": "integer",
            "description": "The order in which you checked in to your flight",
            "format": "int32"
          },
          "ClassOfService": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]{1,2})",
            "type": "string",
            "description": "The booking class of service assigned to this ticket segment",
            "example": "Y"
          },
          "FareBasisCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The Fare Basis is the code that appears on the ticket in the Fare Basis box",
            "example": "YEE1Y"
          },
          "Status": {
            "$ref": "#/components/schemas/TicketStatusEnum"
          },
          "Carrier": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "The marketing carrier of the flight on this ticket segment.",
            "example": "DAL"
          },
          "Number": {
            "pattern": "[0-9]{1,4}[A-Z]?|OPEN|ARNK",
            "type": "string",
            "description": "The flight number.",
            "example": "BA2490"
          },
          "Departure": {
            "$ref": "#/components/schemas/Departure"
          },
          "Arrival": {
            "$ref": "#/components/schemas/Arrival"
          },
          "FlightStatusCode": {
            "maxLength": 32,
            "type": "string",
            "description": "A status code indicates the status of an air segment",
            "example": "AF  AA Advantage ticket"
          },
          "ValidDateRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "TicketBaggage": {
            "$ref": "#/components/schemas/TicketBaggage"
          },
          "connectionInd": {
            "type": "boolean",
            "description": "If true, the ticketSegment is a connecting segment",
            "example": true
          }
        }
      },
      "TicketStatusEnum": {
        "type": "string",
        "enum": [
          "CheckedIn",
          "Closed",
          "Exchanged",
          "InfoOnly",
          "Lifted/Boarded",
          "OpenForUse",
          "OtherAirlineControl",
          "Void",
          "Refund",
          "Suspended",
          "Unavailable",
          "Used"
        ]
      },
      "Departure": {
        "required": [
          "@type",
          "date",
          "location",
          "time"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DepartureDetail"
          },
          "location": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Location of departure or arrival",
            "example": "AMS"
          },
          "date": {
            "type": "string",
            "description": "Local date of for arrival or departure",
            "format": "date",
            "example": "0011-10-13"
          },
          "time": {
            "type": "string",
            "description": "Local time Date of for arrival or departure",
            "example": "04:45 PM"
          }
        },
        "description": "Discriminator classes Departure or DepartureDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Arrival": {
        "required": [
          "@type",
          "date",
          "location",
          "time"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ArrivalDetail"
          },
          "location": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Location of departure or arrival",
            "example": "MAD"
          },
          "date": {
            "type": "string",
            "description": "Local date of for arrival or departure",
            "format": "date",
            "example": "0011-10-13"
          },
          "time": {
            "type": "string",
            "description": "Local time Date of for arrival or departure",
            "example": "04:45 PM"
          }
        },
        "description": "Discriminator classes Arrival or ArrivalDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TicketBaggage": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketBaggage"
          },
          "quantity": {
            "type": "integer",
            "description": "How many baggage allowed",
            "format": "int32",
            "example": 2
          },
          "Measurement": {
            "maxItems": 6,
            "type": "array",
            "description": "The total dimensions  of baggage",
            "items": {
              "$ref": "#/components/schemas/Measurement"
            }
          }
        }
      },
      "TicketPrice": {
        "required": [
          "Base",
          "CurrencyCode",
          "Total"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketPrice"
          },
          "fareCalculation": {
            "maxLength": 512,
            "type": "string",
            "description": "Calculation of applicable fare",
            "example": "LON BA SIN R235.00YEE1Y BA LON R235.00YEE1Y END ROE0.645487"
          },
          "fareBreakdown": {
            "maxLength": 512,
            "type": "string",
            "description": "An itineraray used as the start and finish of a particular fare"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "format": "float"
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "format": "float"
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          },
          "FiledAmount": {
            "$ref": "#/components/schemas/FiledAmount"
          },
          "PaidTaxes": {
            "$ref": "#/components/schemas/PaidTaxes"
          },
          "iTFareInd": {
            "type": "boolean",
            "description": "if true, this is an IT fare and the base amount is not exposed",
            "example": true
          },
          "bTFareInd": {
            "type": "boolean",
            "description": "if true, this is a BT fare and the base amount is not exposed",
            "example": false
          },
          "AdditionalCollection": {
            "$ref": "#/components/schemas/FiledAmount"
          },
          "NetAmount": {
            "$ref": "#/components/schemas/AlternateAmount"
          }
        }
      },
      "PaidTaxes": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PaidTaxesDetail"
          },
          "TotalTaxes": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 220.12
          }
        },
        "description": "Discriminator classes PaidTaxes or PaidTaxesDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AlternateAmount": {
        "required": [
          "amount",
          "currencyCode",
          "decimalPlace"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The base amount",
            "format": "float",
            "example": 43.3422
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Amount currency code",
            "example": "USD"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "ISO 4217 decimal standard",
            "format": "int32",
            "example": 3
          },
          "fareCalculation": {
            "maxLength": 128,
            "type": "string",
            "description": "the fare calculation string",
            "example": "LON BA SIN R 234.00 BA LON R 234.00NUC468.00END"
          },
          "rateOfExchange": {
            "type": "number",
            "description": "The rate of exchange used to convert the fare calculation",
            "format": "float",
            "example": 1.234562
          }
        }
      },
      "PricingTypeEnum": {
        "type": "string",
        "description": "How the price was created",
        "enum": [
          "Auto Priced",
          "Manually Priced"
        ]
      },
      "AgencyInfo": {
        "required": [
          "name",
          "place",
          "ticketingCity",
          "ticketingCountry"
        ],
        "properties": {
          "ticketedDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "Ticketed date",
            "example": "2022-04-05"
          },
          "name": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of the Agency",
            "example": "Alpha travel"
          },
          "place": {
            "maxLength": 32,
            "type": "string",
            "description": "Place of the agency",
            "example": "Marietta"
          },
          "ticketingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "Ticketing PCC",
            "example": "1CR"
          },
          "code": {
            "pattern": "([0-9]{8})",
            "type": "string",
            "description": "Agency code",
            "example": "12430870"
          },
          "salesType": {
            "maxLength": 32,
            "type": "string",
            "description": "Sales type",
            "example": "Ticketing"
          },
          "ticketingCountry": {
            "maxLength": 32,
            "type": "string",
            "description": "Ticketing country",
            "example": "US"
          },
          "ticketingCity": {
            "maxLength": 32,
            "type": "string",
            "description": "Ticketing city",
            "example": "NYC"
          }
        },
        "description": "Detail of the travel agency that issues the ticket"
      },
      "OriginalIssue": {
        "required": [
          "agencyCodeIATA",
          "issueDate",
          "issuingCity"
        ],
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string"
          },
          "issuingCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Original Issuing city",
            "example": "NYC"
          },
          "issueDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "Issue date",
            "example": "2022-04-04"
          },
          "agencyCodeIATA": {
            "pattern": "([0-9]{8})",
            "type": "string",
            "description": "Agency code",
            "example": "89213476"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        }
      },
      "PreviousIssue": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string"
          },
          "issuingCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string"
          },
          "issueDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string"
          },
          "agencyCodeIATA": {
            "pattern": "([0-9]{8})",
            "type": "string"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentTypeEnum"
          }
        }
      },
      "TicketQueryGetByLocator": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketQueryGetByLocator"
          },
          "Locator": {
            "$ref": "#/components/schemas/Locator"
          },
          "TicketNumber": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketNumber"
            }
          }
        }
      },
      "Locator": {
        "properties": {
          "value": {
            "maxLength": 16,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "example": "ZXG25P"
          },
          "locatorType": {
            "maxLength": 32,
            "type": "string",
            "description": "Specifies the type of reservation ID",
            "example": "Locator"
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "Specifies a unique identifier to indicate the source system which generated the resid",
            "example": "1G"
          },
          "sourceContext": {
            "maxLength": 128,
            "type": "string",
            "description": "Specifies the context of the source",
            "example": "Travelport"
          },
          "otaType": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Used for codes",
            "example": "14.UIT"
          },
          "creationDate": {
            "type": "string",
            "description": "Reservation Creation date",
            "format": "date",
            "example": "2022-03-01"
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date and time stamp the Reservation was last updated.",
            "format": "date-time",
            "example": "2022-08-07T12:12:00Z"
          }
        },
        "description": "Contains the locator (PNR or external locator) or cancellation number for the reservation, order, or offer"
      },
      "TicketNumber": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "pattern": "([0-9]+)?",
            "type": "string",
            "description": "Ticket number",
            "example": "1156"
          },
          "ticketIssuer": {
            "maxLength": 32,
            "type": "string",
            "description": "Ticket issuer",
            "example": "Cargo airways"
          },
          "contentSource": {
            "$ref": "#/components/schemas/ContentSourceEnum"
          }
        },
        "description": "The ticketNumber that will be used as partial payment for this Offer\\/Offering"
      },
      "TicketQueryUpdateTicket": {
        "required": [
          "@type",
          "status"
        ],
        "properties": {
          "agencyCode": {
            "pattern": "([0-9]{8})",
            "type": "string",
            "description": "Assigned Type: c-1100:AgencyCodeIATA"
          },
          "dateOfIssue": {
            "type": "string",
            "description": "Date the ticket was issued",
            "format": "date"
          },
          "status": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          }
        }
      },
      "TicketIDResponseWrapper": {
        "properties": {
          "TicketIDResponse": {
            "$ref": "#/components/schemas/TicketIdResponse"
          }
        }
      },
      "TicketIdResponse": {
        "required": [
          "SettlementAuthorizationCode",
          "TicketIdentifier"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketIDResponse"
          },
          "Ticket": {
            "$ref": "#/components/schemas/TicketID"
          },
          "SettlementAuthorizationCode": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "EMDListResponseWrapper": {
        "properties": {
          "EMDListResponse": {
            "$ref": "#/components/schemas/EMDListResponse"
          }
        }
      },
      "EMDListResponse": {
        "properties": {
          "EMDID": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EMD"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "EMD": {
        "description": "API will return EMD or EMDSummary.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EMDID"
          },
          {
            "required": [
              "AgencyInfo",
              "EMDSegment",
              "FormOfPayment",
              "PersonName"
            ],
            "properties": {
              "PersonName": {
                "$ref": "#/components/schemas/PersonName"
              },
              "ReservationLocator": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupplierLocator"
                }
              },
              "AgencyInfo": {
                "$ref": "#/components/schemas/AgencyInfo"
              },
              "EMDSegment": {
                "maxItems": 16,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EMDSegment"
                }
              },
              "TotalAmount": {
                "$ref": "#/components/schemas/TotalAmount"
              },
              "FormOfPayment": {
                "$ref": "#/components/schemas/FormOfPayment"
              },
              "ESAC": {
                "maxLength": 128,
                "type": "string",
                "description": "The BSP ESAC code assign for a void or refund transaction\\nThe BSP E"
              },
              "AssociatedTicketNumber": {
                "$ref": "#/components/schemas/TicketNumber"
              },
              "Restrictions": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "maxLength": 512,
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "EMDID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "EMD"
          },
          "id": {
            "type": "string"
          },
          "EMDRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes EMDID, EMD or EMDSummary",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "EMDSegment": {
        "required": [
          "sequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "EMDSegment"
          },
          "sequence": {
            "type": "integer",
            "description": "Sequence of EMDSegment",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the ancillary available on this EMDSegment",
            "format": "int32"
          },
          "EMDDescription": {
            "$ref": "#/components/schemas/EMDDescription"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "Status": {
            "$ref": "#/components/schemas/EMDStatusENUM"
          },
          "DateOfService": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "The date of service the service is available for"
          },
          "PresentTo": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "The airline the EMD should be presented to to supply the service"
          },
          "PresentAt": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "The location the EMD should be presented to to supply the service"
          },
          "Routing": {
            "maxLength": 128,
            "type": "string",
            "description": "The routing the service is valid on"
          }
        }
      },
      "EMDDescription": {
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string",
            "example": "First checked bag"
          },
          "code": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "A description of the ancillary with two description codes",
            "example": "BG"
          },
          "subCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "EMD number sub code",
            "example": "02C"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "Code context",
            "example": "ATPCO"
          }
        },
        "description": "A description of the ancillary with two description codes"
      },
      "EMDStatusENUM": {
        "type": "string",
        "enum": [
          "Open",
          "Refund",
          "Used",
          "Void"
        ]
      },
      "TotalAmount": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "TotalAmount"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "EMDQueryUpdateEMD": {
        "required": [
          "@type",
          "status"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "EMDQueryUpdateEMD"
          },
          "agencyCode": {
            "pattern": "([0-9]{8})",
            "type": "string",
            "description": "Assigned Type: c-1100:AgencyCodeIATA"
          },
          "status": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          },
          "dateOfIssue": {
            "type": "string",
            "description": "The date the EMD was issued",
            "format": "date"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ReservationDetailWrapper": {
        "properties": {
          "ReservationDetail": {
            "$ref": "#/components/schemas/ReservationDetail"
          }
        }
      },
      "ReservationDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reservation"
          },
          {
            "properties": {
              "Accounting": {
                "$ref": "#/components/schemas/Accounting"
              },
              "DocumentOverrides": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentOverrides"
                }
              },
              "CustomRule": {
                "$ref": "#/components/schemas/CustomRule"
              }
            }
          }
        ]
      },
      "Reservation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationID"
          },
          {
            "properties": {
              "Offer": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Offer"
                }
              },
              "Traveler": {
                "maxItems": 300,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Traveler"
                }
              },
              "TravelerProduct": {
                "maxItems": 3000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelerProduct"
                }
              },
              "FormOfPayment": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormOfPaymentID"
                }
              },
              "Payment": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "Receipt": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Receipt"
                }
              },
              "OfferLink": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferLink"
                }
              },
              "ReservationComment": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReservationComment"
                }
              },
              "PrimaryContact": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PrimaryContact"
                }
              },
              "TravelAgency": {
                "$ref": "#/components/schemas/TravelAgency"
              },
              "GroupName": {
                "maxLength": 64,
                "type": "string",
                "description": "Group name will be passed in the new Group object",
                "deprecated": true
              },
              "SpecialService": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpecialService"
                }
              },
              "Preference": {
                "$ref": "#/components/schemas/Preference"
              },
              "OrganizationLoyaltyProgram": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationLoyaltyProgram"
                }
              },
              "ShoppingCart": {
                "$ref": "#/components/schemas/ShoppingCart"
              },
              "ReservationDisplaySequence": {
                "$ref": "#/components/schemas/ReservationDisplaySequence"
              },
              "AgencyServiceFee": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgencyServiceFee"
                }
              },
              "autoDeleteDate": {
                "type": "string",
                "description": "The auto delete date represents the date that the Reservation will be kept active. Also known as retention segment or retention date.",
                "format": "date"
              },
              "notificationDate": {
                "type": "string",
                "description": "The notification date represents the date that the Reservation should be reviewed. Also known as ticket time limit date.",
                "format": "date"
              },
              "CustomAuxiliarySegment": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAuxiliarySegmentID"
                }
              },
              "Group": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        ]
      },
      "TravelerProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerProductID"
          },
          {
            "properties": {
              "TravelerRef": {
                "type": "string",
                "description": "A pointer to the traveler id"
              },
              "OfferRef": {
                "type": "string",
                "description": "A pointer to the Offer id"
              },
              "ProductRef": {
                "type": "string",
                "description": "A pointer to the product id"
              },
              "ConfirmationStatusEnum": {
                "$ref": "#/components/schemas/ConfirmationStatusEnum"
              }
            }
          }
        ]
      },
      "TravelerProductID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerProduct"
          },
          "id": {
            "type": "string"
          }
        },
        "description": "Discriminator classes TravelerProductID or TravelerProduct",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferLink": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferLink"
          },
          "OfferRef": {
            "type": "string"
          },
          "ParentOffer": {
            "$ref": "#/components/schemas/ParentOffer"
          }
        }
      },
      "ParentOffer": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ParentOffer"
          },
          "OfferRef": {
            "type": "string"
          },
          "ProductRef": {
            "type": "string"
          }
        },
        "description": "Discriminator class ParentOffer only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Preference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceID"
          },
          {
            "properties": {
              "AppliesTo": {
                "$ref": "#/components/schemas/AppliesTo"
              },
              "TravelerIdentifier": {
                "$ref": "#/components/schemas/TravelerIdentifier"
              }
            }
          }
        ]
      },
      "ShoppingCart": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ShoppingCart"
          },
          "Product": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAir"
            }
          }
        }
      },
      "ProductAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "required": [
              "FlightSegment",
              "PassengerFlight"
            ],
            "properties": {
              "totalDuration": {
                "type": "string",
                "description": "Total duration of all Segments that are part of this ProductAir",
                "example": "3245"
              },
              "FlightSegment": {
                "maxItems": 99,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightSegment"
                }
              },
              "PassengerFlight": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassengerFlight"
                }
              }
            }
          }
        ]
      },
      "FlightSegment": {
        "required": [
          "Flight",
          "sequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightSegment"
          },
          "id": {
            "type": "string",
            "description": "Local indentifier within a given message for this object.",
            "example": "2304"
          },
          "sequence": {
            "type": "integer",
            "description": "Segment sequence",
            "format": "int32",
            "example": 65
          },
          "connectionDuration": {
            "type": "string",
            "description": "The actual duration (in minutes) between",
            "example": "60"
          },
          "amenityRefs": {
            "type": "array",
            "description": "A list of amenity refs included on this flight",
            "items": {
              "type": "string"
            }
          },
          "Flight": {
            "$ref": "#/components/schemas/FlightID"
          },
          "OperationalStatus": {
            "$ref": "#/components/schemas/OperationalStatusENUM"
          },
          "boundFlightsInd": {
            "type": "boolean",
            "description": "If present and true, the Segments in this Connection must be sold and cancelled together.",
            "example": true
          },
          "CO2Actual": {
            "$ref": "#/components/schemas/Measurement"
          }
        }
      },
      "OperationalStatusENUM": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OperationalStatusENUM_Base"
          }
        }
      },
      "OperationalStatusENUM_Base": {
        "type": "string",
        "example": "FlightBoarding",
        "enum": [
          "FlightBoarding",
          "FlightCancelled",
          "FlightDeparted",
          "FlightPastScheduledDeparture",
          "NotAvailableUseSearch"
        ]
      },
      "PassengerFlight": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "PassengerFlight"
          },
          "passengerQuantity": {
            "type": "integer",
            "description": "Number of passengers of the specified passenger type code",
            "format": "int32",
            "example": 416
          },
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "Passenger type code",
            "example": "ADT"
          },
          "FlightProduct": {
            "maxItems": 99,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlightProduct"
            }
          }
        }
      },
      "FlightProduct": {
        "required": [
          "segmentSequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FlightProduct"
          },
          "segmentSequence": {
            "type": "array",
            "description": "The Segment sequence",
            "example": [
              23,
              45,
              67,
              89
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "classOfService": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]{1,2})",
            "type": "string",
            "description": "The class of service",
            "example": "F"
          },
          "cabin": {
            "$ref": "#/components/schemas/CabinAirEnum"
          },
          "fareBasisCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Fare basis code",
            "example": "YEE1Y"
          },
          "fareType": {
            "$ref": "#/components/schemas/FareTypeEnum"
          },
          "carCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The car code",
            "example": "P1234"
          },
          "valueCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The value code",
            "example": "365"
          },
          "amenityRefs": {
            "type": "array",
            "description": "This has been deprecated and now retruned in FlightSegment",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "Brand": {
            "$ref": "#/components/schemas/BrandID"
          },
          "CustomerLoyaltyCredit": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerLoyaltyCredit"
            }
          },
          "ClassOfServiceAvailability": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassOfServiceAvailability"
            }
          },
          "FareQualifier": {
            "$ref": "#/components/schemas/FareQualifierENUM"
          },
          "stopoverPriced": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "ticketDesignator": {
            "maxLength": 32,
            "type": "string",
            "description": "The ticket designator",
            "example": "BB5662Y"
          },
          "fareTypeCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The ATPCO fare type code",
            "example": "ERU"
          },
          "FareQualifierString": {
            "maxLength": 32,
            "type": "string",
            "description": "Fare qualifier to describe the type of private fare",
            "example": "Tour"
          }
        }
      },
      "FareTypeEnum": {
        "type": "string",
        "description": "Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only",
        "enum": [
          "PublicFare",
          "AgencyPrivateFare",
          "AirlinePrivateFare",
          "NetFare"
        ]
      },
      "CustomerLoyaltyCredit": {
        "required": [
          "CustomerLoyalty",
          "Earned",
          "Status"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CustomerLoyaltyCredit"
          },
          "CustomerLoyalty": {
            "$ref": "#/components/schemas/CustomerLoyalty"
          },
          "Earned": {
            "maxLength": 32,
            "type": "string",
            "description": "Represents the amount of award credit awarded for this offer\\/offering. Award credit can be used for purchasing goods and services through a customer loyalty program",
            "example": "500"
          },
          "Status": {
            "maxLength": 32,
            "type": "string",
            "description": "Represents the amount of status credit awarded for this offer\\/offering. Status credit allow a customer to move up the ladder of a customer loyalty program",
            "example": "gold"
          }
        }
      },
      "ClassOfServiceAvailability": {
        "properties": {
          "value": {
            "maxLength": 2,
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]{1,2})",
            "type": "string",
            "example": "F"
          },
          "number": {
            "type": "integer",
            "description": "The class of service number value",
            "format": "int32",
            "example": 2
          },
          "status": {
            "$ref": "#/components/schemas/AvailabilityStatusENUM"
          }
        },
        "description": "The class of service"
      },
      "AvailabilityStatusENUM": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AvailabilityStatusENUM_Base"
          }
        }
      },
      "AvailabilityStatusENUM_Base": {
        "type": "string",
        "example": "Available",
        "enum": [
          "Available",
          "NotAvailable",
          "Request",
          "Waitlist",
          "WaitlistClosed"
        ]
      },
      "ReservationDisplaySequence": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ReservationDisplaySequence"
          },
          "DisplaySequence": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplaySequence"
            }
          },
          "autoDeleteDateSequence": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The sequence of the autoDeleteDate (retention segment) within the Reservation",
            "format": "int32"
          },
          "AuxiliaryDisplaySequence": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuxiliaryDisplaySequence"
            }
          }
        },
        "description": "Discriminator classes ReservationDisplaySequence only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DisplaySequence": {
        "required": [
          "OfferRef",
          "displaySequence"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DisplaySequence"
          },
          "displaySequence": {
            "type": "string",
            "description": "The sequence the products are to be displayed for sequential date ordering",
            "format": "int32",
            "example": "1"
          },
          "OfferRef": {
            "type": "string",
            "description": "Offer reference"
          },
          "ProductRef": {
            "type": "string",
            "description": "Product reference. If blank, display sequence applies to all products within the Offer."
          },
          "Sequence": {
            "type": "integer",
            "description": "Segment sequence, if blank, display sequence applies to all segments within the product",
            "format": "int32",
            "example": 1
          }
        }
      },
      "AuxiliaryDisplaySequence": {
        "required": [
          "@type",
          "displaySequence"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "displaySequence": {
            "type": "integer",
            "format": "int32"
          },
          "CustomAuxiliarySegmentRef": {
            "type": "string"
          }
        },
        "description": "Discriminator classes AuxillaryDisplaySequence only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CustomAuxiliarySegmentID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "customAuxiliarySegmentRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "description": "Discriminator classes CustomAuxillarySegmentID or CustomAuxillarySegment",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupID"
          },
          {
            "required": [
              "GroupName",
              "totalGroupPlaces",
              "unallocatedPlaces"
            ],
            "properties": {
              "unallocatedPlaces": {
                "type": "integer",
                "description": "The amount of unallocated places available which is the difference between the group size and the number of Travelers associated",
                "format": "int32",
                "example": 5
              },
              "totalGroupPlaces": {
                "type": "integer",
                "description": "The total number of passenger places available for this group booking",
                "format": "int32",
                "example": 15
              },
              "GroupName": {
                "maxLength": 128,
                "type": "string",
                "example": "EUROPAGLOBALCONFERENCE"
              }
            }
          }
        ]
      },
      "GroupID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Group"
          },
          "id": {
            "type": "string"
          },
          "GroupRef": {
            "type": "string"
          },
          "Identifier": {
            "$ref": "#/components/schemas/Identifier"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CustomRule": {
        "properties": {
          "PseudoCityCode": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "The PCC that the custom rule belongs to"
          },
          "RuleRecord": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleRecord"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomRuleID"
          }
        ]
      },
      "RuleRecord": {
        "required": [
          "@type",
          "RuleRecordName",
          "Sequence"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "sequence": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The sequence of the RuleRecord line",
            "format": "int32"
          },
          "RuleRecordName": {
            "maxLength": 32,
            "type": "string",
            "description": "The name of the rule record",
            "example": "CTCM"
          },
          "RuleText": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleText"
            }
          }
        },
        "description": "Discriminator class RuleRecord only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RuleText": {
        "required": [
          "@type",
          "StringText",
          "sequence"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "sequence": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The sequence of the RuleText line",
            "format": "int32"
          },
          "StringText": {
            "maxLength": 512,
            "type": "string"
          }
        },
        "description": "Discriminator class RuleText only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FlightDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Flight"
          },
          {
            "properties": {
              "AvailabilitySourceCode": {
                "$ref": "#/components/schemas/AvailabilitySourceCodeENUM"
              }
            }
          }
        ]
      },
      "Flight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FlightID"
          },
          {
            "required": [
              "Arrival",
              "Departure",
              "carrier",
              "number"
            ],
            "properties": {
              "distance": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The flight travelled distance",
                "format": "int32",
                "example": 6574
              },
              "stops": {
                "type": "integer",
                "description": "Number of stops",
                "format": "int32",
                "example": 2
              },
              "duration": {
                "type": "string",
                "description": "Elapsed flight time represented in ISO 8601 format",
                "example": "T1430.5"
              },
              "carrier": {
                "pattern": "([a-zA-Z0-9]{2,3})",
                "type": "string",
                "description": "The airline code",
                "example": "BA"
              },
              "number": {
                "pattern": "[0-9]{1,4}[A-Z]?|OPEN|ARNK",
                "type": "string",
                "description": "Flight number",
                "example": "98"
              },
              "operatingCarrier": {
                "pattern": "([a-zA-Z0-9]{2,3})",
                "type": "string",
                "description": "The airline code",
                "example": "JFK"
              },
              "operatingCarrierName": {
                "maxLength": 128,
                "type": "string",
                "description": "The operating carrier name",
                "example": "Liberty Aerospace"
              },
              "operatingCarrierNumber": {
                "pattern": "[0-9]{1,4}[A-Z]?|OPEN|ARNK",
                "type": "string",
                "description": "The operating carrier flight number"
              },
              "equipment": {
                "pattern": "([A-Z0-9]{3})?",
                "type": "string",
                "description": "Air Equip Code IATA",
                "example": "100"
              },
              "Departure": {
                "$ref": "#/components/schemas/Departure"
              },
              "Arrival": {
                "$ref": "#/components/schemas/Arrival"
              },
              "IntermediateStop": {
                "maxItems": 9,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IntermediateStop"
                }
              },
              "subjectToGovernmentApprovalInd": {
                "type": "boolean",
                "description": "If true, this flight schedule is yet to receive government approval",
                "example": true
              }
            }
          }
        ]
      },
      "IntermediateStop": {
        "properties": {
          "value": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string"
          },
          "arrivalFlightDuration": {
            "type": "string",
            "description": "ArrivalFlight Duration stopped at this location",
            "example": "PT2H35M"
          },
          "departureFlightDuration": {
            "type": "string",
            "description": "DepartureFlight Duration stopped at this location",
            "example": "PT1H35M"
          },
          "duration": {
            "type": "string",
            "description": "Duration stopped at this location",
            "example": "PT1H35M"
          },
          "equipment": {
            "pattern": "([A-Z0-9]{3})?",
            "type": "string",
            "description": "Aircraft equipment.",
            "example": "DME"
          },
          "arrivalDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "The local date the aircraft arrives at the intermediate stop",
            "example": "2022-04-30"
          },
          "departureDate": {
            "pattern": "(\\d{4}-\\d{2}-\\d{2})",
            "type": "string",
            "description": "The local date the aircraft departs from the intermediate stop",
            "example": "2022-04-30"
          },
          "arrivalTime": {
            "pattern": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$",
            "type": "string",
            "description": "The local time the aircraft arrives at the intermediate stop",
            "example": "68400"
          },
          "departurelTime": {
            "pattern": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$",
            "type": "string",
            "description": "The local time the aircraft departs from the intermediate stop",
            "example": "72000"
          },
          "arrivalTerminal": {
            "maxLength": 4096,
            "pattern": "([0-9a-zA-Z]+)?",
            "type": "string",
            "description": "Arrival Terminal of the Airport",
            "example": "Terminal2"
          },
          "departureTerminal": {
            "maxLength": 4096,
            "pattern": "([0-9a-zA-Z]+)?",
            "type": "string",
            "description": "Departure Terminal of the Airport",
            "example": "Terminal4"
          }
        },
        "description": "An intermediate stop location and duration"
      },
      "TermsAndConditionsAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditions"
          },
          {
            "properties": {
              "BaggageAllowance": {
                "maxItems": 99,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaggageAllowance"
                }
              },
              "FareRuleIdentifierRef": {
                "$ref": "#/components/schemas/IdentifierRef"
              },
              "Restriction": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Restriction"
                }
              },
              "OrganizationInformation": {
                "$ref": "#/components/schemas/OrganizationInformation"
              },
              "ValidatingAirline": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidatingAirline"
                }
              },
              "BaggageRecheck": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaggageRecheck"
                }
              },
              "TicketingAgency": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketingAgency"
                }
              },
              "PaymentTimeLimit": {
                "type": "string",
                "description": "The date and time by which the Offer must be paid for once the Reservation is completed",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "PromotionalCode": {
                "$ref": "#/components/schemas/PromotionalCode"
              },
              "Penalties": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Penalties"
                }
              },
              "FareGuaranteePolicy": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FareGuaranteePolicy"
                }
              },
              "PricingAgency": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PricingAgency"
                }
              },
              "instantPurchaseInd": {
                "type": "boolean",
                "description": "If true the Offer\\/Offering must be paid for at the same time as creating the Reservation",
                "example": true
              },
              "secureFlightPassengerDataRequiredInd": {
                "type": "boolean",
                "description": "If true, Secure Flight Passenger Data must be input for all Travelers to complete the Reservation",
                "example": true
              },
              "TourCodes": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TourCodes"
                }
              },
              "DocumentValidDateRange": {
                "$ref": "#/components/schemas/DocumentValidDateRange"
              },
              "flightPassInd": {
                "type": "boolean",
                "description": "If true, this offer is made in conjunction with a flight pass account"
              }
            }
          }
        ]
      },
      "BaggageAllowance": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BaggageAllowanceDetail"
          },
          "passengerTypeCodes": {
            "type": "array",
            "description": "List of passenger type codes",
            "items": {
              "maxLength": 5,
              "minLength": 3,
              "pattern": "([a-zA-Z0-9]{3,5})",
              "type": "string",
              "example": "CHD"
            }
          },
          "baggageType": {
            "$ref": "#/components/schemas/BaggageTypeEnum"
          },
          "validatingAirlineCode": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "validating baggage airline code",
            "example": "BA"
          },
          "ProductRef": {
            "type": "array",
            "description": "A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.",
            "example": [
              "baloon",
              "vase",
              "pillow"
            ],
            "items": {
              "type": "string"
            }
          },
          "BaggageItem": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaggageItem"
            }
          },
          "SegmentSequenceList": {
            "type": "array",
            "description": "Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.",
            "example": [
              12,
              45,
              3,
              2
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "Text": {
            "maxItems": 35,
            "type": "array",
            "example": [
              "Blue baggage allowed",
              "Purple baggage allowed"
            ],
            "items": {
              "maxLength": 128,
              "type": "string"
            }
          }
        },
        "description": "Discriminator classes BaggageAllowance and BaggageAllowanceDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BaggageTypeEnum": {
        "type": "string",
        "example": "CarryOn",
        "enum": [
          "CarryOn",
          "FirstCheckedBag",
          "SecondCheckedBag",
          "AdditionalBags",
          "BaggageEmbargo"
        ]
      },
      "BaggageItem": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "BaggageItem"
          },
          "quantity": {
            "type": "integer",
            "description": "Baggage item quantity",
            "format": "int32",
            "example": 2
          },
          "Measurement": {
            "maxItems": 6,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Measurement"
            }
          },
          "BaggageFee": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "Text": {
            "maxLength": 128,
            "type": "string",
            "description": "Text returned from the shop response",
            "example": "The payment was correct"
          }
        }
      },
      "Restriction": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string",
            "example": "No late arrivals"
          },
          "segmentSequenceList": {
            "type": "array",
            "description": "Segment sequence list",
            "example": [
              2,
              4,
              6,
              8,
              10
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "productRef": {
            "type": "array",
            "description": "The productRef which the restriction applies to",
            "example": [
              "p1",
              "p2",
              "p3",
              "p4"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Restriction"
      },
      "ValidatingAirline": {
        "required": [
          "ValidatingAirline"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ValidatingAirline"
          },
          "SegmentSequenceList": {
            "type": "array",
            "description": "The segmentSequenceList the validatingCarrier applies to",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ValidatingAirline": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "Represents the airline responsible for ticketing\\/fulfillment of this Offer",
            "example": "QA"
          },
          "ProductRef": {
            "type": "array",
            "description": "The productRef the validatingCarrier applies to",
            "example": [
              "product1",
              "product2",
              "product3"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BaggageRecheck": {
        "required": [
          "ArrivalFlight",
          "At",
          "DepartureFlight"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "BaggageRecheck"
          },
          "At": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "The city where the baggage recheck is required",
            "example": "MEX"
          },
          "ArrivalFlight": {
            "$ref": "#/components/schemas/FlightID"
          },
          "DepartureFlight": {
            "$ref": "#/components/schemas/FlightID"
          }
        }
      },
      "TicketingAgency": {
        "required": [
          "Code"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TicketingAgency"
          },
          "Code": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "The code of the ticketing agency",
            "example": "A561510"
          },
          "ProductRef": {
            "type": "array",
            "description": "The Product Ref the TicketingAgency applies to",
            "example": [
              "p1",
              "p2",
              "p3"
            ],
            "items": {
              "type": "string"
            }
          },
          "SegmentSequenceList": {
            "type": "array",
            "description": "The segmentSequenceList the TicketingAgency applies to",
            "example": [
              31,
              28,
              43,
              42,
              51,
              26
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "FareGuaranteePolicy": {
        "required": [
          "EligibleforADMReview"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FareGuaranteePolicy"
          },
          "passengerTypeCodes": {
            "type": "array",
            "description": "The list of passenger type codes",
            "items": {
              "maxLength": 5,
              "minLength": 3,
              "pattern": "([a-zA-Z0-9]{3,5})",
              "type": "string",
              "example": "UMNR"
            }
          },
          "EligibleforADMReview": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "Code": {
            "$ref": "#/components/schemas/Code"
          }
        }
      },
      "Code": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "INS"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "Code Context",
            "example": "ACRISS"
          }
        },
        "description": "Any code used to specify an item, for example a type of traveler, service code, room amenity, etc."
      },
      "PricingAgency": {
        "required": [
          "Code"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "ProductRef": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Code": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "The Pricing Agency PCC"
          },
          "SegmentSequenceList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "DocumentValidDateRange": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "DocumentValidDateRange"
          },
          "ProductRef": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIdentifier"
            }
          },
          "SegmentSequenceList": {
            "type": "array",
            "description": "The segmentSequence within the product the action is being requested for. Used when multiple flights exist within a product. Only one product may be selected with this option.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ValidDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "PriceBreakdownAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "The quantity value",
                "format": "int32",
                "example": 23
              },
              "requestedPassengerType": {
                "maxLength": 5,
                "minLength": 3,
                "pattern": "([a-zA-Z0-9]{3,5})",
                "type": "string",
                "description": "The requested passenger type code",
                "example": "CHD"
              },
              "FiledAmount": {
                "$ref": "#/components/schemas/FiledAmount"
              },
              "Discount": {
                "$ref": "#/components/schemas/Discount"
              },
              "NetFareInfo": {
                "$ref": "#/components/schemas/NetFareInfo"
              },
              "TravelerIdentifierRef": {
                "$ref": "#/components/schemas/TravelerIdentifierRef"
              },
              "NetBaseAmount": {
                "$ref": "#/components/schemas/FiledAmount"
              },
              "FareCalculation": {
                "maxLength": 512,
                "type": "string",
                "example": "LON BA SYD R564.00YEE1Y BA LON R564.00YEE1Y NUC1128.00END ROE0.787855"
              },
              "Surcharges": {
                "$ref": "#/components/schemas/Surcharges"
              },
              "TravelerRefs": {
                "type": "array",
                "description": "The Traveler references this PriceBreakdown relates to",
                "items": {
                  "type": "string"
                }
              },
              "PaidTaxes": {
                "$ref": "#/components/schemas/PaidTaxes"
              },
              "RequestedPricingModifiers": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RequestedPricingModifiers"
                }
              }
            }
          }
        ]
      },
      "Discount": {
        "required": [
          "codeAuthority",
          "currencyCode",
          "decimalPlace"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 20.22
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "The marketing description for the discount",
            "example": "Spring discount on group bookings"
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Currency code of the city.",
            "example": "USD"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Code Authority",
            "example": "ISO"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Number of decimal places",
            "format": "int32",
            "example": 2
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Decimal Authority",
            "example": "ISO"
          }
        },
        "description": "Corporate or Other discount"
      },
      "NetFareInfo": {
        "properties": {
          "passengerTypeCode": {
            "maxLength": 5,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,5})",
            "type": "string",
            "description": "PassengerTypeCode"
          },
          "NetFareBreakdownConstruction": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetFareBreakdownConstruction"
            }
          },
          "TicketBaseAudit": {
            "$ref": "#/components/schemas/FiledAmount"
          },
          "TicketBasePassenger": {
            "$ref": "#/components/schemas/TicketBasePassenger"
          }
        }
      },
      "NetFareBreakdownConstruction": {
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string"
          },
          "fareType": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          },
          "rateOfExchange": {
            "type": "number",
            "description": "The rate of exchange applied to the fare breakdown",
            "format": "float"
          }
        }
      },
      "TicketBasePassenger": {
        "required": [
          "codeAuthority",
          "decimalPlace"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Assigned Type: c-1100:CurrencyCode"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:CodeContext"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Assigned Type: c-1100:CurrencyMinorUnit",
            "format": "int32"
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:CodeContext"
          },
          "bTInd": {
            "type": "boolean",
            "description": "If true, this is a bulk ticket fare"
          },
          "iTInd": {
            "type": "boolean",
            "description": "If true, this is an inclusive tour fare"
          }
        },
        "description": "The monetary value"
      },
      "Surcharges": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SurchargesDetail"
          },
          "TotalSurcharges": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 211.11
          },
          "approximateInd": {
            "type": "boolean",
            "description": "if true, the surcharge amounts are approximate",
            "example": false
          }
        },
        "description": "Discriminator classes Surcharges or Surcharges Detail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RequestedPricingModifiers": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RequestedPricingModifiers"
          },
          "PassengerCriteria": {
            "$ref": "#/components/schemas/PassengerCriteria"
          },
          "PricingModifiersAir": {
            "$ref": "#/components/schemas/PricingModifiersAir"
          },
          "CabinPreference": {
            "$ref": "#/components/schemas/CabinPreference"
          },
          "FlightType": {
            "$ref": "#/components/schemas/FlightType"
          },
          "lowFareFinderInd": {
            "type": "boolean"
          },
          "keepToBrandInd": {
            "type": "boolean"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "BuildFromProductsRequestAirSearch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromProductsRequestAir"
          },
          {
            "properties": {
              "SearchModifiersAir": {
                "$ref": "#/components/schemas/SearchModifiersAir"
              }
            }
          }
        ]
      },
      "BuildFromProductsRequestAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromProductsRequest"
          },
          {
            "required": [
              "PassengerCriteria",
              "PricingModifiersAir",
              "ProductCriteriaAir"
            ],
            "properties": {
              "PricingModifiersAir": {
                "$ref": "#/components/schemas/PricingModifiersAir"
              },
              "PassengerCriteria": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassengerCriteria"
                }
              },
              "ProductCriteriaAir": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductCriteriaAir"
                }
              },
              "CustomResponseModifiersAir": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomResponseModifiersAir"
                }
              }
            }
          }
        ]
      },
      "BuildFromCatalogProductOfferingsRequestAirSearch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequestAir"
          },
          {
            "properties": {
              "SearchModifiersAir": {
                "$ref": "#/components/schemas/SearchModifiersAir"
              }
            }
          }
        ]
      },
      "BuildFromCatalogProductOfferingsRequestAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
          },
          {
            "properties": {
              "PricingModifiersAir": {
                "$ref": "#/components/schemas/PricingModifiersAir"
              },
              "CabinPreference": {
                "$ref": "#/components/schemas/CabinPreference"
              },
              "FareRuleCategory": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FareRuleCategoryEnum"
                }
              },
              "FareRuleType": {
                "$ref": "#/components/schemas/FareRuleEnum"
              },
              "CustomResponseModifiersAir": {
                "$ref": "#/components/schemas/CustomResponseModifiersAir"
              },
              "lowFareFinderInd": {
                "type": "boolean",
                "description": "If true, the price service will return the lowest fare available for the itinerary requested",
                "example": true
              },
              "reCheckInventoryInd": {
                "type": "boolean",
                "description": "If true, the price service will recheck inventory at the time of pricing the Offer",
                "example": true
              },
              "inhibitBrandContentInd": {
                "type": "boolean",
                "description": "If true, Brand content will not be returned with the Offer",
                "example": true
              },
              "validateInventoryInd": {
                "type": "boolean",
                "description": "If true, the flight inventory will be checked during the price step",
                "example": true
              }
            }
          }
        ]
      },
      "PricingModifiersAirDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingModifiersAir"
          },
          {
            "properties": {
              "Brand": {
                "$ref": "#/components/schemas/Brand"
              }
            }
          }
        ]
      },
      "FareSelectionDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FareSelection"
          },
          {
            "properties": {
              "validatingCarrier": {
                "pattern": "([a-zA-Z0-9]{2,3})",
                "type": "string",
                "description": "Airline code",
                "example": "KA"
              },
              "prohibitMinStayFaresInd": {
                "type": "boolean",
                "description": "If present and true, fares with minimum stays will not be returned",
                "example": true
              },
              "prohibitMaxStayFaresInd": {
                "type": "boolean",
                "description": "If present and true, fares with maximum stays will not be returned",
                "example": true
              },
              "refundableOnlyInd": {
                "type": "boolean",
                "description": "This field is deprecated. Use RefundOptions for refunadability options",
                "example": true
              },
              "prohibitAdvancePurchaseFaresInd": {
                "type": "boolean",
                "description": "If present and true, fares with advance purchase requirements will not be returned",
                "example": true
              },
              "prohibitUnbundledFaresInd": {
                "type": "boolean",
                "example": true
              },
              "prohibitRefundableFaresInd": {
                "type": "boolean",
                "description": "This field is deprecated. Use RefundOptions for refunadability options",
                "example": true
              }
            }
          }
        ]
      },
      "ChangeIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Change"
          },
          {
            "properties": {
              "IndeterminateInd": {
                "type": "string",
                "description": "structured fare rules could not be determined for this category",
                "example": "true"
              }
            }
          }
        ]
      },
      "ChangePermitted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Change"
          },
          {
            "required": [
              "penaltyTypes"
            ],
            "properties": {
              "penaltyTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PenaltyTypeEnum"
                }
              },
              "PenaltyAppliesTo": {
                "$ref": "#/components/schemas/PenaltyAppliesToEnum"
              },
              "Penalty": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Penalty"
                }
              },
              "higherPenatltyAppliesInd": {
                "type": "boolean",
                "description": "If true, when an amount and a percent are specified in the Penalty then the higher of these apply",
                "example": true
              },
              "MinimumAdcolAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "ChangeMethod": {
                "$ref": "#/components/schemas/ChangeMethodEnum"
              },
              "ResidualValuePenalty": {
                "$ref": "#/components/schemas/ResidualValuePenaltyEnum"
              },
              "PeriodBeforeDeparture": {
                "$ref": "#/components/schemas/PeriodBeforeDeparture"
              },
              "PenaltyException": {
                "$ref": "#/components/schemas/PenaltyException"
              }
            }
          }
        ]
      },
      "PenaltyTypeEnum": {
        "type": "string",
        "enum": [
          "BeforeDeparture",
          "AfterDeparture",
          "Anytime",
          "NoShow",
          "Minimum",
          "Maximum",
          "ExchangeRequired",
          "ExchangeNotRequired"
        ]
      },
      "PenaltyAppliesToEnum": {
        "type": "string",
        "description": "Penalty applicable list",
        "example": "OneWay",
        "enum": [
          "OneWay",
          "RoundTrip",
          "PerTicket",
          "PerCoupon",
          "PerDirectionOfTravel"
        ]
      },
      "Penalty": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PenaltyAmount"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "description": "Discriminator classes PenaltyAmount or PenaltyPercent",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ChangeMethodEnum": {
        "type": "string",
        "description": "Ticket must be reissued, revalidated or both",
        "enum": [
          "Reissue",
          "Revalidation",
          "Both"
        ],
        "x-enumDescriptions": {
          "Reissue": "Ticket must be reissued",
          "Revalidation": "Ticket must be revalidated",
          "Both": "Ticket May be reissued or revalidated"
        }
      },
      "ResidualValuePenaltyEnum": {
        "type": "string",
        "enum": [
          "Ignore",
          "Refund",
          "Subtract",
          "SubtractFromNonRefundable"
        ],
        "x-enumDescriptions": {
          "Ignore": "Residual value is forfeited and not refunded",
          "Refund": "Residual value will be refunded",
          "Subtract": "Any residual value will be subtracted from the penalty amount due and any additional will be refunded to the original form of payment",
          "SubtractFromNonRefundable": "Any residual value from a non refundable fare may be used to subtract from the penalty. Any additional residual value will be forfeited"
        }
      },
      "PeriodBeforeDeparture": {
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "period": {
            "$ref": "#/components/schemas/DurationUnitEnum"
          }
        },
        "description": "The first occurrence (if day of week) or the unit of time"
      },
      "DurationUnitEnum": {
        "type": "string",
        "description": "Defines the Units that can be applied to Stay restrictions.",
        "example": "Months",
        "enum": [
          "Minutes",
          "Hours",
          "Days",
          "Months",
          "MON",
          "TUES",
          "WED",
          "THU",
          "FRI",
          "SAT",
          "SUN"
        ]
      },
      "PenaltyException": {
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "period": {
            "$ref": "#/components/schemas/DurationUnitEnum"
          },
          "appliesAfterReservationInd": {
            "type": "boolean",
            "description": "If true, exception applies after reservation has been made"
          },
          "appliesAfterTicketingInd": {
            "type": "boolean",
            "description": "If true, exception applies after ticketing"
          }
        },
        "description": "The first occurrence (if day of week) or the unit of time"
      },
      "ChangeNotPermitted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Change"
          },
          {
            "properties": {
              "NotPermittedInd": {
                "type": "string",
                "description": "Changes are not permitted",
                "example": "true"
              },
              "penaltyTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PenaltyTypeEnum"
                }
              },
              "PeriodBeforeDeparture": {
                "$ref": "#/components/schemas/PeriodBeforeDeparture"
              },
              "taxesNonRefundableInd": {
                "type": "boolean",
                "description": "if true, for non-refundable fares taxes are also non-refundable"
              }
            }
          }
        ]
      },
      "CancelIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cancel"
          },
          {
            "properties": {
              "IndeterminateInd": {
                "type": "string",
                "description": "structured fare rules could not be determined for this category",
                "example": "true"
              }
            }
          }
        ]
      },
      "CancelPermitted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cancel"
          },
          {
            "required": [
              "penaltyTypes"
            ],
            "properties": {
              "penaltyTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PenaltyTypeEnum"
                }
              },
              "PenaltyAppliesTo": {
                "$ref": "#/components/schemas/PenaltyAppliesToEnum"
              },
              "Penalty": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Penalty"
                }
              },
              "higherPenatltyAppliesInd": {
                "type": "boolean",
                "description": "If true, when an amount and a percent are specified in the Penalty then the higher of these apply",
                "example": true
              },
              "MinimumAdcolAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              },
              "ChangeMethod": {
                "$ref": "#/components/schemas/ChangeMethodEnum"
              },
              "ResidualValuePenalty": {
                "$ref": "#/components/schemas/ResidualValuePenaltyEnum"
              },
              "PeriodBeforeDeparture": {
                "$ref": "#/components/schemas/PeriodBeforeDeparture"
              },
              "PenaltyException": {
                "$ref": "#/components/schemas/PenaltyException"
              }
            }
          }
        ]
      },
      "CancelNotPermitted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cancel"
          },
          {
            "properties": {
              "NotPermittedInd": {
                "type": "string",
                "description": "Changes are not permitted",
                "example": "true"
              },
              "penaltyTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PenaltyTypeEnum"
                }
              },
              "PeriodBeforeDeparture": {
                "$ref": "#/components/schemas/PeriodBeforeDeparture"
              },
              "taxesNonRefundableInd": {
                "type": "boolean",
                "description": "if true, for non-refundable fares taxes are also non-refundable"
              }
            }
          }
        ]
      },
      "BaggageAllowanceDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaggageAllowance"
          },
          {
            "properties": {
              "url": {
                "type": "string",
                "description": "Url for the airline's baggage information web site",
                "example": "https://airline/baggage"
              }
            }
          }
        ]
      },
      "BuildOptionsFromProducts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildOptions"
          },
          {
            "required": [
              "BuildFromProductsRequest"
            ],
            "properties": {
              "BuildFromProductsRequest": {
                "$ref": "#/components/schemas/BuildFromProductsRequest"
              },
              "sortBy": {
                "$ref": "#/components/schemas/SortByEnum"
              }
            }
          }
        ]
      },
      "ReferenceListFlight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "Flight"
            ],
            "properties": {
              "Flight": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Flight"
                }
              }
            }
          }
        ]
      },
      "ReferenceListAmenity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "Amenity"
            ],
            "properties": {
              "Amenity": {
                "maxItems": 1000,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Amenity"
                }
              }
            }
          }
        ]
      },
      "Amenity": {
        "required": [
          "@type",
          "Category",
          "id"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Amenity"
          },
          "id": {
            "type": "string",
            "description": "A unique amenity id used for referencing"
          },
          "Category": {
            "maxLength": 128,
            "type": "string",
            "description": "The route happy amenity category"
          },
          "Text": {
            "$ref": "#/components/schemas/AmenityText"
          }
        },
        "description": "Discriminator class Amenity only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AmenityText": {
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "CalculatedFareAdjustmentDiscount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CalculatedFareAdjustment"
          },
          {
            "properties": {
              "AmountPercent": {
                "$ref": "#/components/schemas/AmountPercent"
              }
            }
          }
        ]
      },
      "CalculatedFareAdjustmentIncrease": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CalculatedFareAdjustment"
          },
          {
            "required": [
              "AmountPercent"
            ],
            "properties": {
              "AmountPercent": {
                "$ref": "#/components/schemas/AmountPercent"
              }
            }
          }
        ]
      },
      "ManualFareAdjustmentIncrease": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManualFareAdjustment"
          },
          {
            "required": [
              "AmountPercent"
            ],
            "properties": {
              "AmountPercent": {
                "$ref": "#/components/schemas/AmountPercent"
              }
            }
          }
        ]
      },
      "ManualFareAdjustmentDiscount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManualFareAdjustment"
          },
          {
            "required": [
              "AmountPercent"
            ],
            "properties": {
              "AmountPercent": {
                "$ref": "#/components/schemas/AmountPercent"
              }
            }
          }
        ]
      },
      "ReferenceListProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "properties": {
              "Product": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        ]
      },
      "ReferenceListTraveler": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "properties": {
              "Traveler": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Traveler"
                }
              }
            }
          }
        ]
      },
      "ReferenceListOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "properties": {
              "Offer": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          }
        ]
      },
      "ReferenceListBrand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "properties": {
              "Brand": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          }
        ]
      },
      "ReferenceListTermsAndConditions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "properties": {
              "TermsAndConditions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermsAndConditions"
                }
              }
            }
          }
        ]
      },
      "SurchargesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Surcharges"
          },
          {
            "required": [
              "Surcharge"
            ],
            "properties": {
              "Surcharge": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Surcharge"
                }
              }
            }
          }
        ]
      },
      "Surcharge": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 12
          },
          "currencyCode": {
            "pattern": "[a-zA-Z]{3}",
            "type": "string",
            "description": "Sur charge currency code",
            "example": "USD"
          },
          "surchargeCode": {
            "maxLength": 512,
            "type": "string",
            "description": "Sur charge code",
            "example": "ADDITIONAL COSTS"
          },
          "reportingAuthority": {
            "maxLength": 512,
            "type": "string",
            "description": "Sur charge reporting authority",
            "example": "Federal register"
          },
          "purpose": {
            "maxLength": 512,
            "type": "string",
            "description": "Sur charge purpose",
            "example": "tax for extra service"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Description",
            "example": "Additional data"
          },
          "surchargeApplication": {
            "$ref": "#/components/schemas/ApplicationEnum"
          },
          "surchargeFrequency": {
            "$ref": "#/components/schemas/FrequencyEnum"
          },
          "codeAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Surcharge code authority",
            "example": "ISO 4217"
          },
          "decimalPlace": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "pattern": "([0-4])",
            "type": "integer",
            "description": "Decimal place for the currency unit",
            "format": "int32",
            "example": 4
          },
          "decimalAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Currency code decimal authority",
            "example": "ISO 4217"
          }
        },
        "description": "The fee amount with feecode and reporting informtion"
      },
      "ApplicationEnum": {
        "type": "string",
        "description": "Application values like perperson , peroom",
        "enum": [
          "PerPerson",
          "PerRoom",
          "PerAccommodation",
          "PerHouse",
          "PerApartment",
          "PerAdult",
          "PerChild"
        ]
      },
      "FrequencyEnum": {
        "type": "string",
        "description": "Stay frequency like PerNight, PerDay",
        "enum": [
          "PerNight",
          "PerDay",
          "PerStay",
          "PerWeek",
          "RoundTrip",
          "OneWay"
        ]
      },
      "FeesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Fees"
          },
          {
            "properties": {
              "Fee": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Fee"
                }
              }
            }
          }
        ]
      },
      "Fee": {
        "required": [
          "FeeAmountOrPercent"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Fee"
          },
          "feeCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Fee code",
            "example": "1011"
          },
          "reportingAuthority": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies the reporting authority.",
            "example": "OPRA"
          },
          "purpose": {
            "maxLength": 32,
            "type": "string",
            "description": "Fee purpose",
            "example": "Service charge"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "Fee description"
          },
          "feeApplication": {
            "$ref": "#/components/schemas/ApplicationEnum"
          },
          "feeFrequency": {
            "$ref": "#/components/schemas/FrequencyEnum"
          },
          "FeeAmountOrPercent": {
            "$ref": "#/components/schemas/FeeAmountOrPercent"
          },
          "Tax": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          },
          "includedinBaseInd": {
            "type": "boolean",
            "description": "If the fee is included in the Base Price"
          },
          "includedInTotalPriceInd": {
            "type": "boolean",
            "description": "Returned in Hotel APIs when a fee is included in the TotalPrice. Default behavior is for fees not to be included in TotalPrice"
          }
        }
      },
      "FeeAmountOrPercent": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FeeAmountOrPercentAmount"
          },
          "application": {
            "$ref": "#/components/schemas/CommissionEnum"
          }
        },
        "description": "Discriminator classes FeeAmountPercentAmount or FeeAmountPercentPercent",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TaxesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Taxes"
          },
          {
            "properties": {
              "Tax": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tax"
                }
              },
              "TaxPercent": {
                "$ref": "#/components/schemas/TaxPercent"
              }
            }
          }
        ]
      },
      "TaxPercent": {
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "format": "float",
            "example": 45.54
          },
          "taxCode": {
            "maxLength": 512,
            "type": "string",
            "description": "Tax code",
            "example": "971 - IRS Notice"
          },
          "reportingAuthority": {
            "maxLength": 512,
            "type": "string",
            "description": "Tax reporting authority",
            "example": "Geogia department of revenue"
          },
          "purpose": {
            "maxLength": 512,
            "type": "string",
            "description": "Purpose of tax",
            "example": "statutory tax"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Description",
            "example": "1.5% of SGST"
          },
          "includedInBase": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        }
      },
      "ErrorWarningDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorWarning"
          },
          {
            "required": [
              "SourceID"
            ],
            "properties": {
              "category": {
                "maxLength": 128,
                "type": "string",
                "description": "A category to assist in identifying the error",
                "example": "VALIDATION"
              },
              "SourceID": {
                "maxLength": 128,
                "type": "string",
                "description": "The identifier of the source system sending the error or warning"
              },
              "SourceCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The error or warning code returned by the source airline or host system"
              },
              "SourceDescription": {
                "maxLength": 4096,
                "type": "string",
                "description": "The error or warning message as it is returned by the source airline or host system",
                "deprecated": true
              }
            }
          }
        ]
      },
      "ErrorWarning": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error"
          },
          "StatusCode": {
            "type": "integer",
            "description": "Http standard response code",
            "format": "int32",
            "deprecated": true
          },
          "Message": {
            "maxLength": 4096,
            "type": "string",
            "description": "The Travelport standardized error or warning message"
          },
          "NameValuePair": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            }
          }
        },
        "description": "Discriminator classes ErrorWarning or ErrorWarningDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ErrorDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "category": {
                "maxLength": 128,
                "type": "string",
                "description": "A category to assist in identifying the error",
                "example": "Traveler"
              },
              "SourceID": {
                "maxLength": 128,
                "type": "string",
                "description": "The identifier of the source system sending the error or warning"
              },
              "SourceCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The error or warning code returned by the source airline or host system"
              },
              "SourceDescription": {
                "maxLength": 4096,
                "type": "string",
                "description": "The error or warning message as it is returned by the source airline or host system",
                "deprecated": true
              }
            }
          }
        ]
      },
      "WarningDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Warning"
          },
          {
            "properties": {
              "category": {
                "maxLength": 128,
                "type": "string",
                "description": "A category to assist in identifying the error",
                "example": "Traveler"
              },
              "SourceID": {
                "maxLength": 128,
                "type": "string",
                "description": "The identifier of the source system sending the error or warning"
              },
              "SourceCode": {
                "maxLength": 32,
                "type": "string",
                "description": "The error or warning code returned by the source airline or host system"
              },
              "SourceDescription": {
                "maxLength": 4096,
                "type": "string",
                "description": "The error or warning message as it is returned by the source airline or host system",
                "deprecated": true
              }
            }
          }
        ]
      },
      "ModifyPriceDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModifyPrice"
          },
          {
            "properties": {
              "PriceBreakdown": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceBreakdown"
                }
              }
            }
          }
        ]
      },
      "ModifyPrice": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ModifyPriceDetail"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "2"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The total amount not including taxes and\\/or fees",
            "format": "float",
            "example": 20.2
          },
          "TotalTaxes": {
            "type": "number",
            "description": "The total of the taxes included in the total price",
            "format": "float",
            "example": 34.4
          },
          "TotalFees": {
            "type": "number",
            "description": "The total of the fees included in the total price",
            "format": "float",
            "example": 201
          },
          "TotalPrice": {
            "type": "number",
            "description": "The total price of the product in the currency indicated",
            "format": "float",
            "example": 34
          },
          "VendorCurrencyTotal": {
            "$ref": "#/components/schemas/VendorCurrencyTotal"
          }
        },
        "description": "Discriminator classes ModifyPrice or ModifyPriceDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DepartureDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Departure"
          },
          {
            "properties": {
              "terminal": {
                "maxLength": 4096,
                "pattern": "([0-9a-zA-Z]+)?",
                "type": "string",
                "description": "Departure/Arrival terminal",
                "example": "Terminal 1"
              },
              "country": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "Country of to departure or arrival",
                "example": "US"
              }
            }
          }
        ]
      },
      "ArrivalDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Arrival"
          },
          {
            "properties": {
              "terminal": {
                "maxLength": 4096,
                "pattern": "([0-9a-zA-Z]+)?",
                "type": "string",
                "description": "Departure/Arrival terminal",
                "example": "Terminal 1"
              },
              "country": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "Country of to departure or arrival",
                "example": "US"
              }
            }
          }
        ]
      },
      "ReferenceListExchangedPrice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "Price"
            ],
            "properties": {
              "Price": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          }
        ]
      },
      "TextBlockDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TextBlock"
          },
          {
            "required": [
              "DateCreateModify"
            ],
            "properties": {
              "sequence": {
                "type": "integer",
                "description": "The order of the text block, if there are more than one block.",
                "format": "int32",
                "example": 2
              },
              "description": {
                "maxLength": 1024,
                "type": "string",
                "description": "Text block detail description",
                "example": "description"
              },
              "Image": {
                "$ref": "#/components/schemas/Image"
              },
              "URL": {
                "type": "string",
                "description": "A URL for this block"
              },
              "DateCreateModify": {
                "$ref": "#/components/schemas/DateCreateModify"
              }
            }
          }
        ]
      },
      "TextBlock": {
        "required": [
          "@type",
          "TextFormatted"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TextBlockDetail"
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Title",
            "example": "Baggage Details"
          },
          "id": {
            "type": "string",
            "description": "Internally referenced id",
            "example": "2"
          },
          "TextFormatted": {
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextFormatted"
            }
          }
        },
        "description": "Discriminator classes TextBlock or TextBlockDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Image": {
        "properties": {
          "value": {
            "type": "string"
          },
          "dimensionCategory": {
            "maxLength": 1,
            "type": "string",
            "description": "Deprecated and replaced by Image Size"
          },
          "width": {
            "type": "integer",
            "description": "Width of image",
            "format": "int32",
            "example": 42
          },
          "height": {
            "type": "integer",
            "description": "Height",
            "format": "int32",
            "example": 43
          },
          "caption": {
            "maxLength": 128,
            "type": "string",
            "description": "Image title",
            "example": "Ticket"
          },
          "pictureCategory": {
            "type": "integer",
            "description": "deprecated and replaced by pictureOf",
            "format": "int32",
            "example": 5
          },
          "imageSize": {
            "$ref": "#/components/schemas/ImageSizeEnum"
          },
          "pictureOf": {
            "$ref": "#/components/schemas/PictureofEnum"
          }
        },
        "description": "URL of the image"
      },
      "ImageSizeEnum": {
        "type": "string",
        "description": "Indicates the size of the image. Hospitality APIs no longer support thumbnail",
        "enum": [
          "Large",
          "Medium",
          "Small",
          "Thumbnail",
          "ExtraLarge"
        ]
      },
      "PictureofEnum": {
        "type": "string",
        "example": "Lobby",
        "enum": [
          "Exterior",
          "Lobby",
          "Pool",
          "Restaurant",
          "HealthClub",
          "GuestRoom",
          "Suite",
          "ConferenceRoom",
          "Ballroom",
          "Golf",
          "Beach",
          "Spa",
          "Bar",
          "Recreational",
          "RoomAmenity",
          "PropertyAmenity",
          "BusinessCentre",
          "Map",
          "Promotional",
          "Undefined",
          "Studio",
          "Attraction",
          "Other",
          "Amenity",
          "Logo",
          "MeetingRoom"
        ]
      },
      "DateCreateModify": {
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-04T11:22:00Z"
          },
          "creatorID": {
            "maxLength": 32,
            "type": "string",
            "description": "ID of creator. Software system identifier or an employee id",
            "example": "c1234563"
          },
          "lastModify": {
            "type": "string",
            "description": "Time stamp of last modification.",
            "format": "date-time",
            "example": "2022-03-04T11:24:00Z"
          },
          "lastModifierID": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifies the last software system or person to modify a record",
            "example": "m346789"
          },
          "purge": {
            "type": "string",
            "description": "Date an item will be purged from a system of record",
            "format": "date",
            "example": "2023-01-01"
          }
        },
        "description": "Time stamp of the creation."
      },
      "AmountPercentAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountPercent"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "AmountPercentPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountPercent"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "PenaltyAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Penalty"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "PenaltyPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Penalty"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "PersonNameDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonName"
          },
          {
            "properties": {
              "personNameType": {
                "$ref": "#/components/schemas/NameTypeEnum"
              },
              "language": {
                "type": "string",
                "description": "'ISO639 code of the language the name is represented ",
                "example": "EN"
              },
              "SurnamePrefix": {
                "maxLength": 32,
                "type": "string",
                "description": "The surname prefix",
                "example": "Von"
              },
              "Suffix": {
                "maxLength": 10,
                "type": "string",
                "description": "Hold various name suffixes and letters",
                "example": "Jr."
              },
              "Title": {
                "maxLength": 32,
                "type": "string",
                "description": "Degree or honors",
                "example": "DR"
              },
              "Privacy": {
                "$ref": "#/components/schemas/Privacy"
              },
              "defaultInd": {
                "type": "boolean",
                "description": "If true, this is the default or primary name within a collection of names.",
                "example": true
              }
            }
          }
        ]
      },
      "NameTypeEnum": {
        "type": "string",
        "description": "OTA Code",
        "enum": [
          "Former",
          "Nickname",
          "Alternate",
          "Maiden"
        ]
      },
      "BuildOptionsFromCatalogProductOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildOptions"
          },
          {
            "required": [
              "BuildFromCatalogProductOfferingsRequest"
            ],
            "properties": {
              "BuildFromCatalogProductOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
              }
            }
          }
        ]
      },
      "AncillaryAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ancillary"
          },
          {
            "properties": {
              "FlightRef": {
                "type": "array",
                "description": "The list of travel segments the ancillary applies to",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Ancillary": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AncillaryAir"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity value",
            "format": "int32"
          },
          "Description": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AncillaryDescription"
            }
          }
        },
        "description": "Discriminator classes Ancillary, AncillaryAir, AncillaryAirBaggage, AncillaryAirSeat",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AncillaryDescription": {
        "properties": {
          "value": {
            "maxLength": 512,
            "type": "string"
          },
          "code": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "The code value",
            "example": "B65"
          },
          "subCode": {
            "maxLength": 10,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "The subcode value",
            "example": "C78"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "The code Context value"
          },
          "ssrCode": {
            "maxLength": 4,
            "type": "string",
            "description": "The four character AIRIMP SSR code for this ancillary",
            "example": "VGML"
          }
        },
        "description": "A description of the ancillary with two description codes"
      },
      "AncillaryAirBaggage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryAir"
          },
          {
            "required": [
              "BaggageType",
              "Measurement"
            ],
            "properties": {
              "BaggageType": {
                "$ref": "#/components/schemas/BaggageTypeEnum"
              },
              "Measurement": {
                "maxItems": 6,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Measurement"
                }
              },
              "soldByPieceInd": {
                "type": "boolean",
                "description": "If true, the ancillary bag is sold per piece."
              },
              "soldByWeightInd": {
                "type": "boolean",
                "description": "If true, the ancillary bag is sold by weight."
              }
            }
          }
        ]
      },
      "PriceBreakdownAncillaryAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdownAncillary"
          },
          {
            "properties": {
              "PassengerTypeCode": {
                "maxLength": 5,
                "minLength": 3,
                "pattern": "([a-zA-Z0-9]{3,5})",
                "type": "string",
                "description": "The passenger type code the ancillary is valid for"
              },
              "approximateInd": {
                "type": "boolean",
                "description": "Used to indicate that the Price is approximate. Often used to allow for currency fluctuations when supplier currency is different to agency currency."
              }
            }
          }
        ]
      },
      "PriceBreakdownAncillary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "The quantity of ancillary items included in this PriceBreakdown",
                "format": "int32"
              },
              "Description": {
                "$ref": "#/components/schemas/AncillaryDescription"
              },
              "ProductRef": {
                "type": "string",
                "description": "The product ref this PriceBreakdown applies to. If no productRef exists then the PriceBreakdown applies to all Products within the Offer."
              },
              "Discount": {
                "$ref": "#/components/schemas/Discount"
              },
              "TravelerIdentifierRef": {
                "$ref": "#/components/schemas/TravelerIdentifierRef"
              }
            }
          }
        ]
      },
      "TermsAndConditionsAirChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsAir"
          },
          {
            "properties": {
              "FulfillmentMethod": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FulfillmentMethod"
                }
              }
            }
          }
        ]
      },
      "FulfillmentMethod": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "FulfillmentMethod"
          },
          "productRefs": {
            "type": "array",
            "description": "The product(s) the Fulfillment Method applies to. If blank applies to all products in the Offer",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "segmentSequenceList": {
            "type": "array",
            "description": "List of segment sequence",
            "example": [
              234,
              518,
              9023
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "RefundMethod": {
            "$ref": "#/components/schemas/RefundMethodEnum"
          },
          "ChangeFeeCollectionMethod": {
            "$ref": "#/components/schemas/ChangeFeeCollectionMethod"
          }
        }
      },
      "RefundMethodEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/RefundMethodEnum_Base"
          }
        },
        "example": "MCO"
      },
      "RefundMethodEnum_Base": {
        "type": "string",
        "example": "MCO",
        "enum": [
          "RefundToOriginalFOP",
          "EMD",
          "MCO",
          "Unknown"
        ]
      },
      "ProductCriteriaAirDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCriteriaAir"
          },
          {
            "properties": {
              "ReplaceFlightCriteria": {
                "$ref": "#/components/schemas/ReplaceFlightCriteria"
              }
            }
          }
        ]
      },
      "ReplaceFlightCriteria": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "Flight": {
            "$ref": "#/components/schemas/FlightID"
          }
        },
        "description": "Discriminator classes ReplaceFlightCriteria only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PassengerCriteriaAirChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PassengerCriteria"
          },
          {
            "required": [
              "TravelerIdentifierRef"
            ],
            "properties": {
              "TravelerIdentifierRef": {
                "$ref": "#/components/schemas/TravelerIdentifierRef"
              }
            }
          }
        ]
      },
      "CatalogOfferingModify": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOffering"
          },
          {
            "required": [
              "ModifyPrice"
            ],
            "properties": {
              "ModifyPrice": {
                "$ref": "#/components/schemas/ModifyPrice"
              }
            }
          }
        ]
      },
      "BuildFromCatalogOfferingsRequestAirChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
          },
          {
            "required": [
              "PricingModifiersAirChange"
            ],
            "properties": {
              "PricingModifiersAirChange": {
                "$ref": "#/components/schemas/PricingModifiersAirChange"
              }
            }
          }
        ]
      },
      "FeeAmountOrPercentAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FeeAmountOrPercent"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "FeeAmountOrPercentPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FeeAmountOrPercent"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "CommissionAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Commission"
          },
          {
            "properties": {
              "Amount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "CommissionPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Commission"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "Percent amount of commission",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "TermsAndConditionsAncillary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditions"
          },
          {
            "properties": {
              "ApplicationLimit": {
                "$ref": "#/components/schemas/ApplicationLimit"
              },
              "Refundability": {
                "$ref": "#/components/schemas/RefundabilityEnum"
              },
              "unsellableInd": {
                "type": "boolean",
                "description": "If true, this ancillary product can not be sold through Travelport systems"
              },
              "instantPurchaseInd": {
                "type": "boolean",
                "description": "If true, the Offer/Offering must be paid for at the same time as creating the Reservation"
              }
            }
          }
        ]
      },
      "ApplicationLimit": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ApplicableLevelEnum"
          },
          "start": {
            "maxLength": 32,
            "type": "string",
            "description": "The start value",
            "example": "45"
          },
          "end": {
            "maxLength": 32,
            "type": "string",
            "description": "The end value",
            "example": "67"
          }
        },
        "description": "Exposes any limitation on the amount of ancillaries available for purchase. Example, start 1 end 3 ApplicableLevel Passenger would mean a minumum of 1 and maximum of 3 ancillary items may be purchased."
      },
      "ApplicableLevelEnum": {
        "type": "string",
        "enum": [
          "PassengerSegment",
          "Segment",
          "Itinerary",
          "Passengers",
          "PassengerOD",
          "Other"
        ]
      },
      "RefundabilityEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/RefundabilityEnum_Base"
          }
        }
      },
      "RefundabilityEnum_Base": {
        "type": "string",
        "enum": [
          "Refundable",
          "NonRefundable",
          "Reusable"
        ]
      },
      "ProductAncillary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "properties": {
              "Ancillary": {
                "$ref": "#/components/schemas/Ancillary"
              },
              "selectedByDefaultInd": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AncillaryOfferingsBuildFromOfferList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryOfferings"
          },
          {
            "properties": {
              "BuildFromOfferList": {
                "$ref": "#/components/schemas/BuildFromOfferList"
              }
            }
          }
        ]
      },
      "AncillaryOfferingsBuildFromCatalogOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryOfferings"
          },
          {
            "required": [
              "BuildFromCatalogOfferingsRequest"
            ],
            "properties": {
              "BuildFromCatalogOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
              }
            }
          }
        ]
      },
      "AncillaryOfferingsBuildFromCatalogProductOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryOfferings"
          },
          {
            "required": [
              "BuildFromCatalogProductOfferingsRequest"
            ],
            "properties": {
              "BuildFromCatalogProductOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
              }
            }
          }
        ]
      },
      "AncillaryOfferingsBuildFromReservationWorkbench": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryOfferings"
          },
          {
            "properties": {
              "BuildFromReservationWorkbench": {
                "$ref": "#/components/schemas/BuildFromReservationWorkbench"
              }
            }
          }
        ]
      },
      "SeatAvailabilityOfferingsBuildFromOfferList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeatAvailabilityOfferings"
          },
          {
            "properties": {
              "BuildFromOfferList": {
                "$ref": "#/components/schemas/BuildFromOfferList"
              }
            }
          }
        ]
      },
      "SeatAvailabilityOfferingsBuildFromCatalogOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeatAvailabilityOfferings"
          },
          {
            "required": [
              "BuildFromCatalogOfferingsRequest"
            ],
            "properties": {
              "BuildFromCatalogOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
              }
            }
          }
        ]
      },
      "SeatAvailabilityOfferingsBuildFromCatalogProductOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeatAvailabilityOfferings"
          },
          {
            "required": [
              "BuildFromCatalogProductOfferingsRequest"
            ],
            "properties": {
              "BuildFromCatalogProductOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
              }
            }
          }
        ]
      },
      "SeatAvailabilityOfferingsBuildFromProducts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeatAvailabilityOfferings"
          },
          {
            "required": [
              "ProductCriteriaAir"
            ],
            "properties": {
              "ProductCriteriaAir": {
                "$ref": "#/components/schemas/ProductCriteriaAir"
              }
            }
          }
        ]
      },
      "CatalogOfferingsTravelerFlight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferingsTraveler"
          },
          {
            "required": [
              "Flight"
            ],
            "properties": {
              "Flight": {
                "maxItems": 5,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightID"
                }
              }
            }
          }
        ]
      },
      "CatalogOfferingsTraveler": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogOfferings"
          },
          {
            "required": [
              "TravelerIdentifierRef"
            ],
            "properties": {
              "TravelerIdentifierRef": {
                "maxItems": 9,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelerIdentifierRef"
                }
              },
              "HeldAncillary": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HeldAncillary"
                }
              }
            }
          }
        ]
      },
      "HeldAncillary": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "HeldAncillary"
          },
          "Ancillary": {
            "$ref": "#/components/schemas/Ancillary"
          },
          "travelerRef": {
            "type": "string",
            "example": "Trav_1"
          }
        },
        "description": "Discriminator classes HeldAncillary only",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductSeatAvailability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "required": [
              "SeatAvailability"
            ],
            "properties": {
              "SeatAvailability": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SeatAvailability"
                }
              },
              "Brand": {
                "$ref": "#/components/schemas/BrandID"
              },
              "SeatingChartRef": {
                "type": "string",
                "description": "The reference id of the SeatingChart in the reference list"
              }
            }
          }
        ]
      },
      "SeatAvailability": {
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          },
          "seatAvailabilityStatus": {
            "$ref": "#/components/schemas/SeatAvailability_Enum"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "The code context value",
            "example": "ATPCO"
          },
          "paidSeatInd": {
            "type": "boolean",
            "description": "If true, the seat is a paid ancillary seat. This seat may be zero value due to traveler specific conditions"
          }
        },
        "description": "The row, seat, and availability of the seat."
      },
      "SeatAvailability_Enum": {
        "type": "string",
        "description": "The list of availabile statuses of the seat for a traveler.",
        "enum": [
          "Available",
          "Blocked",
          "Reserved",
          "Unavailable",
          "Requested",
          "NoSeat",
          "Pending"
        ]
      },
      "AncillaryAirSeat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryAir"
          },
          {
            "required": [
              "SeatAssignment"
            ],
            "properties": {
              "SeatAssignment": {
                "$ref": "#/components/schemas/SeatAssignment"
              }
            }
          }
        ]
      },
      "SeatAssignment": {
        "required": [
          "Characteristic",
          "Seat"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SeatAssignment"
          },
          "Seat": {
            "maxLength": 32,
            "type": "string",
            "description": "Seat"
          },
          "Characteristic": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          "SeatFeature": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceFeature"
            }
          }
        }
      },
      "SpaceFeature": {
        "properties": {
          "value": {
            "maxLength": 1024,
            "type": "string"
          },
          "context": {
            "maxLength": 32,
            "type": "string",
            "description": "The source of the code",
            "example": "IATA"
          },
          "seatType": {
            "maxLength": 32,
            "type": "string",
            "description": "The type of object that occupies the space",
            "example": "seat"
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "The description of the space feature"
          },
          "power": {
            "maxLength": 32,
            "type": "string",
            "description": "The type of power provided, if any"
          },
          "video": {
            "maxLength": 32,
            "type": "string",
            "description": "The type of video provided, if any"
          },
          "rating": {
            "maxLength": 32,
            "type": "string",
            "description": "The seat guru rating of the seat"
          }
        },
        "description": "Discriptive information about the seat."
      },
      "SeatAvailabilityOfferingsBuildFromReservationWorkbench": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeatAvailabilityOfferings"
          },
          {
            "required": [
              "BuildFromReservationWorkbench"
            ],
            "properties": {
              "BuildFromReservationWorkbench": {
                "$ref": "#/components/schemas/BuildFromReservationWorkbench"
              }
            }
          }
        ]
      },
      "OfferAncillaryModify": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Offer"
          },
          {
            "properties": {
              "ModifyPrice": {
                "$ref": "#/components/schemas/ModifyPrice"
              }
            }
          }
        ]
      },
      "SeatingChart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SeatingChartID"
          },
          {
            "required": [
              "Cabin"
            ],
            "properties": {
              "Cabin": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Cabin"
                }
              }
            }
          }
        ]
      },
      "SeatingChartID": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "SeatingChart"
          },
          "id": {
            "type": "string",
            "description": "Internally reference id"
          }
        },
        "description": "Discriminator classes SeatingChartID or SeatingChart",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Cabin": {
        "required": [
          "Layout",
          "Row",
          "name"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Cabin"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "The name of the cabin",
            "example": "Economy"
          },
          "Layout": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CabinLayout"
            }
          },
          "Row": {
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Row"
            }
          }
        }
      },
      "CabinLayout": {
        "required": [
          "endRow",
          "position",
          "startRow"
        ],
        "properties": {
          "value": {
            "maxLength": 1,
            "type": "string"
          },
          "position": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatPositionEnum"
            }
          },
          "startRow": {
            "type": "integer",
            "description": "Start row for this Cabin Layout",
            "format": "int32"
          },
          "endRow": {
            "type": "integer",
            "description": "End row for this Cabin Layout",
            "format": "int32"
          }
        },
        "description": "One character to represent the seat column position, (A, B, C)"
      },
      "SeatPositionEnum": {
        "type": "string",
        "description": "Seat position PADIS codes",
        "enum": [
          "W",
          "C",
          "A",
          "WA",
          "U",
          "L",
          "M"
        ]
      },
      "Row": {
        "required": [
          "Space"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Row"
          },
          "label": {
            "maxLength": 32,
            "type": "string",
            "description": "The identifier for the wor",
            "example": "78"
          },
          "Space": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Seat"
            }
          },
          "Characteristic": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          }
        }
      },
      "Seat": {
        "required": [
          "SeatFeature"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "Seat"
          },
          "location": {
            "maxLength": 32,
            "type": "string",
            "description": "The seat location",
            "example": "10A"
          },
          "seatType": {
            "maxLength": 32,
            "type": "string",
            "description": "The type of seat",
            "example": "NW"
          },
          "Characteristic": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          "SeatFeature": {
            "$ref": "#/components/schemas/SpaceFeature"
          }
        }
      },
      "TermsAndConditionsFullAncillary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFull"
          },
          {
            "properties": {
              "ApplicationLimit": {
                "$ref": "#/components/schemas/ApplicationLimit"
              },
              "Refundability": {
                "$ref": "#/components/schemas/RefundabilityEnum"
              },
              "unsellableInd": {
                "type": "boolean",
                "description": "If true, this ancillary product can not be sold through Travelport systems"
              },
              "instantPurchaseInd": {
                "type": "boolean",
                "description": "If true, the Offer/Offering must be paid for at the same time as creating the Reservation"
              }
            }
          }
        ]
      },
      "TermsAndConditionsFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFullID"
          },
          {
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The data and time the offer will expire",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "CustomerLoyalty": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "TextBlock": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TextBlock"
                }
              }
            }
          }
        ]
      },
      "TermsAndConditionsFullSummary": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFullID"
          },
          {
            "properties": {
              "ExpiryDate": {
                "type": "string",
                "description": "The data and time the offer will expire",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "CustomerLoyalty": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "TextBlock": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TextBlock"
                }
              }
            }
          }
        ]
      },
      "AncillaryOfferingsBuildFromOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AncillaryOfferings"
          },
          {
            "required": [
              "BuildFromOffer"
            ],
            "properties": {
              "BuildFromOffer": {
                "$ref": "#/components/schemas/BuildFromOffer"
              }
            }
          }
        ]
      },
      "BrandAttributeCompleteInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandAttribute"
          },
          {
            "required": [
              "AttributeText"
            ],
            "properties": {
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "The brand attribute name"
              },
              "AttributeText": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BrandText"
                }
              }
            }
          }
        ]
      },
      "AdditionalBrandAttributeCompleteInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdditionalBrandAttribute"
          },
          {
            "required": [
              "AttributeText"
            ],
            "properties": {
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "The brand attribute name"
              },
              "AttributeText": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BrandText"
                }
              }
            }
          }
        ]
      },
      "BrandTextDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandText"
          },
          {
            "required": [
              "DateCreateModify"
            ],
            "properties": {
              "sequence": {
                "type": "integer",
                "description": "The order of the text block, if there are more than one block.",
                "format": "int32"
              },
              "description": {
                "maxLength": 1024,
                "type": "string",
                "description": "Assigned Type: c-1100:Description"
              },
              "Image": {
                "$ref": "#/components/schemas/Image"
              },
              "URL": {
                "type": "string",
                "description": "A URL for this block"
              },
              "DateCreateModify": {
                "$ref": "#/components/schemas/DateCreateModify"
              }
            }
          }
        ]
      },
      "FareRuleStructured": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FareRule"
          },
          {
            "required": [
              "StructuredFareRules"
            ],
            "properties": {
              "StructuredFareRules": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StructuredFareRules"
                }
              }
            }
          }
        ]
      },
      "StructuredFareRules": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "StructuredFareRules"
          },
          "passengerTypeCodes": {
            "type": "array",
            "description": "List of passenger type codes",
            "items": {
              "maxLength": 5,
              "minLength": 3,
              "pattern": "([a-zA-Z0-9]{3,5})",
              "type": "string",
              "example": "ADT"
            }
          },
          "fareClassCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The code of the fare class to which the rule applies, or the generic fare",
            "example": "QVM0Z0H"
          },
          "fareTypeCode": {
            "maxLength": 3,
            "type": "string",
            "description": "ATPCO fare type code",
            "example": "ERU"
          },
          "seasonType": {
            "$ref": "#/components/schemas/SeasonTypeEnum"
          },
          "dayOfWeekType": {
            "$ref": "#/components/schemas/DayOfWeekTypeEnum"
          },
          "oneWayRoundTripRestrictions": {
            "$ref": "#/components/schemas/OneWayRoundTripEnum"
          },
          "routingNumber": {
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "00000 - 09999;  00000 = MPM; 88888 = Specified Routing",
            "format": "int32",
            "example": 9999
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "discontinueDate": {
            "type": "string",
            "format": "date"
          },
          "inboundOutboundApplication": {
            "$ref": "#/components/schemas/InboundOutboundEnum"
          },
          "geographicDirectionApplication": {
            "$ref": "#/components/schemas/GeographicDirectionEnum"
          },
          "Penalties": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Penalties"
            }
          },
          "MinimumStay": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinimumStay"
            }
          },
          "MaximumStay": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaximumStay"
            }
          },
          "AdvanceReservation": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvanceReservation"
            }
          },
          "AdvancePayment": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancePayment"
            }
          },
          "Stopover": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stopover"
            }
          },
          "Location1GeographicSpecification": {
            "$ref": "#/components/schemas/Location1GeographicSpecification"
          },
          "Location2GeographicSpecification": {
            "$ref": "#/components/schemas/Location2GeographicSpecification"
          },
          "generalRuleDoesNotApplyInd": {
            "type": "boolean",
            "description": "if true, general rule does not apply. Specific data in this rule overrides general rule application."
          }
        }
      },
      "SeasonTypeEnum": {
        "type": "string",
        "enum": [
          "Basic",
          "High/Peak",
          "HolidaySurcharge",
          "Low/OffPeak",
          "SecondWinter",
          "Shoulder"
        ]
      },
      "DayOfWeekTypeEnum": {
        "type": "string",
        "enum": [
          "Midweek",
          "MidweekNight",
          "Night",
          "OffPeak",
          "Weekend",
          "WeekendNight"
        ]
      },
      "OneWayRoundTripEnum": {
        "type": "string",
        "enum": [
          "OneWay",
          "RoundTrip",
          "All"
        ]
      },
      "InboundOutboundEnum": {
        "type": "string",
        "enum": [
          "InboundTravelOnly",
          "OutboundTravelOnly",
          "AlwaysApplies"
        ]
      },
      "GeographicDirectionEnum": {
        "type": "string",
        "enum": [
          "FromLocation1ToLocation2",
          "ToLocation1FromLocation2",
          "OriginatingFromLocation1ToLocation2",
          "OriginatingFromLocation2ToLocation1"
        ]
      },
      "MinimumStay": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "MinimumStayApplies"
          },
          "ruleNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The rule number associated to this fare rule info",
            "example": "D38"
          },
          "tariffNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The tariff number associated to this fare rule info",
            "example": "01634"
          }
        },
        "description": "Discriminator classes MinimumStay, MinimumStayApplies or MinimumStayIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "MaximumStay": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "MaximumStayApplies"
          },
          "ruleNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The rule number associated to this fare rule info",
            "example": "D38"
          },
          "tariffNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The tariff number associated to this fare rule info",
            "example": "01634"
          }
        },
        "description": "Discriminator classes MaximumStay, MaximumStayApplies or MaximumStayIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AdvanceReservation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdvanceReservationRequired"
          },
          "ruleNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The rule number associated to this fare rule info",
            "example": "D38"
          },
          "tariffNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The tariff number associated to this fare rule info",
            "example": "01634"
          }
        },
        "description": "Discriminator classes AdvanceReservation, AdvanceReservationRequired, AdvanceReservationIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AdvancePayment": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdvancePayment"
          },
          "ruleNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The rule number associated to this fare rule info",
            "example": "D38"
          },
          "tariffNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The tariff number associated to this fare rule info",
            "example": "01634"
          }
        },
        "description": "Discriminator classes AdvancePayment, AdvancePaymentRequired or AdvancePaymentIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Stopover": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "StopoverPermitted"
          },
          "ruleNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The rule number associated to this fare rule info",
            "example": "D38"
          },
          "tariffNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "The tariff number associated to this fare rule info",
            "example": "01634"
          }
        },
        "description": "Discriminator classes Stopover, StopoverApplies or StopoverIndeterminate",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Location1GeographicSpecification": {
        "properties": {
          "value": {
            "maxLength": 5,
            "type": "string"
          },
          "geographicSpecificationType": {
            "$ref": "#/components/schemas/geographicSpecificationTypeEnum"
          }
        },
        "description": "The type of geographic specification. AREA-a one-digit numeric area designator. 1= Western Hemisphere 2 = Europe, Africa & Near East 3 = Far East, Australia and Pacific, ZONE-a numeric value assigned to a non-standard geographic description of cities, states, countries, sub-continents, and/or traffic conferences COUNTRY- The standard IATA country code,CITY-The standard industry city code STATE -the standard Postal state code. Two-character alpha codes.  When used, it will always be preceded by a country code"
      },
      "geographicSpecificationTypeEnum": {
        "type": "string",
        "enum": [
          "Area",
          "City",
          "Country",
          "State",
          "Zone"
        ]
      },
      "Location2GeographicSpecification": {
        "properties": {
          "value": {
            "maxLength": 5,
            "type": "string"
          },
          "geographicSpecificationType": {
            "$ref": "#/components/schemas/geographicSpecificationTypeEnum"
          }
        },
        "description": "The type of geographic specification. AREA-a one-digit numeric area designator. 1= Western Hemisphere 2 = Europe, Africa & Near East 3 = Far East, Australia and Pacific, ZONE-a numeric value assigned to a non-standard geographic description of cities, states, countries, sub-continents, and/or traffic conferences COUNTRY- The standard IATA country code,CITY-The standard industry city code STATE -the standard Postal state code. Two-character alpha codes.  When used, it will always be preceded by a country code"
      },
      "FareRuleText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FareRule"
          },
          {
            "required": [
              "TextFareRule"
            ],
            "properties": {
              "TextFareRule": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TextFareRule"
                }
              }
            }
          }
        ]
      },
      "TextFareRule": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string"
          },
          "language": {
            "type": "string",
            "description": "A three letter code for the representation of names of languages defined by ISO639-3",
            "example": "eng"
          },
          "name": {
            "maxLength": 32,
            "type": "string",
            "description": "The name of the text fare rule",
            "example": "ticket"
          }
        }
      },
      "MinimumStayApplies": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MinimumStay"
          },
          {
            "required": [
              "Duration"
            ],
            "properties": {
              "mustIncludeDayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              },
              "originDayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              },
              "returnTime": {
                "pattern": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$",
                "type": "string",
                "description": "Return time in local time zone",
                "example": "43200"
              },
              "Duration": {
                "type": "string",
                "description": "Minimum duration",
                "example": "5 days"
              },
              "ruleNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The rule number associated to this fare rule info",
                "example": "D38"
              },
              "tariffNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The tariff number associated to this fare rule info",
                "example": "01634"
              }
            }
          }
        ]
      },
      "DayOfWeekEnum": {
        "type": "string",
        "description": "The names of the days of the week.",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ]
      },
      "MinimumStayIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MinimumStay"
          },
          {
            "properties": {
              "IndeterminateInd": {
                "type": "string",
                "description": "Structured fare rules could not be determined for this category",
                "example": "true"
              }
            }
          }
        ]
      },
      "MaximumStayApplies": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MaximumStay"
          },
          {
            "properties": {
              "maximumStayDuration": {
                "type": "string"
              },
              "maximumStayDate": {
                "type": "string",
                "format": "date"
              },
              "returnTime": {
                "pattern": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$",
                "type": "string",
                "description": "Return time in local time zone",
                "example": "64800"
              },
              "mustCommenceByInd": {
                "type": "boolean",
                "description": "Indicates if travel must commence by this date/duration",
                "example": true
              },
              "mustCompleteByInd": {
                "type": "boolean",
                "description": "Indicates if travel must complete by this date/duration",
                "example": true
              },
              "fromDateOfIssueInd": {
                "type": "boolean",
                "description": "If true the Maximum stay is calculated from the date of ticket issuance",
                "example": true
              },
              "earliestAppliesInd": {
                "type": "boolean",
                "description": "If true, the earlier of the Maximum stay conditions apply",
                "example": true
              },
              "latestAppliesInd": {
                "type": "boolean",
                "description": "If true, the later of the Maximum stay conditions apply",
                "example": true
              }
            }
          }
        ]
      },
      "MaximumStayIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MaximumStay"
          },
          {
            "properties": {
              "IndeterminateInd": {
                "type": "string",
                "description": "Structured fare rules could not be determined for this category",
                "example": "true"
              }
            }
          }
        ]
      },
      "AdvancePaymentRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancePayment"
          },
          {
            "required": [
              "PaymentAfterReservation",
              "PaymentBeforeDeparture"
            ],
            "properties": {
              "waverDate": {
                "pattern": "(\\d{4}-\\d{2}-\\d{2})",
                "type": "string",
                "description": "Waver date",
                "example": "2024/05/20"
              },
              "PaymentAfterReservation": {
                "$ref": "#/components/schemas/PaymentAfterReservation"
              },
              "PaymentBeforeDeparture": {
                "$ref": "#/components/schemas/PaymentBeforeDeparture"
              },
              "PaymentTravelSegmentIndicatorATPCO": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The ATPCO paymentgeographic indicator. Example = 1st segment over the water between area 2 and 3",
                "format": "int32",
                "example": 55
              },
              "instantPaymentInd": {
                "type": "boolean",
                "description": "if true, the Offer must be paid at the same time as the reservation is created",
                "example": true
              },
              "ealierAppliesInd": {
                "type": "boolean",
                "description": "If true, the earlier of the payment restrictions apply",
                "example": true
              },
              "laterAppliesInd": {
                "type": "boolean",
                "description": "If true, the later of the payment restrictions apply",
                "example": true
              }
            }
          }
        ]
      },
      "PaymentAfterReservation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PaymentAfterReservation"
          },
          "TimeOfDay": {
            "type": "string",
            "description": "The time of day indicates the earliest time the Offer can be reserved. Used in conjunction with DayOfWeek or Duration",
            "example": "07:00"
          }
        },
        "description": "Discriminator classes PaymentAfterReservationDuration or PaymentAfterReservationDayOfWeek",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PaymentBeforeDeparture": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PaymentBeforeDeparture"
          },
          "TimeOfDay": {
            "type": "string",
            "description": "The time of day indicates the earliest time the Offer can be reserved. Used in conjunction with DayOfWeek or Duration",
            "example": "07:00"
          }
        },
        "description": "Discriminator classes PaymentBeforeDepartureDuration or PaymentBeforeDepartureDayOfWeek",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AdvancePaymentIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvancePayment"
          },
          {
            "properties": {
              "IndeterminateInd": {
                "type": "string",
                "description": "If true the advance Payment restrictions could not be determined",
                "example": "true"
              }
            }
          }
        ]
      },
      "DayOfWeekDurationDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DayOfWeekDuration"
          },
          {
            "required": [
              "Duration"
            ],
            "properties": {
              "Duration": {
                "type": "string",
                "description": "The advance duration the Offer can be reserved.",
                "example": "50 days in advance of the first flight"
              }
            }
          }
        ]
      },
      "DayOfWeekDuration": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DayOfWeekDuration"
          },
          "TimeOfDay": {
            "type": "string",
            "description": "The time of day indicates the earliest time the Offer can be reserved. Used in conjunction with DayOfWeek or Duration",
            "example": "07:00"
          }
        },
        "description": "Discriminator classes DayOfWeekDurationDuration or DayOfWeekDurationDayOfWeek",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DayOfWeekDurationDayOfWeek": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DayOfWeekDuration"
          },
          {
            "required": [
              "DayOfWeek"
            ],
            "properties": {
              "DayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              }
            }
          }
        ]
      },
      "FirstReservationDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FirstReservation"
          },
          {
            "required": [
              "Duration"
            ],
            "properties": {
              "Duration": {
                "type": "string",
                "description": "The advance duration the Offer can be reserved.",
                "example": "50 days in advance of the first flight"
              }
            }
          }
        ]
      },
      "FirstReservation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "FirstReservation"
          },
          "TimeOfDay": {
            "type": "string",
            "description": "The time of day indicates the earliest time the Offer can be reserved. Used in conjunction with DayOfWeek or Duration",
            "example": "07:00"
          }
        },
        "description": "Discriminator classes FirstReservationDuration or FirstReservationDayOfWeek",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "FirstReservationDayOfWeek": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FirstReservation"
          },
          {
            "required": [
              "DayOfWeek"
            ],
            "properties": {
              "DayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              }
            }
          }
        ]
      },
      "LastReservationDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LastReservation"
          },
          {
            "required": [
              "Duration"
            ],
            "properties": {
              "Duration": {
                "type": "string",
                "description": "The advance duration the Offer can be reserved.",
                "example": "50 days in advance of the first flight"
              }
            }
          }
        ]
      },
      "LastReservation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "LastReservation"
          },
          "TimeOfDay": {
            "type": "string",
            "description": "The time of day indicates the earliest time the Offer can be reserved. Used in conjunction with DayOfWeek or Duration",
            "example": "07:00"
          }
        },
        "description": "Discriminator classes LastReservationDuration or LastReservationDayOfWeek",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "LastReservationDayOfWeek": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LastReservation"
          },
          {
            "required": [
              "DayOfWeek"
            ],
            "properties": {
              "DayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              }
            }
          }
        ]
      },
      "PaymentAfterReservationDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentAfterReservation"
          },
          {
            "required": [
              "Duration"
            ],
            "properties": {
              "Duration": {
                "type": "string",
                "description": "The advance duration the Offer can be reserved.",
                "example": "50 days in advance of the first flight"
              }
            }
          }
        ]
      },
      "PaymentAfterReservationDayOfWeek": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentAfterReservation"
          },
          {
            "required": [
              "DayOfWeek"
            ],
            "properties": {
              "DayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              }
            }
          }
        ]
      },
      "PaymentBeforeDepartureDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentBeforeDeparture"
          },
          {
            "required": [
              "Duration"
            ],
            "properties": {
              "Duration": {
                "type": "string",
                "description": "The advance duration the Offer can be reserved.",
                "example": "50 days in advance of the first flight"
              }
            }
          }
        ]
      },
      "PaymentBeforeDepartureDayOfWeek": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentBeforeDeparture"
          },
          {
            "required": [
              "DayOfWeek"
            ],
            "properties": {
              "DayOfWeek": {
                "$ref": "#/components/schemas/DayOfWeekEnum"
              }
            }
          }
        ]
      },
      "StopoverPermitted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Stopover"
          },
          {
            "required": [
              "StopoverCharge",
              "maximum",
              "maximumDuration",
              "minimum",
              "minimumDuration"
            ],
            "properties": {
              "journeyTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JourneyTypeEnum"
                }
              },
              "minimumDuration": {
                "type": "string",
                "description": "The minimum amount of time permitted for a stopover",
                "example": "1 hour"
              },
              "maximumDuration": {
                "type": "string",
                "description": "The maximum amount of time permitted for a stopover",
                "example": "12 hours"
              },
              "minimum": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The minimum permitted for a stopover",
                "format": "int32",
                "example": 3
              },
              "maximum": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The maximum permitted for a stopover",
                "format": "int32",
                "example": 5
              },
              "outbound": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "Stopover outbound",
                "format": "int32",
                "example": 2
              },
              "inbound": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "Stopover inbound",
                "format": "int32",
                "example": 3
              },
              "StopoverCharge": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StopoverCharge"
                }
              },
              "StopoverRestriction": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StopoverRestriction"
                }
              },
              "permittedAtGatewayOnlyInd": {
                "type": "boolean",
                "description": "If true, stopovers are permitted at gateway points only",
                "example": true
              }
            }
          }
        ]
      },
      "JourneyTypeEnum": {
        "type": "string",
        "example": "OpenJaw",
        "enum": [
          "OpenJaw",
          "RoundTrip",
          "CircleTrip",
          "Outbound",
          "Inbound"
        ]
      },
      "StopoverCharge": {
        "required": [
          "Amount",
          "id",
          "quantity"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "StopoverCharge"
          },
          "id": {
            "type": "string",
            "description": "The ID of the stopoverCharge",
            "example": "125"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of stopovers permitted at this charge",
            "format": "int32",
            "example": 2
          },
          "Amount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "AlternativeAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          }
        }
      },
      "StopoverRestriction": {
        "required": [
          "stopoverChargeRef"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "StopoverRestrictions"
          },
          "stopoverChargeRef": {
            "type": "string",
            "description": "Reference to the Stopover Charge",
            "example": "Reference1"
          },
          "journeyTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyTypeEnum"
            }
          },
          "departureCarrier": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "Departure carrier airline code",
            "example": "XPE"
          },
          "arrivalAirline": {
            "pattern": "([a-zA-Z0-9]{2,3})",
            "type": "string",
            "description": "Arrival carrier airline code",
            "example": "AEH"
          },
          "GeographicRestriction": {
            "maxItems": 5,
            "type": "array",
            "example": [
              "Airport",
              "City",
              "Country",
              "StateProvince",
              "Zone"
            ],
            "items": {
              "$ref": "#/components/schemas/GeographicRestriction"
            }
          },
          "onlineStopoverOnlyInd": {
            "type": "boolean",
            "description": "If true, the stopover may only take place when the arriving and departing airline are the same",
            "example": true
          }
        }
      },
      "GeographicRestriction": {
        "required": [
          "geographicRestrictionType"
        ],
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string"
          },
          "geographicRestrictionType": {
            "$ref": "#/components/schemas/GeographicRestrictionTypeEnum"
          }
        }
      },
      "GeographicRestrictionTypeEnum": {
        "type": "string",
        "example": "Airport",
        "enum": [
          "Area",
          "Airport",
          "City",
          "Country",
          "StateProvince",
          "Zone"
        ]
      },
      "StopoverNotPermitted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Stopover"
          },
          {
            "properties": {
              "NotPermittedInd": {
                "type": "string",
                "description": "if true, stopovers are not permitted",
                "example": "true"
              }
            }
          }
        ]
      },
      "StopoverIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Stopover"
          },
          {
            "properties": {
              "IndeterminatedInd": {
                "type": "string",
                "description": "If true the stopover restrictions could not be determined",
                "example": "true"
              }
            }
          }
        ]
      },
      "AdvanceReservationRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvanceReservation"
          },
          {
            "required": [
              "FirstReservation",
              "LastReservation",
              "instantPurchase",
              "standby"
            ],
            "properties": {
              "instantPurchase": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "standby": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "waiverDate": {
                "pattern": "(\\d{4}-\\d{2}-\\d{2})",
                "type": "string",
                "description": "Waiver date",
                "example": "2026/3/12"
              },
              "ReservationTravelSegmentIndicatorATPCO": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The ATPCO travel segment geographic indicator. Example= 1st segment over the water",
                "format": "int32",
                "example": 55
              },
              "ConfirmedStatus": {
                "maxItems": 10,
                "type": "array",
                "example": [
                  "AllFlightsMustBeConfirmed",
                  "OpenReturnsNotPermitted",
                  "FirstFlightMustBeConfirmed",
                  "OpenReturnsArePermitted",
                  "Other_"
                ],
                "items": {
                  "$ref": "#/components/schemas/ConfirmedStatusEnum"
                }
              },
              "WaitlistStandbyCondition": {
                "maxItems": 10,
                "type": "array",
                "example": [
                  "WaitlistStandbyNotPermitted",
                  "WaitlistNotPermitted",
                  "WaitlistStandbyNotPermittedOrigin",
                  "StandbyNotPermittedOrigin",
                  "WaitlistNotPermittedOrigin",
                  "WaitlistNotPermittedOnAny",
                  "StandbyPermittedEarlierLaterSameDayElseWaitlistStandbyNotPermitted",
                  "StandbyPermittedEarlierLaterSameDayElseStandbyNotPermitted",
                  "StandbyPermittedEarlierLaterSameDayElseWaitlistStandbyNotPermittedOrigin"
                ],
                "items": {
                  "$ref": "#/components/schemas/WaitlistStandbyConditionEnum"
                }
              },
              "FirstReservation": {
                "$ref": "#/components/schemas/FirstReservation"
              },
              "LastReservation": {
                "$ref": "#/components/schemas/LastReservation"
              }
            }
          }
        ]
      },
      "ConfirmedStatusEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ConfirmedStatusEnum_Base"
          }
        }
      },
      "ConfirmedStatusEnum_Base": {
        "type": "string",
        "example": "OpenReturnsArePermitted",
        "enum": [
          "AllFlightsMustBeConfirmed",
          "OpenReturnsNotPermitted",
          "FirstFlightMustBeConfirmed",
          "OpenReturnsArePermitted"
        ]
      },
      "WaitlistStandbyConditionEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/WaitlistStandbyConditionEnum_Base"
          }
        }
      },
      "WaitlistStandbyConditionEnum_Base": {
        "type": "string",
        "example": "WaitlistNotPermitted",
        "enum": [
          "WaitlistStandbyNotPermitted",
          "WaitlistNotPermitted",
          "WaitlistStandbyNotPermittedOrigin",
          "StandbyNotPermittedOrigin",
          "WaitlistNotPermittedOrigin",
          "WaitlistNotPermittedOnAny",
          "StandbyPermittedEarlierLaterSameDayElseWaitlistStandbyNotPermitted",
          "StandbyPermittedEarlierLaterSameDayElseStandbyNotPermitted",
          "StandbyPermittedEarlierLaterSameDayElseWaitlistStandbyNotPermittedOrigin",
          "WaitlistPermittedEarlierLaterSameDayElseWaitlistStandbyNotPermittedOrigin",
          "StandbyPermittedSameDateOriginallyTicketedProvidedFlightTimeSpecificRulesMet",
          "StandbyNotPermitted"
        ]
      },
      "AdvanceReservationIndeterminate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvanceReservation"
          },
          {
            "properties": {
              "IndeterminateInd": {
                "type": "string",
                "description": "If true the advance Reservation restrictions could not be determined",
                "example": "true"
              }
            }
          }
        ]
      },
      "ConfirmationHold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Confirmation"
          },
          {
            "required": [
              "Locator"
            ],
            "properties": {
              "Locator": {
                "$ref": "#/components/schemas/Locator"
              },
              "OfferStatus": {
                "$ref": "#/components/schemas/OfferStatus"
              },
              "ShoppingCartProductStatus": {
                "$ref": "#/components/schemas/ShoppingCartProductStatusAir"
              }
            }
          }
        ]
      },
      "OfferStatus": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "OfferStatus"
          }
        },
        "description": "Discriminator classes OfferStatus, OfferStatusAir, OfferStatusAncillary, OfferStatusHospitality, OfferStatusVehicle",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ShoppingCartProductStatusAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShoppingCartProductStatus"
          },
          {
            "properties": {
              "StatusAir": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatusAir"
                }
              }
            }
          }
        ]
      },
      "ShoppingCartProductStatus": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ShoppingCartProductStatusAir"
          }
        },
        "description": "Discriminator classes ShoppingCartProductStatus or ShoppingCartProductStatusAir",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "StatusAir": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OfferStatusEnum"
          },
          "flightRefs": {
            "type": "array",
            "description": "The flightRefs the status is applicable to within the Offer",
            "items": {
              "type": "string"
            }
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Status code"
          },
          "pastDateInd": {
            "type": "boolean",
            "description": "If true, the flight is considered to be past date",
            "example": true
          }
        }
      },
      "OfferStatusEnum": {
        "type": "string",
        "description": "Offer Status like confirmed ,Pending etc",
        "enum": [
          "Confirmed",
          "Cancelled",
          "Pending",
          "Modifed",
          "Rejected",
          "Waitlisted"
        ]
      },
      "ReceiptConfirmationDivide": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceiptConfirmation"
          },
          {
            "required": [
              "ParentLocator"
            ],
            "properties": {
              "ParentLocator": {
                "$ref": "#/components/schemas/Locator"
              }
            }
          }
        ]
      },
      "ReceiptPayment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Receipt"
          },
          {
            "properties": {
              "PaymentIdentifier": {
                "$ref": "#/components/schemas/PaymentIdentifier"
              },
              "SecondPaymentIdentifier": {
                "$ref": "#/components/schemas/IdentifierRef"
              },
              "ThirdPaymentIdentifier": {
                "$ref": "#/components/schemas/IdentifierRef"
              },
              "Document": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "depositInd": {
                "type": "boolean",
                "description": "if true, the receipt is for a deposit or prepayment"
              },
              "guaranteeInd": {
                "type": "boolean",
                "description": "if true, the receipt is for a guarantee only. Guarantee rules are in accordance with the Offer TermsAndConditions."
              }
            }
          }
        ]
      },
      "Document": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DocumentTicket"
          },
          "Number": {
            "maxLength": 32,
            "type": "string",
            "description": "The identifying number of the document",
            "example": "23"
          },
          "TravelerIdentifierRef": {
            "$ref": "#/components/schemas/TravelerIdentifierRef"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "WaiverCode": {
            "$ref": "#/components/schemas/WaiverCode"
          },
          "Commission": {
            "$ref": "#/components/schemas/Commission"
          },
          "CumulativeValue": {
            "$ref": "#/components/schemas/CumulativeValue"
          },
          "IssuingPCC": {
            "maxLength": 10,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,10})",
            "type": "string",
            "description": "Document issuing pcc",
            "example": "India RPO"
          },
          "IssuingIATA": {
            "pattern": "([0-9]{8})",
            "type": "string",
            "description": "Document issuing IATA",
            "example": "12387498"
          },
          "IssuingCity": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z]{3})",
            "type": "string",
            "description": "Document issuing city",
            "example": "NYK"
          },
          "FiledAmount": {
            "$ref": "#/components/schemas/FiledAmount"
          },
          "contentSource": {
            "$ref": "#/components/schemas/ContentSourceEnum"
          }
        },
        "description": "Discriminator class DocumentTicket, DocumentTicketExchange, DocumentTicketRefund, DocumentTicketRetained, DocumentTicketVoid, DocumentEMD, DocumentEMDExchange, DocumentEMDRefund, DocumentEMDVoid, DocumentMCO, DocumentMCOExchange, DocumentMCORefund, DocumentMCOVoid, DocumentForfeit, DocumentAgencyServiceFee, DocumentAgencyServiceFeeVoid",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CumulativeValue": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CumulativeValue"
          },
          "currencySource": {
            "$ref": "#/components/schemas/CurrencySourceEnum"
          },
          "CurrencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "Base": {
            "type": "number",
            "description": "The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.",
            "format": "float",
            "example": 120.2
          },
          "Taxes": {
            "$ref": "#/components/schemas/Taxes"
          },
          "Fees": {
            "$ref": "#/components/schemas/Fees"
          },
          "Total": {
            "type": "number",
            "description": "Specifies the total price including base + taxes + fees",
            "format": "float",
            "example": 30.13
          },
          "approximateInd": {
            "type": "boolean",
            "description": "True if this amount has been converted from the original amount",
            "example": true
          }
        }
      },
      "ReceiptCancellation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Receipt"
          },
          {
            "properties": {
              "Cancellation": {
                "$ref": "#/components/schemas/Cancellation"
              }
            }
          }
        ]
      },
      "Cancellation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CancellationHold"
          }
        },
        "description": "Discriminator classes CancellationHold or CancellationHospitality",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "CancellationHold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cancellation"
          },
          {
            "properties": {
              "Locator": {
                "$ref": "#/components/schemas/Locator"
              }
            }
          }
        ]
      },
      "DocumentTicket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "required": [
              "ControlNumber"
            ],
            "properties": {
              "ControlNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The control number assigned to the Ticket",
                "example": "1234568780"
              },
              "historicInd": {
                "type": "boolean",
                "description": "If true, this document has been superseded by a new Document facet and may have been exchanged, voided or refunded",
                "example": true
              }
            }
          }
        ]
      },
      "DocumentTicketRefund": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "required": [
              "ControlNumber"
            ],
            "properties": {
              "ControlNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The control number assigned to the TicketRefund",
                "example": "060-02134569"
              },
              "partialRefundInd": {
                "type": "boolean",
                "description": "if true, the ticket has been partially refunded",
                "example": true
              },
              "refundGuaranteedInd": {
                "type": "boolean",
                "description": "if true, this refund amount is guaranteed by Travelport JSON API automated refunds",
                "example": true
              },
              "historicInd": {
                "type": "boolean",
                "description": "if true this document refund has been cancelled/voided",
                "example": true
              },
              "agencySettlementNotReportedInd": {
                "type": "boolean",
                "description": "If true, this refund is settled by the agency directly with the traveler. Transaction is not reported to BSP or ARC. Ticket coupon is updated to RFND status",
                "example": true
              },
              "FareGuaranteePolicy": {
                "$ref": "#/components/schemas/FareGuaranteePolicy"
              },
              "SupplierRetainedPrice": {
                "$ref": "#/components/schemas/PriceDetail"
              },
              "ConsumedPrice": {
                "$ref": "#/components/schemas/PriceDetail"
              }
            }
          }
        ]
      },
      "DocumentTicketVoid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "VoidInd": {
                "type": "string",
                "description": "If true the document has been voided",
                "example": "true"
              }
            }
          }
        ]
      },
      "DocumentTicketExchange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "exchangeInd": {
                "type": "boolean",
                "description": "If true this document has been exchanged for a new document",
                "example": true
              },
              "historicInd": {
                "type": "boolean",
                "description": "if true this document exchange has been cancelled\\/voided",
                "example": true
              },
              "SupplierRetainedPrice": {
                "$ref": "#/components/schemas/PriceDetail"
              },
              "ConsumedPrice": {
                "$ref": "#/components/schemas/PriceDetail"
              }
            }
          }
        ]
      },
      "DocumentTicketRetained": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "ValueRetainedInd": {
                "type": "string",
                "description": "If true the Document Ticket Value has been retained for future use",
                "example": "true"
              }
            }
          }
        ]
      },
      "DocumentForfeit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "forfeitInd": {
                "type": "boolean",
                "description": "If true the value of the document has been forfeited",
                "example": true
              }
            }
          }
        ]
      },
      "DocumentEMD": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "required": [
              "EMDDescription"
            ],
            "properties": {
              "EMDDescription": {
                "$ref": "#/components/schemas/EMDDescription"
              }
            }
          }
        ]
      },
      "DocumentEMDRefund": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "required": [
              "EMDDescription"
            ],
            "properties": {
              "EMDDescription": {
                "$ref": "#/components/schemas/EMDDescription"
              }
            }
          }
        ]
      },
      "DocumentEMDVoid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "VoidInd": {
                "type": "string",
                "description": "If true the EMD has been voided",
                "example": "true"
              }
            }
          }
        ]
      },
      "DocumentEMDExchange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "exchangeInd": {
                "type": "boolean",
                "description": "If true this document has been exchanged for a new document",
                "example": true
              }
            }
          }
        ]
      },
      "DocumentMCO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "mcoInd": {
                "type": "boolean",
                "description": "If true, the document issues is an MCO",
                "example": true
              }
            }
          }
        ]
      },
      "DocumentMCORefund": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "required": [
              "ControlNumber"
            ],
            "properties": {
              "ControlNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "Reference for tracking refund",
                "example": "3212112321"
              }
            }
          }
        ]
      },
      "DocumentMCOVoid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "VoidInd": {
                "type": "string",
                "description": "If true, the MCO has been voided",
                "example": "true"
              }
            }
          }
        ]
      },
      "DocumentMCOExchange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "exchangeInd": {
                "type": "boolean",
                "description": "If true, this MCO has been exchanged",
                "example": true
              }
            }
          }
        ]
      },
      "DocumentAgencyServiceFee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "RelatedDocumentNumber": {
                "$ref": "#/components/schemas/DocumentNumber"
              }
            }
          }
        ]
      },
      "DocumentAgencyServiceFeeVoid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "properties": {
              "voidInd": {
                "type": "boolean",
                "description": "If true, this agency service fee has been voided"
              }
            }
          }
        ]
      },
      "AppliesToOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppliesTo"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferIdentifier"
                }
              }
            }
          }
        ]
      },
      "AppliesToOfferProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppliesTo"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "$ref": "#/components/schemas/OfferIdentifier"
              },
              "ProductIdentifier": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductIdentifier"
                }
              }
            }
          }
        ]
      },
      "AppliesToOfferProductSegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppliesTo"
          },
          {
            "properties": {
              "OfferIdentifier": {
                "$ref": "#/components/schemas/OfferIdentifier"
              },
              "ProductIdentifier": {
                "$ref": "#/components/schemas/ProductIdentifier"
              },
              "SegmentSequenceList": {
                "type": "array",
                "description": "Segment Sequence List",
                "example": [
                  23,
                  12,
                  34,
                  51
                ],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "SpecialServiceBassinet": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "bassinetRequiredInd": {
                "type": "boolean",
                "description": "If true, a bassinet is required",
                "example": true
              }
            }
          }
        ]
      },
      "SpecialServiceBlind": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "blindAssistanceRequestedInd": {
                "type": "boolean",
                "description": "If true the Traveler is Blind and requests assistance"
              }
            }
          }
        ]
      },
      "SpecialServiceDeaf": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "deafAssistanceRequestedInd": {
                "type": "boolean",
                "description": "If True the Traveler is Deaf and requests assistance"
              }
            }
          }
        ]
      },
      "SpecialServiceDPNA": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "required": [
              "Description"
            ],
            "properties": {
              "Description": {
                "maxLength": 1024,
                "type": "string",
                "description": "Describes the Traveler development or intellectual disability"
              }
            }
          }
        ]
      },
      "SpecialServiceRequirement": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "required": [
              "Quantity",
              "SSRCode"
            ],
            "properties": {
              "SSRCode": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "([A-Z]+)?",
                "type": "string",
                "description": "IATA defined SSR code",
                "example": "MEDA"
              },
              "Carrier": {
                "pattern": "([a-zA-Z0-9]{2,3})",
                "type": "string",
                "description": "For non-automated SSRs include the carrier code the request is for. Use YY for all carriers",
                "example": "YY"
              },
              "Quantity": {
                "type": "integer",
                "description": "The number of special services requested",
                "format": "int32",
                "example": 1
              },
              "Comment": {
                "maxLength": 180,
                "type": "string",
                "description": "Free text as defined by IATA SSR composition. Applicable to automated and non-automated selected SSRs only",
                "example": "Special meal with no added sugar",
                "deprecated": true
              },
              "FreeText": {
                "maxLength": 180,
                "type": "string",
                "description": "Free text as defined by IATA SSR composition. Applicable to automated and non-automated selected SSRs only",
                "example": "Special meal with no added sugar"
              },
              "NonAutomatedStructuredText": {
                "maxLength": 64,
                "type": "string",
                "deprecated": true
              }
            }
          }
        ]
      },
      "SpecialServiceUnaccompaniedMinor": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "unaccompaniedMinorInd": {
                "type": "boolean",
                "description": "Indicates that the Traveler is an Unaccompanied minor"
              }
            }
          }
        ]
      },
      "SpecialServiceWheelchairAirlineSupplied": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "cannotAscendStairsInd": {
                "type": "boolean",
                "description": "if true, traveler needs assistance ascending and descending stairs"
              },
              "travelerImmobileInd": {
                "type": "boolean",
                "description": "if true, traveler is completely immobile and requires assistance to\\/from aircraft\\/mobile lounge and ascending\\/descending stairs"
              }
            }
          }
        ]
      },
      "SpecialServiceWheelchairTravelerSupplied": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "BatteryTypeEnum": {
                "$ref": "#/components/schemas/BatteryTypeEnum"
              },
              "Measurement": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Measurement"
                }
              },
              "cannotAscendStairsInd": {
                "type": "boolean",
                "description": "if true, traveler needs assistance ascending and descending stairs",
                "example": true
              },
              "travelerImmobileInd": {
                "type": "boolean",
                "description": "if true, traveler is completely immobile and requires assistance to\\/from aircraft\\/mobile lounge and ascending\\/descending stairs"
              }
            }
          }
        ]
      },
      "BatteryTypeEnum": {
        "type": "string",
        "description": "The type of battery that is used in the device",
        "enum": [
          "LithiumION",
          "NonSpillableBattery",
          "WetCellBattery",
          "NoBatteryManualPower"
        ]
      },
      "SpecialServiceMeal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecialService"
          },
          {
            "properties": {
              "SpecialMealTypeEnum": {
                "$ref": "#/components/schemas/SpecialMealTypeEnum"
              }
            }
          }
        ]
      },
      "SpecialMealTypeEnum": {
        "type": "string",
        "description": "Special Meal Type",
        "example": "Vegan",
        "enum": [
          "Baby",
          "Bland",
          "Child",
          "Diabetic",
          "FruitPlatter",
          "GlutenIntolerant",
          "Hindu",
          "Jain",
          "Kosher",
          "LowCalorie",
          "LowFat",
          "LowSalt",
          "Muslim",
          "NonLactose",
          "None",
          "Seafood",
          "Vegan",
          "VegetarianHindu",
          "VegetarianLactoOvo",
          "VegetarianOriental",
          "VegetarianRaw"
        ]
      },
      "ReservationBuildFromCatalogProductOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationBuild"
          },
          {
            "properties": {
              "BuildFromCatalogProductOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogProductOfferingsRequest"
              }
            }
          }
        ]
      },
      "ReservationBuildFromCatalogOfferings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationBuild"
          },
          {
            "required": [
              "BuildFromCatalogOfferingsRequest"
            ],
            "properties": {
              "BuildFromCatalogOfferingsRequest": {
                "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
              }
            }
          }
        ]
      },
      "ReservationBuildFromCatalogOffering": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationBuild"
          },
          {
            "properties": {
              "BuildFromCatalogOfferingHospitality": {
                "$ref": "#/components/schemas/BuildFromCatalogOfferingHospitality"
              }
            }
          }
        ]
      },
      "BuildFromCatalogOfferingHospitality": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "BuildFromCatalogOfferingHospitality"
          },
          "CatalogOfferingIdentifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "NumberOfRooms": {
            "type": "integer",
            "description": "Number of rooms required.",
            "format": "int32",
            "example": 1
          },
          "RoomPerTravelerInd": {
            "type": "boolean",
            "description": "if true, each traveler will be associated to a single room reservation and stored as a separate reservation. Default behavior is for the room to be associated to the lead traveler"
          }
        }
      },
      "TravelDocumentDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelDocument"
          },
          {
            "properties": {
              "IssuedForGeoPoliticalArea": {
                "$ref": "#/components/schemas/GeoPoliticalArea"
              },
              "Address": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        ]
      },
      "GeoPoliticalArea": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "G"
          },
          "level": {
            "$ref": "#/components/schemas/GeoPoliticalAreaLevelEnum"
          },
          "id": {
            "type": "string",
            "description": "Optional internally referenced id",
            "example": "2"
          }
        },
        "description": "The location code of the geographical location. Codes from Ref Pub"
      },
      "GeoPoliticalAreaLevelEnum": {
        "type": "string",
        "description": "Represents the type of geopolitical area (country, Continent, State etc)",
        "enum": [
          "World",
          "Global Area",
          "Continent Group",
          "Continent",
          "Country",
          "StateProvince",
          "City",
          "Airport"
        ]
      },
      "TravelAgencyDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelAgency"
          },
          {
            "properties": {
              "Telephone": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Telephone"
                }
              },
              "Address": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "Email": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemBirthDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "properties": {
              "BirthDateUpdatable": {
                "type": "string",
                "description": "The updated birth date",
                "format": "date"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemGender": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "properties": {
              "GenderUpdatable": {
                "$ref": "#/components/schemas/GenderEnum"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemCustomerLoyalty": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "required": [
              "CustomerLoyalty"
            ],
            "properties": {
              "CustomerLoyalty": {
                "$ref": "#/components/schemas/CustomerLoyalty"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemTelephone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "required": [
              "Telephone"
            ],
            "properties": {
              "Telephone": {
                "$ref": "#/components/schemas/Telephone"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemTravelDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "required": [
              "TravelDocument"
            ],
            "properties": {
              "TravelDocument": {
                "$ref": "#/components/schemas/TravelDocument"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "required": [
              "Address"
            ],
            "properties": {
              "Address": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "required": [
              "Email"
            ],
            "properties": {
              "Email": {
                "$ref": "#/components/schemas/Email"
              }
            }
          }
        ]
      },
      "TravelerUpdatedItemPersonName": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "required": [
              "PersonNameUpdatable"
            ],
            "properties": {
              "PersonNameUpdatable": {
                "$ref": "#/components/schemas/PersonNameUpdatable"
              }
            }
          }
        ]
      },
      "PersonNameUpdatable": {
        "required": [
          "Given",
          "Middle",
          "Prefix",
          "Suffix",
          "Surname"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "PersonNameUpdatable"
          },
          "Prefix": {
            "maxLength": 10,
            "type": "string",
            "description": "Salutation of honorific",
            "example": "Snr"
          },
          "Given": {
            "maxLength": 30,
            "type": "string",
            "description": "The first given name of the person",
            "example": "John"
          },
          "Middle": {
            "maxLength": 30,
            "type": "string",
            "description": "The middle name of the person",
            "example": "Leslie"
          },
          "Surname": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Family name, last name",
            "example": "Smith"
          },
          "Suffix": {
            "maxLength": 10,
            "type": "string",
            "description": "Name suffix",
            "example": "Mr"
          }
        }
      },
      "TravelerUpdatedItemComments": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatedItem"
          },
          {
            "properties": {
              "Comments": {
                "$ref": "#/components/schemas/Comments"
              }
            }
          }
        ]
      },
      "TermsAndConditionsFullAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFull"
          },
          {
            "properties": {
              "BaggageAllowance": {
                "maxItems": 99,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaggageAllowance"
                }
              },
              "FareRuleIdentifierRef": {
                "$ref": "#/components/schemas/IdentifierRef"
              },
              "Restriction": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Restriction"
                }
              },
              "OrganizationInformation": {
                "$ref": "#/components/schemas/OrganizationInformation"
              },
              "ValidatingAirline": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidatingAirline"
                }
              },
              "BaggageRecheck": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaggageRecheck"
                }
              },
              "TicketingAgency": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketingAgency"
                }
              },
              "PaymentTimeLimit": {
                "type": "string",
                "description": "The date and time by which the Offer must be paid for once the Reservation is completed",
                "format": "date-time",
                "example": "2022-08-07T12:12:00Z"
              },
              "PromotionalCode": {
                "$ref": "#/components/schemas/PromotionalCode"
              },
              "Penalties": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Penalties"
                }
              },
              "FareGuaranteePolicy": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FareGuaranteePolicy"
                }
              },
              "PricingAgency": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PricingAgency"
                }
              },
              "instantPurchaseInd": {
                "type": "boolean",
                "description": "If true the Offer\\/Offering must be paid for at the same time as creating the Reservation",
                "example": true
              },
              "secureFlightPassengerDataRequiredInd": {
                "type": "boolean",
                "description": "If true, Secure Flight Passenger Data must be input for all Travelers to complete the Reservation",
                "example": true
              },
              "TourCodes": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TourCodes"
                }
              },
              "DocumentValidDateRange": {
                "$ref": "#/components/schemas/DocumentValidDateRange"
              },
              "flightPassInd": {
                "type": "boolean",
                "description": "If true, this offer is made in conjunction with a flight pass account"
              },
              "TextBlock": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TextBlock"
                }
              }
            }
          }
        ]
      },
      "TermsAndConditionsFullAirChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFullAir"
          },
          {
            "properties": {
              "FulfillmentMethod": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FulfillmentMethod"
                }
              }
            }
          }
        ]
      },
      "OfferModify": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Offer"
          },
          {
            "required": [
              "ModifyPrice"
            ],
            "properties": {
              "OfferIdentifier": {
                "$ref": "#/components/schemas/OfferIdentifier"
              },
              "ModifyPrice": {
                "$ref": "#/components/schemas/ModifyPriceDetail"
              },
              "scheduleChangeInd": {
                "type": "boolean",
                "description": "Indicator not used. scheduleChangeInd will be passed in Offer schema",
                "example": true,
                "deprecated": true
              },
              "retainedValueInd": {
                "type": "boolean",
                "description": "If true, the value will be retained on a document for future use",
                "example": true
              },
              "productsUpdatedInd": {
                "type": "boolean",
                "description": "If present and true, the products in the host copy of the reservation have already been updated",
                "example": true
              },
              "priceUpdatedInd": {
                "type": "boolean",
                "description": "If present and true, the price in the host copy of the reservation has already been updated",
                "example": true
              },
              "SupplierRetainedPrice": {
                "$ref": "#/components/schemas/PriceDetail"
              },
              "ConsumedPrice": {
                "$ref": "#/components/schemas/PriceDetail"
              }
            }
          }
        ]
      },
      "PaidTaxesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaidTaxes"
          },
          {
            "properties": {
              "Tax": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tax"
                }
              },
              "TaxPercent": {
                "$ref": "#/components/schemas/TaxPercent"
              }
            }
          }
        ]
      },
      "OfferStatusAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferStatus"
          },
          {
            "properties": {
              "StatusAir": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatusAir"
                }
              }
            }
          }
        ]
      },
      "StatusAncillary": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OfferStatusEnum"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          }
        }
      },
      "OfferStatusAncillary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferStatus"
          },
          {
            "required": [
              "StatusAncillary"
            ],
            "properties": {
              "StatusAncillary": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatusAncillary"
                }
              }
            }
          }
        ]
      },
      "TravelerUpdatableItems": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItemsID"
          },
          {
            "properties": {
              "travelerIdentifier": {
                "maxLength": 128,
                "type": "string",
                "description": "Traveler identifier value",
                "example": "7435"
              },
              "TravelerUpdatableItem": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TravelerUpdatableItem"
                }
              }
            }
          }
        ]
      },
      "TravelerUpdatableItem": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerUpdatableItem"
          },
          "Identifier": {
            "maxLength": 128,
            "type": "string",
            "description": "A unique GUID to identify the TravelerUpdatableItem",
            "example": "J3754"
          },
          "addableInd": {
            "type": "boolean",
            "description": "If true the TravelerUpdateableItem can be added to the Traveler",
            "example": true
          },
          "modifiableInd": {
            "type": "boolean",
            "description": "If true the TravelerUpdateableItem can be modified in the Traveler",
            "example": true
          },
          "deletableInd": {
            "type": "boolean",
            "description": "If true the TravelerUpdateableItem can be deleted from the Traveler",
            "example": true
          }
        },
        "description": "Discriminator classes TravelerUpdatableItemAddress, TravelerUpdatableItemBirthDate, TravelerUpdatableItemComments, TravelerUpdatableItemCustomerLoyalty, TravelerUpdatableItemEmail, TravelerUpdatableItemGender, TravelerUpdatableItemPersonName, TravelerUpdatableItemTelephone, TravelerUpdatableItemTravelDocument",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TravelerUpdatableItemBirthDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "BirthDateUpdatable": {
                "type": "string",
                "description": "This birth date can be updated",
                "format": "date"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemGender": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "GenderUpdatable": {
                "$ref": "#/components/schemas/GenderEnum"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemCustomerLoyalty": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "CustomerLoyalty": {
                "$ref": "#/components/schemas/CustomerLoyalty"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemTravelDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "TravelDocument": {
                "$ref": "#/components/schemas/TravelDocument"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemPersonName": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "required": [
              "PersonNameUpdatable"
            ],
            "properties": {
              "PersonNameUpdatable": {
                "$ref": "#/components/schemas/PersonNameUpdatable"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "Email": {
                "$ref": "#/components/schemas/Email"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "Address": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemTelephone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "Telephone": {
                "$ref": "#/components/schemas/Telephone"
              }
            }
          }
        ]
      },
      "TravelerUpdatableItemComments": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TravelerUpdatableItem"
          },
          {
            "properties": {
              "Comments": {
                "$ref": "#/components/schemas/Comments"
              }
            }
          }
        ]
      },
      "FormOfPaymentCash": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "agentNonRefundableInd": {
                "type": "boolean",
                "description": "This indicates that the Cash payment should not be refunded"
              },
              "Comment": {
                "maxLength": 35,
                "type": "string",
                "deprecated": true
              },
              "FreeText": {
                "maxLength": 35,
                "type": "string"
              },
              "miscellaneousInd": {
                "type": "boolean",
                "description": "If true, the form of payment type is MS, miscellaneous"
              }
            }
          }
        ]
      },
      "FormOfPaymentPaymentCard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "PaymentCard": {
                "$ref": "#/components/schemas/PaymentCard"
              },
              "inhibitPaymentCardAuthorizationInd": {
                "type": "boolean",
                "description": "If true, the payment card will not go through card authorization process"
              },
              "notValidForPaymentInd": {
                "type": "boolean",
                "description": "If true, the payment card has been masked and is not valid for making payments"
              },
              "ExtendedPayment": {
                "$ref": "#/components/schemas/ExtendedPayment"
              }
            }
          }
        ]
      },
      "PaymentCard": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "PaymentCard"
          },
          "id": {
            "type": "string",
            "description": "Payment card reference ID.",
            "example": "paymentCard_01"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicated starting date.",
            "format": "date"
          },
          "expireDate": {
            "pattern": "(0[1-9]|1[0-2])[0-9][0-9]",
            "type": "string",
            "description": "The expiration date value",
            "example": "0558"
          },
          "approvalCode": {
            "maxLength": 16,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "The approval code value",
            "example": "C59"
          },
          "PrivacyGroup": {
            "$ref": "#/components/schemas/Privacy"
          },
          "CardType": {
            "$ref": "#/components/schemas/PaymentCardTypeEnum"
          },
          "CardCode": {
            "maxLength": 2,
            "pattern": "([A-Z0-9]+)?",
            "type": "string",
            "description": "Specifies the two character code (MC, VI, AX, etc) for the payment card (open enumeration)"
          },
          "CardBrand": {
            "$ref": "#/components/schemas/PaymentCardTypeIssuer"
          },
          "CardIssuer": {
            "$ref": "#/components/schemas/PaymentCardTypeIssuer"
          },
          "CardHolderName": {
            "maxLength": 128,
            "type": "string",
            "description": "Name as displayed on Payment Card"
          },
          "CardNumber": {
            "$ref": "#/components/schemas/CardNumber"
          },
          "SeriesCode": {
            "$ref": "#/components/schemas/SeriesCode"
          },
          "MagneticStripe": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MagneticStripe"
            }
          },
          "secureInd": {
            "type": "boolean",
            "description": "Implementer: If true, all or a portion of this data is secure, via tokenization, encryption and\\/or masking."
          }
        },
        "description": "Discriminator classes PaymentCard or PaymentCardDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PaymentCardTypeEnum": {
        "type": "string",
        "description": "Credit, Debit, etc.",
        "enum": [
          "Credit",
          "Debit",
          "Gift"
        ]
      },
      "PaymentCardTypeIssuer": {
        "properties": {
          "paymentCardIssuers": {
            "$ref": "#/components/schemas/ListPaymentCardIssuerEnum"
          },
          "paymentCardIssuersExtension": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "issueNumber": {
            "type": "integer",
            "description": "Assigned Type: c-1100:NumberDoubleDigit",
            "format": "int32"
          }
        },
        "description": "This object contains Cards details for Payment"
      },
      "ListPaymentCardIssuerEnum": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ListPaymentCardIssuerEnum_Base"
          }
        }
      },
      "ListPaymentCardIssuerEnum_Base": {
        "type": "string",
        "description": "Source: OpenTravel",
        "example": "VISA",
        "enum": [
          "VISA",
          "USAirways",
          "UnitedAirlines",
          "StarwoodHotels",
          "SouthwestAirlines",
          "RitzCarlton",
          "Mastercard",
          "Mariott",
          "Hyatt",
          "Hilton",
          "Eurocard",
          "Disney",
          "DiscoverCard",
          "DeltaAirlines",
          "ContinentalAirlines",
          "Citibank",
          "Chase",
          "CapitalOne",
          "BritishAirways",
          "BankOfAmerica",
          "AmericanExpress"
        ]
      },
      "CardNumber": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CardNumber"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "EncryptionTokenTypeAuthEnum": {
        "type": "string",
        "description": "Type of Authentication",
        "enum": [
          "SecurityCode",
          "MagneticStripe"
        ]
      },
      "SeriesCode": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "SeriesCode"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "MagneticStripe": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "MagneticStripe"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "FormOfPaymentForfeit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "forfeitInd": {
                "type": "boolean",
                "description": "If true, this form of payment instruction is to forfeit residual amounts specified in an Offer. Used in conjunction with Payment to specify which amounts to be forfeited"
              }
            }
          }
        ]
      },
      "FormOfPaymentBSP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "accountNumber": {
                "maxLength": 32,
                "type": "string",
                "description": "The account number for the Form of payment BSP",
                "example": "378282246310005"
              }
            }
          }
        ]
      },
      "FormOfPaymentAgencyAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "agencyId": {
                "maxLength": 32,
                "type": "string",
                "description": "The agency Id",
                "example": "87654321"
              }
            }
          }
        ]
      },
      "FormOfPaymentInvoice": {
        "required": [
          "InvoiceNumber"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "InvoiceNumber": {
                "maxLength": 38,
                "type": "string",
                "description": "The invoice number applicable to this form of payment. "
              }
            }
          }
        ]
      },
      "FormOfPaymentDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "DocumentNumber": {
                "$ref": "#/components/schemas/DocumentNumber"
              }
            }
          }
        ]
      },
      "FormOfPaymentWaiverCode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "WaiverCode": {
                "$ref": "#/components/schemas/WaiverCode"
              }
            }
          }
        ]
      },
      "PaymentCardDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentCard"
          },
          {
            "properties": {
              "countryOfIssue": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "The country code ISO",
                "example": "AG"
              },
              "companyCardReference": {
                "maxLength": 4096,
                "pattern": "([0-9a-zA-Z]+)?",
                "type": "string",
                "description": "The company card reference",
                "example": "IOR1386861"
              },
              "bankName": {
                "maxLength": 64,
                "type": "string",
                "description": "The bank name value",
                "example": "Bank of America"
              },
              "bankCountryCode": {
                "pattern": "[a-zA-Z]{2}",
                "type": "string",
                "description": "The bank country code ISO",
                "example": "BOFAUS3N"
              },
              "bankStateCode": {
                "maxLength": 2,
                "minLength": 2,
                "pattern": "([a-zA-Z]{2})",
                "type": "string",
                "description": "The bank state code ISO",
                "example": "NE"
              },
              "CardHolderId": {
                "$ref": "#/components/schemas/Identifier"
              },
              "PersonName": {
                "$ref": "#/components/schemas/PersonName"
              },
              "Address": {
                "$ref": "#/components/schemas/Address"
              },
              "Telephone": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Telephone"
                }
              },
              "Email": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "CustomerLoyalty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerLoyalty"
                }
              },
              "SignatureOnFile": {
                "$ref": "#/components/schemas/SignatureOnFile"
              },
              "ThreeDomainSecurity": {
                "$ref": "#/components/schemas/ThreeDomainSecurity"
              },
              "extendedPaymentInd": {
                "type": "boolean",
                "description": "Implementer: If true, the credit card company is requested to delay the date on which the amount of this transaction is applied to the customer's account."
              },
              "enettInd": {
                "type": "boolean",
                "description": "True if this payment card has been issued through Enett",
                "example": true
              },
              "thirdPartyInd": {
                "type": "boolean",
                "description": "If true, then the payment card holder is not one of the travelers in the reservation",
                "example": true
              },
              "acceptanceOverrideInd": {
                "type": "boolean",
                "description": "If true, override airline restriction on the payment card",
                "example": true
              }
            }
          }
        ]
      },
      "SignatureOnFile": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "SignatureOnFile"
          },
          "Date_EffectiveExpire": {
            "$ref": "#/components/schemas/DateEffectiveExpire"
          },
          "signatureOnFileInd": {
            "type": "boolean",
            "description": "When true, indicates a signature has been obtained.",
            "example": true
          }
        }
      },
      "DateEffectiveExpire": {
        "properties": {
          "effective": {
            "type": "string",
            "description": "Indicates the starting date.",
            "format": "date"
          },
          "expire": {
            "type": "string",
            "description": "Indicates the ending date.",
            "format": "date"
          },
          "expireDateExclusiveInd": {
            "type": "boolean",
            "description": "When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15  the last date of the period is Oct 14)."
          }
        },
        "description": "Used to identify the effective date and\\/or expiration date."
      },
      "ThreeDomainSecurity": {
        "required": [
          "ThreeDomainSecurityGateway",
          "ThreeDomainSecurityResults"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ThreeDomainSecurity"
          },
          "ThreeDomainSecurityGateway": {
            "$ref": "#/components/schemas/ThreeDomainSecurityGateway"
          },
          "ThreeDomainSecurityResults": {
            "$ref": "#/components/schemas/ThreeDomainSecurityResults"
          }
        }
      },
      "ThreeDomainSecurityGateway": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ThreeDomainSecurityGateway"
          },
          "eCI": {
            "maxLength": 1,
            "type": "string",
            "description": "The eCI value",
            "example": "2"
          },
          "merchantID": {
            "type": "string",
            "description": "The merchant ID value",
            "example": "mycart"
          },
          "processorID": {
            "type": "string",
            "description": "The processor ID value",
            "example": "201"
          },
          "uRL": {
            "type": "string",
            "description": "Transaction URL.",
            "example": "https://transactionURL"
          },
          "AuthenticationVerification": {
            "$ref": "#/components/schemas/AuthenticationVerification"
          },
          "Password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "AuthenticationVerification": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "AuthenticationVerification"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "Password": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Password"
          },
          "encryptionKey": {
            "type": "string",
            "description": "Note: This contains a key required to retrieve the full payment instrument details compliant with PCI DSS standards.",
            "example": "secret"
          },
          "encryptionKeyMethod": {
            "type": "string",
            "description": "Developer: This contains a reference to the key generation method being used - this is NOT the key value.",
            "example": "RSA"
          },
          "encryptionMethod": {
            "type": "string",
            "description": "OpenTravel Best Practice: Encryption Method: When using the OpenTravel Encryption element, it is RECOMMENDED that all trading partners be informed of all encryption methods being used in advance of implementation to ensure message processing compatibility.",
            "example": "RSA"
          },
          "encryptedValue": {
            "type": "string",
            "description": "Encrypted value",
            "example": "5dfc52b51bd35553df8592078de921bc"
          },
          "mask": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Masked Value",
            "example": "xxxx436"
          },
          "token": {
            "pattern": "[0-9a-zA-Z]{1,32}",
            "type": "string",
            "description": "Token value",
            "example": "A567GTREWQ"
          },
          "tokenProviderID": {
            "type": "string",
            "description": "Developer: This contains a provider ID if multiple providers are used for secure information exchange.",
            "example": "c1234532"
          },
          "authenticationMethod": {
            "$ref": "#/components/schemas/EncryptionTokenTypeAuthEnum"
          },
          "PlainText": {
            "type": "string",
            "description": "Don't use this unless it is REALLY ok to not use encryption. Non-secure (plain text) value.",
            "example": "un-encrypted data"
          },
          "ErrorWarning": {
            "$ref": "#/components/schemas/ErrorWarning"
          }
        }
      },
      "ThreeDomainSecurityResults": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "ThreeDomainSecurityResults"
          },
          "cAVV": {
            "type": "string",
            "description": "The cAVV value",
            "example": "AAABAFaQRwAAAAAAEZBHAAAAAAA=ECI05"
          },
          "pAResStatus": {
            "maxLength": 1,
            "type": "string",
            "description": "The pAResStatus value",
            "example": "1"
          },
          "signatureVerfication": {
            "type": "string",
            "description": "The signature Verification value",
            "example": "Y"
          },
          "transactionID": {
            "type": "string",
            "description": "The transaction ID",
            "example": "9D920E9-6FCF-4A74-A4E0-D6A591D1108F"
          },
          "xID": {
            "type": "string",
            "description": "Merchants must ensure that each Payer Authentication Request (PAReq) contains a unique combination of account ID and XID",
            "example": "2bxUs1emK0SCevbivcApzAcAAQk="
          },
          "eCI": {
            "maxLength": 32,
            "type": "string",
            "description": "Electronic Commerce Indicator - 3-D secure data, contact your authenticator for rules and downline processing.",
            "example": "2"
          },
          "uCAFIndicator": {
            "maxLength": 32,
            "type": "string",
            "description": "Universal Card Authentication Field™ MasterCard only UCAF is the mechanism that is used to transmit the AAV from the merchant to issuer for authentication purposes during the authorization process",
            "example": "0"
          }
        }
      },
      "FormOfPaymentVirtualPaymentAccount": {
        "properties": {
          "Supplier": {
            "maxLength": 32,
            "type": "string",
            "example": "Conferma"
          },
          "AccountID": {
            "maxLength": 32,
            "type": "string",
            "example": "123"
          },
          "AlternateEmailAddress": {
            "type": "array",
            "description": "Deprecated-do not use. Replaced by AgencyEmail and AlternateHotelEmail",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "AlternateHotelEmail": {
            "type": "array",
            "description": "The alternate hotel email to be used for correspondence with this virtual payment",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "AgencyEmail": {
            "type": "array",
            "description": "The agency email to be used for correspondence with this virtual payment",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "PaymentComment": {
            "maxLength": 512,
            "type": "string",
            "description": "Optional text to be sent to the supplier"
          },
          "AlternateHotelFax": {
            "type": "array",
            "description": "Hotel fax number to be used if the hotel fax is unknown or not provided in Property details",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "MaximumChargeableAmount": {
            "type": "array",
            "description": "The maximum amount that the supplier may charge to the payment card including room rate and any incidentals specified",
            "items": {
              "$ref": "#/components/schemas/CurrencyAmount"
            }
          },
          "IncidentalCharges": {
            "type": "array",
            "description": "List of incidentals that are permitted to be charged to the virtual payment card.",
            "example": [
              "BAR",
              "BUS",
              "CRB"
            ],
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          },
          "DeploymentID": {
            "maxLength": 30,
            "type": "string",
            "description": "Conferma transaction ID assigned to virtual credit card.",
            "example": "583677"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          }
        ]
      },
      "FormOfPaymentFlightPass": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "required": [
              "FlightPass"
            ],
            "properties": {
              "FlightPass": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightPass"
                }
              }
            }
          }
        ]
      },
      "FormOfPaymentCheck": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FormOfPaymentID"
          },
          {
            "properties": {
              "checkInd": {
                "type": "boolean",
                "description": "If true, the form of payment type is check"
              }
            }
          }
        ]
      },
      "OfferUpsell": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Offer"
          },
          {
            "properties": {
              "OfferUpsellInd": {
                "type": "string",
                "description": "If true, the OfferUpsell contains ancillary offerings offered in connection with the ParentOffer",
                "example": "true"
              }
            }
          }
        ]
      },
      "BuildAncillaryOffersFromCatalogOfferingsAirSeat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildAncillaryOffersFromCatalogOfferings"
          },
          {
            "required": [
              "SeatAssignment"
            ],
            "properties": {
              "SeatAssignment": {
                "maxLength": 32,
                "type": "string",
                "description": "The specific seat number to be assigned to a Traveler"
              }
            }
          }
        ]
      },
      "ParentOfferAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ParentOffer"
          },
          {
            "properties": {
              "FlightSegmentRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PreferenceAirSeat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Preference"
          },
          {
            "required": [
              "SeatLocation"
            ],
            "properties": {
              "SeatLocation": {
                "$ref": "#/components/schemas/SeatLocationEnum"
              }
            }
          }
        ]
      },
      "SeatLocationEnum": {
        "type": "string",
        "description": "Window, aisle, middle, etc.",
        "enum": [
          "Aisle",
          "Window",
          "Middle"
        ]
      },
      "ReservationBuildFromProducts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationBuild"
          },
          {
            "required": [
              "ProductCriteriaAir"
            ],
            "properties": {
              "ProductCriteriaAir": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductCriteriaAir"
                }
              },
              "PricingModifiersAir": {
                "$ref": "#/components/schemas/PricingModifiersAir"
              }
            }
          }
        ]
      },
      "ReservationBuildFromCatalogOfferingsAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReservationBuildFromCatalogOfferings"
          },
          {
            "required": [
              "PricingModifiersAir"
            ],
            "properties": {
              "PricingModifiersAir": {
                "$ref": "#/components/schemas/PricingModifiersAir"
              }
            }
          }
        ]
      },
      "BuildFromCatalogOfferingsRequestAir": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildFromCatalogOfferingsRequest"
          },
          {
            "properties": {
              "PricingModifiersAir": {
                "$ref": "#/components/schemas/PricingModifiersAir"
              },
              "SegmentSequence": {
                "type": "array",
                "description": "The segmentSequence within the product the action is being requested for. Used when multiple flights exist within a product. Only one product may be selected with this option.",
                "example": [
                  2304,
                  4596,
                  1237
                ],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "TicketDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticket"
          },
          {
            "properties": {
              "SellAmount": {
                "$ref": "#/components/schemas/AlternateAmount"
              },
              "PricingPCC": {
                "maxLength": 10,
                "minLength": 2,
                "pattern": "([a-zA-Z0-9]{2,10})",
                "type": "string"
              }
            }
          }
        ]
      },
      "TicketSummary": {
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Ticket"
          }
        ]
      },
      "EMDSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EMD"
          }
        ]
      },
      "TermsAndConditionsFullHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFull"
          },
          {
            "properties": {
              "Guarantee": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Guarantee"
                }
              },
              "CancelPenalty": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CancelPenalty"
                }
              },
              "AcceptedCreditCard": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AcceptedCreditCard"
                }
              },
              "Description": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "MealsIncluded": {
                "$ref": "#/components/schemas/MealsIncluded"
              },
              "ProductRateCodeInfo": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductRateCodeInfo"
                }
              },
              "CheckInOutPolicy": {
                "$ref": "#/components/schemas/CheckInOutPolicy"
              },
              "DepositPolicy": {
                "$ref": "#/components/schemas/DepositPolicy"
              },
              "RatePaymentInfo": {
                "$ref": "#/components/schemas/RatePaymentEnum"
              },
              "CustomerLoyaltyIDRequiredAtReservation": {
                "type": "boolean",
                "description": "The rate returned is contingent on a membership number to be included within the sell request, typically associated to frequent guest or frequent flyer loyalty numbers."
              },
              "RateQualificationIDRequiredAtCheckIn": {
                "type": "boolean",
                "description": "The discounted rate returned may be denied at the property if guest does not show proof of qualifying, typically a government/military/workplace/association/membership ID."
              }
            }
          }
        ]
      },
      "Guarantee": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "Guarantee"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Guarantee code"
          },
          "guaranteeType": {
            "$ref": "#/components/schemas/GuaranteeTypeEnum"
          },
          "credentialsRequiredInd": {
            "type": "boolean"
          }
        }
      },
      "GuaranteeTypeEnum": {
        "type": "string",
        "description": "An enumerated type defining the guarantee to be applied to this reservation.",
        "enum": [
          "GuaranteeRequired",
          "CC/DC/Voucher",
          "Profile",
          "NoGuaranteesAccepted",
          "GuaranteesAccepted",
          "DepositRequired",
          "GuaranteesNotRequired",
          "DepositNotRequired",
          "PrepayRequired",
          "PrepayNotRequired",
          "NoDepositsAccepted"
        ]
      },
      "CancelPenalty": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "CancelPenalty"
          },
          "Description": {
            "type": "string",
            "description": "A readable text equivalent of the structured Deadline/HotelPenalty combination.",
            "example": "Free cancellation until 2021-10-19T23:59"
          },
          "Deadline": {
            "$ref": "#/components/schemas/Deadline"
          },
          "HotelPenalty": {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          "Refundable": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        }
      },
      "Deadline": {
        "required": [
          "SpecificDate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Deadline"
          },
          "SpecificDate": {
            "$ref": "#/components/schemas/DateOrDateWindows"
          },
          "Time": {
            "type": "string",
            "description": "Local time of the property"
          }
        }
      },
      "DateOrDateWindows": {
        "properties": {
          "specific": {
            "type": "string",
            "description": "A specific date. When used with a windows must fall between start and end.",
            "format": "date",
            "example": "2023-03-03"
          },
          "start": {
            "type": "string",
            "description": "The earliest and latest dates acceptable for the start date.",
            "format": "date",
            "example": "2023-03-03"
          },
          "end": {
            "type": "string",
            "description": "The earliest and latest dates acceptable for the end date.",
            "format": "date",
            "example": "2023-03-03"
          },
          "duration": {
            "type": "string",
            "description": "Duration from  start date.",
            "example": "P1D"
          },
          "durationUnit": {
            "$ref": "#/components/schemas/DurationUnitEnum"
          }
        },
        "description": "Indicates the expiry date."
      },
      "HotelPenalty": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "subjectToTax": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        },
        "description": "Discriminator classes HotelPenaltyAmount, HotelPenaltyNights, HotelPenaltyPercent",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "AcceptedCreditCard": {
        "properties": {
          "value": {
            "maxLength": 2,
            "pattern": "([A-Z0-9]+)?",
            "type": "string"
          },
          "processingCountry": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "Country Code ISO"
          }
        },
        "description": "Credit card code",
        "example": "2031 0222 0321 4532"
      },
      "MealsIncluded": {
        "properties": {
          "breakfastInd": {
            "type": "boolean"
          },
          "lunchInd": {
            "type": "boolean"
          },
          "dinnerInd": {
            "type": "boolean"
          }
        },
        "description": "Indicates if a meal is included"
      },
      "ProductRateCodeInfo": {
        "required": [
          "RateCodeInfo"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ProductRateCodeInfo"
          },
          "ProductRef": {
            "type": "string",
            "description": "Product reference",
            "example": "product_1"
          },
          "RateCodeInfo": {
            "$ref": "#/components/schemas/RateCodeInfo"
          },
          "ExtraAccommodation": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtraAccommodation"
            }
          }
        }
      },
      "RateCodeInfo": {
        "properties": {
          "value": {
            "maxLength": 32,
            "type": "string",
            "example": "HL12344"
          },
          "rateName": {
            "maxLength": 32,
            "type": "string",
            "description": "Rate code name",
            "example": "Special"
          },
          "rateID": {
            "maxLength": 32,
            "type": "string",
            "description": "Identifier for the rate code",
            "example": "2345"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/RateCategoryEnum"
          }
        },
        "description": "Rate Code"
      },
      "RateCategoryEnum": {
        "type": "string",
        "description": "Rate Category",
        "enum": [
          "All",
          "Association",
          "Business",
          "BusinessStandard",
          "Club",
          "Convention",
          "Corporate",
          "Consortiums",
          "Discount",
          "Credential",
          "Employee",
          "FamilyPlan",
          "FullInclusive",
          "Government",
          "Inclusive",
          "Industry/TravelAgentRate",
          "Leisure",
          "Military",
          "Monthly",
          "Multi-DayPackage",
          "MultLevel/Negotiated/Secure",
          "Other",
          "Package",
          "PrePaid",
          "Promotional",
          "RackGeneral",
          "SeniorCitizen",
          "Standard",
          "Tour",
          "VIP",
          "Weekend",
          "Weekly"
        ]
      },
      "ExtraAccommodation": {
        "required": [
          "@type",
          "AccommodationType",
          "quantity"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "ExtraAccommodation"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity.",
            "format": "int32"
          },
          "AccommodationType": {
            "$ref": "#/components/schemas/ExtraAccomodationENUM"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ExtraAccomodationENUM": {
        "type": "string",
        "enum": [
          "Crib",
          "ExtraAdult",
          "ExtraChild",
          "RollawayAdult",
          "RollawayChild"
        ]
      },
      "CheckInOutPolicy": {
        "required": [
          "checkInTime",
          "checkOutTime"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "CheckInOutPolicy"
          },
          "checkInTime": {
            "pattern": "^(2[0-3]|[01][0-9]):([0-5]?[0-9])$",
            "type": "string",
            "description": "The check-in time local to the destination",
            "example": "900"
          },
          "checkOutTime": {
            "pattern": "^(2[0-3]|[01][0-9]):([0-5]?[0-9])$",
            "type": "string",
            "description": "The check-out time local to the destination",
            "example": "600"
          },
          "minimumAge": {
            "type": "integer",
            "description": "Minimum age of guest checking in or out",
            "format": "int32",
            "example": 18
          },
          "Description": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextTitleAndDescription"
            }
          }
        }
      },
      "TextTitleAndDescription": {
        "properties": {
          "value": {
            "maxLength": 4096,
            "type": "string",
            "example": "Ticket exchanged"
          },
          "languages": {
            "type": "array",
            "description": "Language of the text",
            "items": {
              "type": "string",
              "example": "English"
            }
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Title of the Text",
            "example": "Group details."
          }
        },
        "description": "Descriptive text"
      },
      "DepositPolicy": {
        "required": [
          "Deposit"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DepositPolicy"
          },
          "Deposit": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deposit"
            }
          }
        }
      },
      "Deposit": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "DepositAmount"
          },
          "Date": {
            "type": "string",
            "description": "The date and time the deposit is due",
            "format": "date-time",
            "example": "2022-08-07T12:12:00Z"
          },
          "remainderInd": {
            "type": "boolean",
            "description": "If present and true, the date is when the remainder of the deposit is due"
          }
        },
        "description": "Discriminator classes DepositAmount or DepositPercent",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RatePaymentEnum": {
        "type": "string",
        "description": "Payment Rate",
        "enum": [
          "PrePay",
          "PostPay",
          "Unknown"
        ]
      },
      "ProductHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "required": [
              "PropertyKey"
            ],
            "properties": {
              "bookingCode": {
                "maxLength": 32,
                "type": "string",
                "description": "Booking code retrieved from the Availability response."
              },
              "guests": {
                "type": "integer",
                "description": "Total number of guests",
                "format": "int32"
              },
              "moreRatesToken": {
                "maxLength": 512,
                "type": "string",
                "description": "More rates token"
              },
              "adaCompliant": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "propertyName": {
                "maxLength": 128,
                "type": "string",
                "description": "The name of the hotel property"
              },
              "PropertyAddress": {
                "$ref": "#/components/schemas/Address"
              },
              "Telephone": {
                "$ref": "#/components/schemas/Telephone"
              },
              "Email": {
                "$ref": "#/components/schemas/Email"
              },
              "GuestCounts": {
                "$ref": "#/components/schemas/GuestCounts"
              },
              "PropertyKey": {
                "$ref": "#/components/schemas/PropertyKey"
              },
              "TravelerContact": {
                "$ref": "#/components/schemas/TravelerContact"
              },
              "RoomType": {
                "$ref": "#/components/schemas/RoomType"
              },
              "DateRange": {
                "$ref": "#/components/schemas/DateRange"
              }
            }
          }
        ]
      },
      "GuestCounts": {
        "required": [
          "GuestCount"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "GuestCounts"
          },
          "GuestCount": {
            "maxItems": 99,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestCount"
            }
          }
        },
        "description": "The number and type of guests within the room. e.g 2 adults and 1 child age 10"
      },
      "GuestCount": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "GuestCount"
          },
          "age": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The age of the guest",
            "format": "int32",
            "example": 21
          },
          "count": {
            "type": "integer",
            "description": "The number of guests in one AgeQualifyingCode or Count.",
            "format": "int32",
            "example": 2
          },
          "ageQualifyingCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Enter 10 for an adult or 08 for a child",
            "example": "10"
          }
        }
      },
      "PropertyKey": {
        "required": [
          "chainCode",
          "propertyCode"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "PropertyKey"
          },
          "chainCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "Chain code for the property.",
            "example": "HL"
          },
          "propertyCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Code for the property within the hotel chain."
          }
        }
      },
      "TravelerContact": {
        "required": [
          "@type"
        ],
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "TravelerContact"
          },
          "Email": {
            "$ref": "#/components/schemas/Email"
          },
          "Telephone": {
            "$ref": "#/components/schemas/Telephone"
          }
        },
        "description": "Identifies the traveler contact information delivered to the hotel supplier for this segment",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RoomType": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RoomType"
          },
          "RoomCharacteristics": {
            "$ref": "#/components/schemas/RoomCharacteristics"
          },
          "Description": {
            "$ref": "#/components/schemas/TextTitleAndDescription"
          },
          "RoomAmenity": {
            "maxItems": 1000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAmenity"
            }
          }
        },
        "description": "Discriminator classes RoomType and RoomTypeDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RoomCharacteristics": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "RoomCharacteristics"
          },
          "typeCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Type code"
          },
          "viewCode": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA code describing the view."
          },
          "viewDescription": {
            "type": "string",
            "description": "Free text describing the view",
            "example": "Mountain View"
          },
          "category": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "Category of the room.",
            "deprecated": true
          },
          "smokingAllowed": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "wifiIncluded": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          },
          "BedConfiguration": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BedConfiguration"
            }
          },
          "nonSmokingInd": {
            "type": "boolean"
          },
          "shortRoomDescription": {
            "maxLength": 100,
            "type": "string",
            "description": "A concise edited form of the current room description",
            "example": "2 Queen bed(s) Standard Room Smoking",
            "deprecated": true
          },
          "accessibleRoom": {
            "$ref": "#/components/schemas/YesNoUnknownEnum"
          }
        }
      },
      "BedConfiguration": {
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The number of bed of this type and size in the room",
            "format": "int32"
          },
          "bedType": {
            "maxLength": 32,
            "type": "string",
            "description": "Configuration of bed(s) in room."
          },
          "size": {
            "maxLength": 32,
            "type": "string",
            "description": "Size of bed(s) in the room."
          }
        }
      },
      "RoomAmenity": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "RoomAmenity"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "description of the room amenity",
            "example": "WiFi"
          },
          "quantity": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "quantity of amenity",
            "format": "int32"
          },
          "Name": {
            "maxLength": 32,
            "type": "string",
            "description": "Room Amenity Name",
            "example": "24 hour Room Service"
          },
          "Inclusion": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "maxLength": 32,
              "type": "string"
            }
          },
          "includedInd": {
            "type": "boolean",
            "description": "To represent if the Amenity is included in the rate"
          },
          "surchargeInd": {
            "type": "boolean",
            "description": "To represent if the Amenity attracts a surcharge"
          },
          "code": {
            "pattern": "[0-9A-Z]{1,3}(\\\\.[A-Z]{3}(\\\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA code used to describe the room amenity. This is optional in the Properties Search request but mandatory in the response"
          }
        }
      },
      "PriceBreakdownHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "properties": {
              "roomPricingType": {
                "$ref": "#/components/schemas/PricingEnum"
              },
              "Description": {
                "maxLength": 1024,
                "type": "string"
              },
              "NightlyRate": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NightlyRate"
                }
              },
              "AverageNightlyRate": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CurrencyAmount"
                }
              },
              "AmenitySurcharges": {
                "$ref": "#/components/schemas/AmenitySurchargesDetail"
              },
              "priceChangesDuringStayInd": {
                "type": "boolean",
                "description": "If present and true, indicates the nightly price changes one or more times during the stay"
              },
              "shortRateDescription": {
                "type": "string",
                "description": "A normalized rate description for comparing rates across multiple aggregators.",
                "example": "Flexible Rate"
              }
            }
          }
        ]
      },
      "PricingEnum": {
        "type": "string",
        "description": "An enumerated type that defines how a service is priced.",
        "enum": [
          "Per stay",
          "Per person",
          "Per night",
          "Per person per night",
          "Per use"
        ]
      },
      "NightlyRate": {
        "required": [
          "Amount",
          "startDate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "NightlyRate"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "nights": {
            "type": "integer",
            "description": "Number of nights this rate applies",
            "format": "int32"
          },
          "Amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "AmenitySurchargesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmenitySurcharges"
          },
          {
            "required": [
              "Surcharge"
            ],
            "properties": {
              "Surcharge": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Surcharge"
                }
              }
            }
          }
        ]
      },
      "AmenitySurcharges": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AmenitySurchargesDetail"
          },
          "TotalSurcharges": {
            "type": "number",
            "description": "A monetary amount, up to 4 decimal places. Decimal place needs to be included.",
            "format": "float",
            "example": 211.11
          },
          "approximateInd": {
            "type": "boolean",
            "description": "if true, the surcharge amounts are approximate",
            "example": false
          }
        },
        "description": "Discriminator classes AmenitySurcharges or AmenitySurchargesDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "DepositNumberOfNights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "required": [
              "NumberOfNights"
            ],
            "properties": {
              "NumberOfNights": {
                "type": "integer",
                "description": "The number of nights that must be paid for by deposit",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DepositAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "required": [
              "CurrencyAmount"
            ],
            "properties": {
              "CurrencyAmount": {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            }
          }
        ]
      },
      "DepositPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "properties": {
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "The percentage of the price that must be paid for by deposit",
                "format": "float",
                "example": 20
              }
            }
          }
        ]
      },
      "HotelPenaltyAmount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          {
            "required": [
              "Amount"
            ],
            "properties": {
              "includesTax": {
                "$ref": "#/components/schemas/YesNoUnknownEnum"
              },
              "Amount": {
                "maxItems": 2,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CurrencyAmount"
                }
              }
            }
          }
        ]
      },
      "HotelPenaltyNights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          {
            "required": [
              "Nights"
            ],
            "properties": {
              "Nights": {
                "type": "integer",
                "description": "The number of nights that will be charged as a penalty",
                "format": "int32"
              }
            }
          }
        ]
      },
      "HotelPenaltyPercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelPenalty"
          },
          {
            "required": [
              "Percent",
              "appliesTo"
            ],
            "properties": {
              "appliesTo": {
                "$ref": "#/components/schemas/PercentAppliesTo"
              },
              "Percent": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "number",
                "description": "A percentage charged as a Penalty",
                "format": "float"
              },
              "Nights": {
                "type": "integer",
                "description": "The number of nights the percentage needs to be applied to determine cancel penalty amount",
                "format": "int32"
              },
              "Amount": {
                "maxItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CurrencyAmount"
                }
              }
            }
          }
        ]
      },
      "PercentAppliesTo": {
        "type": "string",
        "description": "The increment the percent applies to. Default value is Amount",
        "example": "Amount",
        "enum": [
          "Nights",
          "Stay",
          "Amount"
        ]
      },
      "AgeQualifying": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "AgeQualifying"
          },
          "minAge": {
            "type": "integer",
            "description": "MinAge: The minimum age to qualify for AgeQualifyingCode.",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "Max Age: The maximum age to qualify for AgeQualifyingCode.",
            "format": "int32"
          },
          "ageBucket": {
            "maxLength": 32,
            "type": "string",
            "description": "The age bucket"
          },
          "count": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The number of age qualifying",
            "format": "int32"
          },
          "ageQualifyingCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Enter 10 for an adult or 08 for a child",
            "example": "10"
          }
        }
      },
      "RoomTypeDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomType"
          },
          {
            "properties": {
              "numberOfUnits": {
                "type": "integer",
                "description": "The number of rooms that have been combined to create this room type.",
                "format": "int32"
              },
              "reqdGuaranteeType": {
                "type": "string",
                "description": "TODO-(Should this be Guarantee?)Denotes the form of guarantee for this room."
              },
              "AdditionalDetails": {
                "$ref": "#/components/schemas/AdditionalDetails"
              },
              "RoomOccupancy": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoomOccupancy"
                }
              },
              "roomInd": {
                "type": "boolean",
                "description": "Indicates the room is a sleeping room when true."
              },
              "convertedInd": {
                "type": "boolean",
                "description": "Indicates the room is converted when true."
              },
              "alternateInd": {
                "type": "boolean",
                "description": "Indicates the room is an alternate room type to the requested room type when true."
              }
            }
          }
        ]
      },
      "AdditionalDetails": {
        "required": [
          "AdditionalDetail"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdditionalDetails"
          },
          "AdditionalDetail": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalDetail"
            }
          }
        }
      },
      "AdditionalDetail": {
        "properties": {
          "@type": {
            "type": "string",
            "example": "AdditionalDetail"
          },
          "detailType": {
            "pattern": "[0-9A-Z]{1,3}(\\.[A-Z]{3}(\\.X){0,1}){0,1}",
            "type": "string",
            "description": "OTA Code"
          },
          "code": {
            "maxLength": 32,
            "type": "string",
            "description": "Partner code"
          },
          "Amount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "Description": {
            "$ref": "#/components/schemas/TextTitleAndDescription"
          }
        }
      },
      "RoomOccupancy": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "RoomOccupancy"
          },
          "minOccupancy": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The minimum occupancy",
            "format": "int32"
          },
          "maxOccupancy": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The maximum number of room occupants.",
            "format": "int32"
          },
          "AgeQualifying": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeQualifying"
            }
          }
        }
      },
      "RateCandidateDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RateCandidate"
          },
          {
            "properties": {
              "rateID": {
                "maxLength": 32,
                "type": "string",
                "description": "ID of the rate plan associated with the negotiated rate.",
                "example": "HL123"
              },
              "CustomerLoyalty": {
                "$ref": "#/components/schemas/CustomerLoyalty"
              }
            }
          }
        ]
      },
      "RateCandidate": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RateCandidate"
          },
          "priority": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "rate candidate priority",
            "format": "int32"
          },
          "rateCode": {
            "maxLength": 6,
            "minLength": 3,
            "type": "string",
            "description": "The rateCode to be applied to the request",
            "example": "HL123"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/RateCategoryEnum"
          },
          "chainCode": {
            "maxLength": 5,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,5})",
            "type": "string",
            "description": "The hotel chain code",
            "example": "HL"
          },
          "propertyCode": {
            "maxLength": 32,
            "type": "string",
            "description": "The hotel chain code",
            "example": "HL12345"
          },
          "masterRateCode": {
            "maxLength": 6,
            "minLength": 6,
            "type": "string",
            "description": "The masterRateCode to be applied to the request. If masterRateCode is sent, any additional rateCodes will be ignored.",
            "example": "1ABC23"
          }
        },
        "description": "Discriminator classes RateCandidate and RateCandidateDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RateCandidatesDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RateCandidates"
          },
          {
            "properties": {
              "numberOfRatePlans": {
                "type": "integer",
                "description": "Minimum number rate plans requested in response",
                "format": "int32"
              }
            }
          }
        ]
      },
      "RateCandidates": {
        "required": [
          "@type",
          "RateCandidate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "RateCandidates"
          },
          "RateCandidate": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateCandidate"
            }
          },
          "prePayRatesOnlyInd": {
            "type": "boolean",
            "description": "If true, only prepay rates will be returned"
          },
          "postPayRatesOnlyInd": {
            "type": "boolean",
            "description": "If true, only postpay rates will be returned"
          },
          "removeSpecialRatesInd": {
            "type": "boolean",
            "description": "If true, removes all rate category type rates (except for negotiated rates); false allows the return of all rates returned by the supplier, which may include rate category rates (Promotional, Package, etc.). When indicator is not set the default behavior is false."
          }
        },
        "description": "Discriminator classes RateCandidates and RateCandidatesDetail",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "PropertyAddress": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          }
        ]
      },
      "OfferStatusHospitality": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferStatus"
          },
          {
            "properties": {
              "Status": {
                "$ref": "#/components/schemas/OfferStatusEnum"
              }
            }
          }
        ]
      },
      "ProductVehicle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "properties": {
              "Vehicle": {
                "$ref": "#/components/schemas/VehicleDetail"
              }
            }
          }
        ]
      },
      "VehicleDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Vehicle"
          },
          {
            "properties": {
              "VehicleDateLocation": {
                "$ref": "#/components/schemas/VehicleDateLocation"
              }
            }
          }
        ]
      },
      "Vehicle": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "example": "VehicleDetail"
          },
          "TransmissionTypeCode": {
            "$ref": "#/components/schemas/Code"
          },
          "VehicleCategoryCode": {
            "$ref": "#/components/schemas/Code"
          },
          "FuelTypeCode": {
            "$ref": "#/components/schemas/Code"
          },
          "VehicleSizeCode": {
            "$ref": "#/components/schemas/Code"
          },
          "VehicleClassCode": {
            "$ref": "#/components/schemas/Code"
          },
          "baggageQuantity": {
            "type": "integer",
            "description": "Baggage Quantity that is able to fit into the car with passengers",
            "format": "int32"
          },
          "passengerQuantity": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          },
          "doorCount": {
            "maxLength": 32,
            "type": "string",
            "description": "The number of doors for the vehicle"
          },
          "Image": {
            "$ref": "#/components/schemas/Image"
          },
          "VehicleMakeModel": {
            "$ref": "#/components/schemas/VehicleMakeModel"
          },
          "airConditioningInd": {
            "type": "boolean",
            "description": "True if vehicle has air conditioning"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "VehicleMakeModel": {
        "properties": {
          "value": {
            "maxLength": 128,
            "type": "string"
          },
          "code": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "description": "The 4 character code for the make and model of the vehicle.",
            "example": "ECMR"
          },
          "supplierReference": {
            "maxLength": 64,
            "type": "string"
          },
          "codeContext": {
            "maxLength": 32,
            "type": "string",
            "description": "Code context",
            "example": "ISO"
          },
          "vendorCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,2})",
            "type": "string",
            "description": "The 2 character vendor code",
            "example": "ZI"
          },
          "operatingSupplierCode": {
            "maxLength": 32,
            "type": "string"
          },
          "operatingSupplierName": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "description": "The make and model of the vehicle along with a description"
      },
      "VehicleDateLocation": {
        "required": [
          "@type",
          "RentalPickup",
          "RentalReturn"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "VehicleDateLocation"
          },
          "RentalPickup": {
            "$ref": "#/components/schemas/RentalPickup"
          },
          "RentalReturn": {
            "$ref": "#/components/schemas/RentalReturn"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RentalPickup": {
        "required": [
          "@type",
          "VendorLocation",
          "date",
          "time"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "RentalPickup"
          },
          "date": {
            "type": "string",
            "description": "The local date of the pickup or return",
            "format": "date",
            "example": "2024-10-23"
          },
          "time": {
            "type": "string",
            "description": "The local time of the pickup or return"
          },
          "timeString": {
            "maxLength": 32,
            "type": "string",
            "deprecated": true
          },
          "VendorLocation": {
            "$ref": "#/components/schemas/VendorLocation"
          },
          "GeoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "VendorLocation": {
        "required": [
          "@type",
          "code"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "VendorLocation"
          },
          "rentalLocationNumber": {
            "maxLength": 5,
            "pattern": "([0-9a-zA-Z]+)?",
            "type": "string",
            "description": "Assigned Type: ctvh-1100:RentalLocationNumber"
          },
          "vendorCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "([a-zA-Z0-9]{2,2})",
            "type": "string",
            "description": "The two character vendor code",
            "example": "ZI"
          },
          "RentalLocationCode": {
            "description": "Locations based on the OTA VWF list",
            "allOf": [
              {
                "$ref": "#/components/schemas/Code"
              }
            ]
          },
          "CounterLocationCode": {
            "description": "Counter location of the vehicle rental",
            "allOf": [
              {
                "$ref": "#/components/schemas/Code"
              }
            ]
          },
          "rentalLocationName": {
            "maxLength": 128,
            "type": "string",
            "description": "Assigned Type: c-1100:StringShort"
          },
          "code": {
            "maxLength": 6,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]{3,6})",
            "type": "string",
            "description": "The vendor location code"
          },
          "Address": {
            "$ref": "#/components/schemas/Address"
          },
          "Telephone": {
            "maxItems": 5,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            }
          },
          "Description": {
            "maxLength": 1024,
            "type": "string",
            "description": "Detailed location information on where to pick up and return a vehicle"
          },
          "OperationTimes": {
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationTimes"
            }
          },
          "Directions": {
            "maxLength": 512,
            "type": "string",
            "description": "Directions for collecting the vehicle"
          },
          "AdditionalInstructions": {
            "maxLength": 512,
            "type": "string",
            "description": "Additional instructions regarding the vendor location"
          },
          "ShuttleService": {
            "maxLength": 512,
            "type": "string",
            "description": "Information on shuttle service"
          }
        },
        "description": "The vendor's location number for pickup or return",
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OperationTimes": {
        "properties": {
          "@type": {
            "type": "string",
            "default": "OperationTimes"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeekEnum"
            }
          },
          "openTime": {
            "type": "string",
            "example": "45900"
          },
          "closeTime": {
            "type": "string",
            "example": "06:00:00"
          }
        }
      },
      "GeoLocation": {
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The measure of the angular distance on a meridan north or south equator",
            "format": "double",
            "example": 38.8951
          },
          "longitude": {
            "type": "number",
            "description": "The measure of the angular distance on a meridan east or west equator",
            "format": "double",
            "example": -77.0364
          },
          "altitude": {
            "type": "number",
            "description": "The height or an item, typically measured above sea level",
            "format": "float",
            "example": 5280
          },
          "altitudeUnitOfDistance": {
            "$ref": "#/components/schemas/UnitOfDistanceEnum"
          },
          "positionAccuracy": {
            "$ref": "#/components/schemas/PositionAccuracyEnum"
          },
          "mapURL": {
            "type": "string",
            "description": "link for embedded map showing location",
            "example": "www.destinationmap.com"
          },
          "formatURL": {
            "type": "string",
            "description": "The URL to the format for the latitude and longitude for this location.",
            "example": "www.destinationmap.com"
          }
        },
        "description": "Used to specify the geographic coordinates of a location"
      },
      "UnitOfDistanceEnum": {
        "type": "string",
        "description": "Miles, Kilometers, etc.",
        "enum": [
          "Miles",
          "Kilometers"
        ]
      },
      "PositionAccuracyEnum": {
        "type": "string",
        "description": "Specifies the level of accuracy for the position",
        "enum": [
          "Zip9Code",
          "Zip7Code",
          "Zip5Code",
          "Street",
          "State",
          "Property",
          "Intersection",
          "Exact",
          "County",
          "City",
          "Block"
        ]
      },
      "RentalReturn": {
        "required": [
          "@type",
          "VendorLocation",
          "date",
          "time"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "RentalReturn"
          },
          "date": {
            "type": "string",
            "description": "The local date of the pickup or return",
            "format": "date",
            "example": "2024-10-23"
          },
          "time": {
            "minItems": 1,
            "type": "string",
            "description": "The local time of the pickup or return"
          },
          "timeString": {
            "maxLength": 32,
            "type": "string",
            "deprecated": true
          },
          "VendorLocation": {
            "$ref": "#/components/schemas/VendorLocation"
          },
          "GeoLocation": {
            "$ref": "#/components/schemas/GeoLocation"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ProductAncillaryVehicle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductAncillary"
          },
          {
            "required": [
              "equipmentType"
            ],
            "properties": {
              "EquipmentTypeCode": {
                "description": "The type of vehicle Ancillary",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Code"
                  }
                ]
              },
              "freeQuantityIncludedInPrice": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The mount of this ancillary that is included with the vehicle rental",
                "format": "int32"
              },
              "maxBookableQuantity": {
                "minimum": 0,
                "exclusiveMinimum": false,
                "type": "integer",
                "description": "The maximum amount of this ancillary that may be booked with the vehicle rental",
                "format": "int32"
              }
            }
          }
        ]
      },
      "PriceBreakdownVehiclePrice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "required": [
              "VehiclePrice"
            ],
            "properties": {
              "VehiclePrice": {
                "$ref": "#/components/schemas/VehiclePrice"
              },
              "rateGuaranteedInd": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "VehiclePrice": {
        "required": [
          "@type",
          "SupplierRate"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "VehiclePrice"
          },
          "id": {
            "type": "string",
            "description": "Internal ID"
          },
          "rateSource": {
            "maxLength": 32,
            "type": "string",
            "description": "Assigned Type: c-1100:StringTiny"
          },
          "rateGuaranteedInd": {
            "type": "boolean",
            "description": "Assigned Type: c-1100:OptionalIndicator"
          },
          "ratePeriod": {
            "$ref": "#/components/schemas/RatePeriodEnum"
          },
          "RateDistance": {
            "$ref": "#/components/schemas/RateDistance"
          },
          "RateDescription": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextBlock"
            }
          },
          "RateAvailability": {
            "$ref": "#/components/schemas/RateAvailabilityEnum"
          },
          "SupplierRate": {
            "$ref": "#/components/schemas/SupplierRate"
          },
          "ApproximateRate": {
            "$ref": "#/components/schemas/ApproximateRate"
          },
          "CustomerLoyalty": {
            "$ref": "#/components/schemas/CustomerLoyalty"
          },
          "RateQualifier": {
            "$ref": "#/components/schemas/RateQualifierEnum"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RatePeriodEnum": {
        "type": "string",
        "description": "The time period for a rate such as daily, weekly, monthly",
        "enum": [
          "Hour",
          "Day",
          "Week",
          "Month",
          "Year",
          "Total",
          "RentalPeriod",
          "Weekend",
          "Bundle",
          "Package",
          "ExtraHour",
          "ExtraDay",
          "ExtraWeek",
          "ExtraMonth",
          "Other"
        ]
      },
      "RateDistance": {
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unlimitedDistanceInd": {
            "type": "boolean",
            "description": "Assigned Type: c-1100:OptionalIndicator"
          },
          "requestedCodeAppliedInd": {
            "type": "boolean",
            "description": "Assigned Type: c-1100:OptionalIndicator"
          },
          "allowance": {
            "type": "integer",
            "description": "Assigned Type: c-1100:NumberTripleDigit",
            "format": "int32"
          },
          "distanceUnits": {
            "$ref": "#/components/schemas/UnitOfDistanceEnum"
          },
          "ratePeriod": {
            "$ref": "#/components/schemas/RatePeriodEnum"
          }
        },
        "description": "Rate for the period defined by the attributes"
      },
      "RateAvailabilityEnum": {
        "type": "string",
        "description": "Options are available to sell, need to call, or closed",
        "enum": [
          "Available",
          "NeedToCall",
          "Closed"
        ]
      },
      "SupplierRate": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "SupplierRate"
          },
          "BaseRate": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "RateForPeriod": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "DropOffCharge": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "ExtraMileageCharge": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "EstimatedTotalAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "ApproximateRate": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "ApproximateRate"
          },
          "BaseRate": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "RateForPeriod": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "DropOffCharge": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "ExtraMileageCharge": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "EstimatedTotalAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "RateQualifierEnum": {
        "type": "string",
        "description": "A closed enumeration of possible rate qualifiers for vehicle rental",
        "enum": [
          "Other",
          "PostPayment",
          "Guarantee",
          "PrePayment",
          "Deposit"
        ]
      },
      "PriceBreakdownVehicleDeposit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "properties": {
              "totalPayableNowInd": {
                "type": "boolean",
                "description": "If True the Amount is the total amount payable now"
              },
              "totalPayableLaterInd": {
                "type": "boolean",
                "description": "If True the Amount is the total amount payable later"
              }
            }
          }
        ]
      },
      "PriceBreakdownAncillaryVehicle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdownAncillary"
          },
          {
            "properties": {
              "RatePeriod": {
                "$ref": "#/components/schemas/RatePeriodEnum"
              },
              "payNowInd": {
                "type": "boolean",
                "description": "If true the vehicle ancillary must be paid now and is included in the totalPrice calculation"
              },
              "includedInEstimatedTotalInd": {
                "type": "boolean",
                "description": "If true the AncillaryVehicle is included in the estimated totalPrice."
              }
            }
          }
        ]
      },
      "PriceBreakdownVehicleCharges": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          {
            "properties": {
              "VehicleCharges": {
                "$ref": "#/components/schemas/VehicleCharges"
              }
            }
          }
        ]
      },
      "VehicleCharges": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "VehicleCharges"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "Assigned Type: c-1100:String"
          },
          "VehicleChargePurposeCode": {
            "$ref": "#/components/schemas/Code"
          },
          "ratePeriod": {
            "$ref": "#/components/schemas/RatePeriodEnum"
          },
          "rateChargeInfo": {
            "maxLength": 512,
            "type": "string",
            "description": "Assigned Type: c-1100:String"
          },
          "RateCategory": {
            "$ref": "#/components/schemas/RateCategoryEnum"
          },
          "VehicleCoverageTypeCode": {
            "description": "The OTA code defined for the Vehicle Coverage Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/Code"
              }
            ]
          },
          "Calculation": {
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calculation"
            }
          },
          "taxInclusiveInd": {
            "type": "boolean"
          },
          "guaranteedInd": {
            "type": "boolean"
          },
          "payNowInd": {
            "type": "boolean",
            "description": "If true the vehicle charge must be paid now and is included in the totalPrice calculation"
          },
          "includedInEstimatedTotalInd": {
            "type": "boolean"
          },
          "includedInBaseRateInd": {
            "type": "boolean",
            "description": "If true the Vehicle Charge has been included in the base rate of the Vehicle price"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "Calculation": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Calculation"
          },
          "UnitAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "UnitName": {
            "$ref": "#/components/schemas/RatePeriodEnum"
          },
          "Quantity": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The quantity used in the calculation of the vehicle charge e.g 2 x $500 per week",
            "format": "int32"
          },
          "MaxQuantity": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "The maximum quantity allowed for a charge e.g Baby seat charged at $10 per day for a maximum of 10 days",
            "format": "int32"
          },
          "TotalAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "Percent": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Used when the charge is based on a percentage of a TotalAmount",
            "format": "float"
          },
          "Applicability": {
            "$ref": "#/components/schemas/Comment"
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "TermsAndConditionsFullVehicle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsAndConditionsFull"
          },
          {
            "properties": {
              "TermsAndConditionsSubCategory": {
                "$ref": "#/components/schemas/TextBlock"
              },
              "DriverInfo": {
                "$ref": "#/components/schemas/DriverInfo"
              },
              "ProductRateCodeInfo": {
                "maxItems": 10,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductRateCodeInfo"
                }
              },
              "Policy": {
                "$ref": "#/components/schemas/Policy"
              },
              "flightRestrictionInd": {
                "type": "boolean",
                "description": "if true, the traveler must have a valid flight to qualify for this Offer"
              }
            }
          }
        ]
      },
      "DriverInfo": {
        "required": [
          "age"
        ],
        "properties": {
          "age": {
            "maximum": 99,
            "minimum": 18,
            "type": "integer",
            "description": "the age of the driver from 18 - 99",
            "format": "int32",
            "example": 52
          },
          "countryOfDocIssue": {
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "The country code that issued the document"
          }
        },
        "description": "Basic information (metadata) about the intended driver of the vehicle"
      },
      "Policy": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "Policy"
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Assigned Type: c-1100:String"
          },
          "TextFormatted": {
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextFormatted"
            }
          },
          "SubPolicy": {
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubPolicy"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "SubPolicy": {
        "required": [
          "@type"
        ],
        "properties": {
          "@type": {
            "type": "string",
            "default": "SubPolicy"
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Assigned Type: c-1100:String"
          },
          "id": {
            "type": "string"
          },
          "TextFormatted": {
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextFormatted"
            }
          }
        },
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "OfferStatusVehicle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferStatus"
          },
          {
            "properties": {
              "Status": {
                "$ref": "#/components/schemas/OfferStatusEnum"
              }
            }
          }
        ]
      },
      "CustomAuxiliarySegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomAuxiliarySegmentID"
          },
          {
            "required": [
              "Quantity",
              "SegmentType",
              "SupplierCode"
            ],
            "properties": {
              "SegmentType": {
                "maxLength": 3,
                "pattern": "([A-Z]+)?",
                "type": "string",
                "description": "The auxiliary segment type. SUR, TUR",
                "example": "TUR"
              },
              "SupplierCode": {
                "pattern": "([a-zA-Z0-9]{2})",
                "type": "string",
                "description": "The supplier code application to this segment.",
                "example": "YY"
              },
              "StatusCode": {
                "maxLength": 2,
                "pattern": "([A-Z]+)?",
                "type": "string",
                "example": "BK"
              },
              "Quantity": {
                "type": "integer",
                "description": "The quantity of services provided for this auxiliary segment.",
                "format": "int32",
                "example": 1
              },
              "Location": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "([a-zA-Z]{3})",
                "type": "string",
                "description": "Three character IATA location code relevant to the auxiliary segment.",
                "example": "LON"
              },
              "Date": {
                "type": "string",
                "description": "The local date relevant to the auxiliary segment.",
                "format": "date"
              },
              "CustomText": {
                "maxLength": 115,
                "type": "string",
                "description": "Custom text relevant to this auxiliary segment."
              }
            }
          }
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - 400",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - 401",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "PaymentRequired": {
        "description": "Payment Required - 402",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - 403",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - 404",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error - 500",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "parameters": {
      "TraceId": {
        "name": "TraceId",
        "in": "header",
        "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 89,
          "minLength": 10,
          "pattern": "(^[a-zA-Z-0-9_]*[-]?[+]?$)",
          "type": "string"
        }
      },
      "XAUTH_TRAVELPORT_ACCESSGROUP": {
        "name": "XAUTH_TRAVELPORT_ACCESSGROUP",
        "in": "header",
        "description": "Identifies the Travelport access group with which the caller is associated",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 36,
          "minLength": 36,
          "pattern": "([a-zA-Z-0-9-_]*)",
          "type": "string"
        }
      },
      "travelportPlusSessionIdentifier": {
        "name": "travelportPlusSessionIdentifier",
        "in": "header",
        "description": "travelportPlusSessionIdentifier used to maintain an established agency session",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 100,
          "minLength": 0,
          "pattern": "([a-zA-Z-0-9-_]*)",
          "type": "string"
        }
      },
      "TVP-PCC-Core": {
        "name": "TVP-PCC-Core",
        "in": "header",
        "description": "Allows user to pass PCC instead of Access Group ID",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "pattern": "^[a-zA-Z\\d]{3,4}_\\w{2}$",
          "type": "string",
          "example": "DU7_1G"
        }
      },
      "E2ETrackingID": {
        "name": "E2ETrackingID",
        "in": "header",
        "description": "Identifier used to correlate API invocations across long-running or multi-call business flows.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "ReservationID": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReservationDetailWrapper"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "https://oauth.pp.travelport.com/oauth/oauth20/token",
            "scopes": {}
          }
        }
      }
    }
  }
}